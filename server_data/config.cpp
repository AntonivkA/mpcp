// config.bin - 11:39:27 05/22/17, generated in 1.36 seconds
// Generated by unRap v1.06 by Kegetys
// Separate rootclasses: Disabled, Automatic comments: Enabled

#define private		0
#define protected		1
#define public		2

enum {
	DESTRUCTENGINE = 2,
	DESTRUCTDEFAULT = 6,
	DESTRUCTWRECK = 7,
	DESTRUCTTREE = 3,
	DESTRUCTTENT = 4,
	STABILIZEDINAXISX = 1,
	STABILIZEDINAXISY = 2,
	DESTRUCTNO = 0,
	STABILIZEDINAXESBOTH = 3,
	STABILIZEDINAXESNONE = 0,
	DESTRUCTMAN = 5,
	DESTRUCTBUILDING = 1,
};

class CfgServerHost {
	primary = "https://lb01-bis.multiplay.co.uk:8080/";
	secondary = "https://node03-bis.multiplay.co.uk:8080/";
};

class CfgPatches {
	class DZ_Server_Data {
		units[] = {};
		weapons[] = {};
		requiredVersion = 0.1;
		requiredAddons[] = {};
	};
};

class CfgSpawns {
	types[] = {"ZmbM_HermitSkinny_Beige", "ZmbM_HermitSkinny_Black", "ZmbM_HermitSkinny_Green", "ZmbM_HermitSkinny_Red", "ZmbM_FishermanOld_Blue", "ZmbM_FishermanOld_Green", "ZmbM_FishermanOld_Grey", "ZmbM_FishermanOld_Red", "ZmbM_HunterOld_Autumn", "ZmbM_HunterOld_Spring", "ZmbM_HunterOld_Summer", "ZmbM_HunterOld_Winter", "ZmbM_HermitSkinny_Beige", "ZmbM_HermitSkinny_Black", "ZmbM_HermitSkinny_Green", "ZmbM_HermitSkinny_Red", "ZmbM_FarmerFat_Beige", "ZmbM_FarmerFat_Blue", "ZmbM_FarmerFat_Brown", "ZmbM_FarmerFat_Green", "ZmbM_FishermanOld_Blue", "ZmbM_FishermanOld_Green", "ZmbM_FishermanOld_Grey", "ZmbM_FishermanOld_Red", "ZmbM_HunterOld_Autumn", "ZmbM_HunterOld_Spring", "ZmbM_HunterOld_Summer", "ZmbM_HunterOld_Winter", "ZmbM_VillagerOld_Blue", "ZmbM_VillagerOld_Green", "ZmbM_HikerSkinny_Green", "ZmbM_HikerSkinny_Yellow", "ZmbF_HikerSkinny_Blue", "ZmbF_HikerSkinny_Grey", "ZmbF_HikerSkinny_Green", "ZmbF_HikerSkinny_Red", "ZmbF_SurvivorNormal_Blue", "ZmbF_SurvivorNormal_Orange", "ZmbF_SurvivorNormal_Red", "ZmbF_SurvivorNormal_White", "ZmbM_SurvivorDean_Black", "ZmbM_SurvivorDean_Blue", "ZmbM_SurvivorDean_Grey", "ZmbF_CitizenANormal_Brown", "ZmbF_CitizenANormal_Blue", "ZmbM_CitizenBFat_Red", "ZmbM_CitizenBFat_Green", "ZmbF_JournalistNormal_Blue", "ZmbF_JournalistNormal_Green", "ZmbF_JournalistNormal_Red", "ZmbF_JournalistNormal_White", "ZmbF_SkaterYoung_Brown", "ZmbF_SkaterYoung_Violet", "ZmbM_JoggerSkinny_Blue", "ZmbM_JoggerSkinny_Green", "ZmbM_JoggerSkinny_Red", "ZmbM_MotobikerFat_Beige", "ZmbM_MotobikerFat_Black", "ZmbM_CommercialPilotOld_Olive", "ZmbM_CommercialPilotOld_Brown", "ZmbM_CommercialPilotOld_Grey", "ZmbM_HikerSkinny_Green", "ZmbM_HikerSkinny_Yellow", "ZmbF_HikerSkinny_Blue", "ZmbF_HikerSkinny_Grey", "ZmbF_HikerSkinny_Green", "ZmbF_HikerSkinny_Red", "ZmbF_SurvivorNormal_Blue", "ZmbF_SurvivorNormal_Orange", "ZmbF_SurvivorNormal_Red", "ZmbF_SurvivorNormal_White", "ZmbM_SurvivorDean_Black", "ZmbM_SurvivorDean_Blue", "ZmbM_SurvivorDean_Grey"};
	typesZombies[] = {"ZmbM_HermitSkinny_Beige", "ZmbM_HermitSkinny_Black", "ZmbM_HermitSkinny_Green", "ZmbM_HermitSkinny_Red", "ZmbM_FarmerFat_Beige", "ZmbM_FarmerFat_Blue", "ZmbM_FarmerFat_Brown", "ZmbM_FarmerFat_Green", "ZmbM_FishermanOld_Blue", "ZmbM_FishermanOld_Green", "ZmbM_FishermanOld_Grey", "ZmbM_FishermanOld_Red", "ZmbM_HunterOld_Autumn", "ZmbM_HunterOld_Spring", "ZmbM_HunterOld_Summer", "ZmbM_HunterOld_Winter", "ZmbM_VillagerOld_Blue", "ZmbM_VillagerOld_Green", "ZmbM_HikerSkinny_Green", "ZmbM_HikerSkinny_Yellow", "ZmbF_HikerSkinny_Blue", "ZmbF_HikerSkinny_Grey", "ZmbF_HikerSkinny_Green", "ZmbF_HikerSkinny_Red", "ZmbF_SurvivorNormal_Blue", "ZmbF_SurvivorNormal_Orange", "ZmbF_SurvivorNormal_Red", "ZmbF_SurvivorNormal_White", "ZmbM_SurvivorDean_Black", "ZmbM_SurvivorDean_Blue", "ZmbM_SurvivorDean_Grey", "ZmbF_DoctorSkinny", "ZmbM_ParamedicNormal_Blue", "ZmbM_ParamedicNormal_Green", "ZmbM_ParamedicNormal_Red", "ZmbM_ParamedicNormal_Black", "ZmbF_ParamedicNormal_Blue", "ZmbF_ParamedicNormal_Green", "ZmbF_ParamedicNormal_Red", "ZmbF_CitizenANormal_Brown", "ZmbF_CitizenANormal_Blue", "ZmbM_CitizenBFat_Red", "ZmbM_CitizenBFat_Green", "ZmbF_JournalistNormal_Blue", "ZmbF_JournalistNormal_Green", "ZmbF_JournalistNormal_Red", "ZmbF_JournalistNormal_White", "ZmbF_SkaterYoung_Brown", "ZmbF_SkaterYoung_Violet", "ZmbM_JoggerSkinny_Blue", "ZmbM_JoggerSkinny_Green", "ZmbM_JoggerSkinny_Red", "ZmbM_MotobikerFat_Beige", "ZmbM_MotobikerFat_Black", "ZmbM_CommercialPilotOld_Olive", "ZmbM_CommercialPilotOld_Brown", "ZmbM_CommercialPilotOld_Grey", "ZmbM_HikerSkinny_Green", "ZmbM_HikerSkinny_Yellow", "ZmbF_HikerSkinny_Blue", "ZmbF_HikerSkinny_Grey", "ZmbF_HikerSkinny_Green", "ZmbF_HikerSkinny_Red", "ZmbF_SurvivorNormal_Blue", "ZmbF_SurvivorNormal_Orange", "ZmbF_SurvivorNormal_Red", "ZmbF_SurvivorNormal_White", "ZmbM_SurvivorDean_Black", "ZmbM_SurvivorDean_Blue", "ZmbM_SurvivorDean_Grey", "ZmbF_DoctorSkinny", "ZmbM_ParamedicNormal_Blue", "ZmbM_ParamedicNormal_Green", "ZmbM_ParamedicNormal_Red", "ZmbM_ParamedicNormal_Black", "ZmbF_ParamedicNormal_Blue", "ZmbF_ParamedicNormal_Green", "ZmbF_ParamedicNormal_Red", "ZmbM_PatrolNormal_PautRev", "ZmbM_PatrolNormal_Autumn", "ZmbM_PatrolNormal_Flat", "ZmbM_PatrolNormal_Summer", "", "ZmbM_SoldierNormal", "ZmbF_DoctorSkinny", "ZmbM_ParamedicNormal_Blue", "ZmbM_ParamedicNormal_Green", "ZmbM_ParamedicNormal_Red", "ZmbM_ParamedicNormal_Black", "ZmbF_ParamedicNormal_Blue", "ZmbF_ParamedicNormal_Green", "ZmbF_ParamedicNormal_Red"};
	typesZombieSoldiers[] = {"ZmbM_PatrolNormal_PautRev", "ZmbM_PatrolNormal_Autumn", "ZmbM_PatrolNormal_Flat", "ZmbM_PatrolNormal_Summer", "", "ZmbM_SoldierNormal", "ZmbF_DoctorSkinny", "ZmbM_ParamedicNormal_Blue", "ZmbM_ParamedicNormal_Green", "ZmbM_ParamedicNormal_Red", "ZmbM_ParamedicNormal_Black", "ZmbF_ParamedicNormal_Blue", "ZmbF_ParamedicNormal_Green", "ZmbF_ParamedicNormal_Red"};
	typesWildAnimals[] = {};
	typesDomesticAnimals[] = {};
	
	class ServerEvents {
		class StaticHeliCrash {
			locations[] = {{5738.43, 7605.03}, {6242.12, 8368.71}, {4015.1, 7971.57}, {2320.31, 10217.8}, {4506.84, 12748.3}, {7121.37, 9646.67}, {1667.61, 5293.34}, {1700.07, 2338.85}, {3563.69, 7537.1}, {4328.02, 8489.7}, {5211.07, 7763.55}, {7455.78, 11574.3}, {6119.31, 6631.11}, {5941.06, 6645.27}, {5016.43, 6257.92}, {4781.9, 6270.26}, {4455.93, 6181.72}, {4074.98, 6222.18}, {3622.3, 6415.96}, {3254.45, 6682.65}, {2848.06, 6815.64}, {2572.18, 6781.15}, {2298.23, 6513.4}, {2313.93, 6151.05}, {2461.02, 5794.41}, {2028.44, 5166.56}, {1596.27, 5234.57}, {3031.34, 10225.8}, {3475.28, 9765}, {2863.99, 9639.52}, {2067.34, 9272.2}, {1603.08, 9231.04}, {640.487, 9119.47}, {4996.78, 9156.46}, {5314.18, 9310.79}, {5124.45, 9496.65}, {4847.11, 9867.26}, {4603.77, 10245}, {4454.6, 10666.2}, {4696.35, 10736.4}, {4174.2, 10879.6}, {3904.06, 11112.5}, {3453.49, 10866.1}, {2627.26, 10443.4}, {2243.21, 10726.9}, {1853.38, 11309.6}, {1949.31, 11759.8}, {4832.67, 4767.95}, {3838.11, 4944.77}, {3142.34, 4426.19}, {1263.81, 4081.76}, {1371.08, 4505.26}, {4712.87, 5869.55}, {5405.45, 5638.77}, {3235.18, 8824.76}, {5928.07, 10975.5}, {4661.25, 11954.4}};
		};
		
		class StaticPoliceCar {
			locations[] = {{6783.75, 2619.72}, {3646.79, 2469.7}, {1695.53, 3849.77}, {4758.98, 6757.29}, {3812.93, 8849.1}, {5239.66, 8614.25}, {3134.67, 8007.43}, {2750.75, 9996.29}, {5947.67, 10302.4}, {6484.36, 6173.2}, {9639.2, 8815.32}, {6360.58, 7535.1}, {6243.42, 7655.5}, {6196.71, 7687.74}, {6157.43, 7680.73}, {6129.9, 7699.44}, {6120.91, 7721.54}, {6095.3, 7722.56}, {6091.54, 7753.6}, {6022.94, 7708.65}, {6002.27, 7662.24}, {5174.06, 8592.58}, {5236.36, 8611.45}, {5297.94, 8606.22}, {5331.19, 8649.63}, {5290.63, 8545.44}, {5387.59, 8565.65}, {5516.38, 8680.65}, {4059.16, 8946.76}, {4113.67, 8946.67}, {4143.66, 8890.66}, {4184.11, 8981.84}, {3858.05, 9020.7}, {3851.56, 9136.45}, {3774.75, 9014.41}, {3738.05, 8964.17}, {3665.49, 8975.95}, {3718.18, 8911.7}, {3751.36, 8902.45}, {3823.68, 8857.84}, {3787.37, 8820.83}, {3779.85, 8720.47}, {3693.39, 8558.63}, {3515.45, 8410.08}, {3124.56, 8072.77}, {3136.93, 8041.25}, {3078.1, 7941.85}, {3085.81, 7910.13}, {3081.9, 7833.38}, {3042.28, 7791.62}, {2994.8, 7787.73}, {6711.94, 3644.34}, {6736.09, 3650.63}, {6771.86, 3683.39}, {6835.37, 3731.44}, {6833.06, 3676.59}, {6793.58, 3645.99}, {6758.87, 3591.27}, {6811.09, 3521.66}, {6904.76, 3411.85}, {6962.9, 3145.2}, {6906.4, 3120.2}, {6690.39, 2774.31}, {6796.04, 2709.7}, {5286.9, 14917.3, 14.1}, {6639.9, 2541.77, 90.9}, {6764.71, 2307.63}, {11091.0, 12477.8, 4.3}, {11086.6, 12479.6, 216.8}, {13580.3, 12147.2, 34.0}, {6594.48, 2418.72}, {6356.65, 2494.96}, {6373.58, 2764.13}, {6111, 3292.63}, {6137.39, 3350.18}, {6211.12, 3308.81}, {6248.25, 3263.85}, {5883.57, 2708.5}, {5807, 2625.99}, {5806.72, 2518.8}, {5691.8, 2523.96}, {5674.53, 2620.41}, {5548.7, 2682.39}, {3649.45, 2279.44}, {3567.88, 2448.93}, {3662.06, 2495.99}, {3800.07, 2568.03}, {4401.32, 2499.83}, {4512.32, 2480.67}, {4532.19, 2599.05}, {1819.83, 3454.47}, {1700.95, 3814.97}, {2178.02, 4792.07}, {2573.17, 5039.59}, {2594.78, 5083.21}, {2639.53, 5103.15}, {2733.74, 5210.21}, {2732.99, 5277.99}, {2696.53, 5278.29}, {2735.88, 5334.17}, {2769.3, 5350.89}, {2723.6, 5404.19}, {2800.21, 5373.86}, {2799.99, 5348.84}, {2864.03, 5259.96}, {2723, 5188.46}, {2671.04, 5425.02}, {2684.48, 5589.48}, {2524.1, 6304.9}, {2522.05, 6458.27}, {6379, 7574, 16.7}, {9797, 8796, 335.9}, {9798, 8795, 4.2}, {7188, 7672, 14.8}, {7182, 7666, 169.9}, {5635, 2455, 230.2}, {6912, 2611, 82.2}, {10667, 8004, 122.4}, {12073, 13871, 180.5}, {13836, 13227, 216.4}, {13843, 13225, 52.6}, {13833, 13230, 24.5}, {13887, 13448, 117.5}, {14135, 13046, 214.1}, {13848, 13193, 193.2}, {13883, 13209, 283.3}, {11939, 12480, 112.7}, {11507, 14484, 204.6}, {11511, 14480, 56.9}, {11503, 14469, 8.6}, {13998, 13461, 56.3}, {11537, 14726, 316.5}, {11573, 14673, 329.7}, {1993, 10678, 287.0}, {12047, 3597, 168.6}, {12039, 3588, 116.6}, {12039, 3613, 350.8}, {11207, 6543, 188.4}, {2695, 5602, 196.8}, {5993, 10349, 319.3}, {2750, 5284, 25.1}, {3551, 2431, 213.1}, {3562, 2428, 79.8}, {7881, 12443, 182.1}, {12938, 10141, 195.2}, {12934, 10171, 20.7}, {12941, 10184, 196.4}, {5692, 2583, 72.7}, {6730.1, 2407.6, 184.3}, {6539.4, 2828.9, 335.7}, {9499.2, 8826.2, 279.1}, {7734.3, 12608.8, 177.9}, {9603.8, 13694.4, 181.5}, {10440.4, 2273.76}, {10401.7, 2193.35}, {10520.6, 2246.13}, {10552.6, 2237.69}, {10537.3, 2320.57}};
		};
		
		class VehicleTransitBus {
			locations[] = {{1846.47, 2223.62, 65.4}, {3205.78, 2246.23, 39.1}, {6041.66, 2230.9, 76.0}, {10497.9, 2324.75, 44.7}, {13386.2, 5402.47, 359.7}, {13277.9, 6990.26, 332.7}, {12980.3, 8361.86, 340.0}, {11304.4, 14431.2, 195.9}, {12043.8, 13664.3, 157.6}, {10900.7, 11625.7, 203.1}, {10675.1, 8028.07, 213.1}, {12385.6, 7488.54, 358.7}, {12108.3, 6286.66, 292.0}, {9545.5, 4821.58, 280.0}, {9142.03, 3897.43, 260.0}, {7564.14, 4591.83, 304.7}, {7055.72, 4480.58, 236.0}, {6498.79, 3552.83, 316.5}, {5362.38, 7104.41, 215.6}, {5334.38, 8588.87, 128.2}, {6052.94, 7804.11, 41.5}, {6909.63, 7781.27, 221.4}, {8457.41, 6764.05, 134.8}, {3719.07, 8910.06, 295.0}, {2625.93, 10115.7, 279.7}, {2051.75, 10641.9, 93.3}, {2803.96, 12266.8, 42.8}, {3376.65, 13105.4, 338.7}, {4931.34, 12979.7, 2.8}, {6625.59, 12701.2, 120.3}, {6579.31, 14447.4, 181.3}};
		};
		
		class VehicleCivilianSedan {
			locations[] = {{5142.36, 2359.58, 349.5}, {3411.09, 2349.84, 222.5}, {1118.55, 2384.68, 215.5}, {7386.1, 3393.5, 59.7}, {7792.06, 3555.57, 268.7}, {8734.01, 2381.58, 334.8}, {10995.8, 3015.4, 42.7}, {12052.1, 3501.51, 351.8}, {13255.8, 3984.92, 133.5}, {12635.7, 5723.12, 14.2}, {13386.5, 6620.11, 34.8}, {13098.2, 7364.36, 302.4}, {10291.3, 9636.94, 320.3}, {10454.4, 8845.13, 18.6}, {8792.31, 8998.41, 314.4}, {12900.7, 10081.2, 29.4}, {13931.3, 13223.6, 358.4}, {12575.6, 13819, 41.5}, {12037.6, 14311.7, 247.2}, {11641, 14654.7, 57.56}, {2136.75, 4758.98, 57.7}, {2670.94, 5078.99, 120.0}, {4076.39, 4779.37, 182.2}, {4244.57, 6768.69, 26.8}, {11062.5, 5345.77, 330.8}, {9990.63, 5772.46, 45.7}, {10645.6, 4514.22, 39.0}, {7437.02, 5151.9, 320.8}, {6563.62, 6253.26, 332.7}, {6655.94, 3638.16, 91.4}, {9424.04, 3246.45, 202.3}};
		};
		
		class VehicleOffroadHatchback {
			locations[] = {{6381.17, 7566.56, 116.8}, {3108.19, 7863.06, 119.1}, {2319.48, 9071.83, 251.8}, {2141.97, 9864.01, 297.5}, {185.913, 12523.6, 326.6}, {3989.6, 14876.6, 113.9}, {4450.84, 15219.2, 273.8}, {5194.26, 14964.1, 68.5}, {1735.77, 5115.14, 358.8}, {3591.55, 2197.73, 230.5}, {5722.07, 4884.05, 93.8}, {4224.12, 7703.81, 292.5}, {9663.11, 10440.3, 11.2}, {9986.69, 10355.1, 284.6}, {8575.58, 12721, 68.7}, {7897.58, 12798.8, 267.1}, {7115.99, 12702.6, 257.7}, {5587.68, 13165.4, 290.3}, {4565.68, 11615.4, 158.7}, {5306.92, 8552.14, 216.2}, {6524.99, 5602.27, 152.8}, {5841.06, 4881.98, 263.5}, {12649, 4398.33, 92.0}, {12330, 9676.54, 288.8}, {13460, 12126.8, 30.1}, {13896.7, 13788.4, 104.8}, {15131.5, 13823.9, 102.2}, {14539, 14207.3, 282.1}, {14045.2, 14261.2, 106.1}, {13616.1, 14048.5, 242.4}};
		};
		
		class StaticSmallBoat {
			locations[] = {{4851.13, 2042.33}, {3782.57, 2272.99}, {5610.84, 1939.25}, {9104.64, 1932.1}, {13618.1, 4540.43}, {13517.2, 5124.38}, {13426.6, 5547.14}, {13475.8, 5950.42}, {13590.8, 6058.42}, {13519.5, 6202.62}, {13491.2, 6518.33}, {13415.1, 6730.27}, {13367.5, 6937.63}, {13319.1, 7080.91}, {13236.4, 7348.09}, {13199.9, 7258.22}, {13166.2, 7547.67}, {13104.2, 7935.36}, {13093.8, 8109.4}, {13118.1, 8462.97}, {13040.8, 8442.58}, {12961.6, 8673.38}, {12933.1, 8845.86}, {12909.4, 9049.23}, {12916.9, 9201.98}, {12987, 9349.23}, {13023.5, 9513.7}, {13275.3, 10653.6}, {13402.2, 10815.7}, {13519.4, 11011.9}, {14058.5, 11411.6}, {11103.4, 2834.53}, {11121.2, 3053.12}, {11317.7, 3236.76}, {11732.9, 3324.04}, {11959.4, 3387.62}, {12349.9, 3444.87}, {13017.2, 3661.8}, {13113, 3752.2}, {13255.8, 3761.61}, {13438.3, 3906.51}, {13691.4, 3958.47}, {13572.8, 4239.17}};
		};
		
		class StaticChristmasTree {
			locations[] = {{7898.91, 12574.3}, {11618.6, 14663.1}, {6806.4, 2460.3}, {10499.2, 2346.98}, {12829.3, 10114.4}, {2745.44, 5282.13}, {3439.44, 13060.6}};
		};
		
		class StaticTrashCan {
			locations[] = {{4063.27, 11657.1}, {4063.34, 11655.8}, {2883.08, 9362.79}, {1975.47, 10698.2}, {1958.7, 10698.3}, {1919.31, 10686.1}, {1927.59, 10674.7}, {1972.72, 10694}, {1948.38, 10674.4}, {1948.78, 10687}, {1947, 10661.2}, {2188.39, 11096.2}, {2202, 11028.5}, {2266.19, 11051.4}, {2503.89, 9647.73}, {2753, 9877.21}, {2753.63, 9876.84}, {2666.56, 10038.3}, {2666.94, 10037.6}, {2694.63, 10071.3}, {2763.56, 10038.7}, {2682.92, 10005.5}, {2751, 10011}, {2768.53, 9977.23}, {2798.36, 9968.32}, {2799.44, 9926.48}, {4547.92, 9872.06}, {4722.2, 10218.5}, {2400.23, 11010.3}, {2365.28, 10971.5}, {2584.09, 11002.9}, {2548.81, 10988.7}, {2087.31, 11296.1}, {4618.14, 9654.96}, {4624.81, 9586.15}, {2861.59, 9780.87}, {10758.4, 10851.9}, {2648.41, 9570.41}, {11825.7, 9053.6}, {11915.6, 9117.07}, {11944.4, 9079.59}, {11978.5, 9099.44}, {11957.9, 9056.88}, {11786.3, 9006.89}, {11918.9, 8951.3}, {10611.5, 9965.15}, {10211.3, 9841.92}, {10342.6, 9836.06}, {12861.1, 10206}, {12890.4, 10219.9}, {12917.9, 10211.4}, {12899.5, 10207.2}, {12939.3, 10203.4}, {12917.2, 10211.7}, {12842.8, 10165.8}, {12891.5, 10153.5}, {12833.9, 10174.5}, {12830.1, 10165.9}, {12939.2, 10171.2}, {13158.6, 10365.7}, {9905.38, 10335.5}, {9647.67, 10451.4}, {9677.47, 10395.1}, {9648.83, 10411.6}, {9963.83, 10371.4}, {7107.02, 6940.13}, {12110.4, 8398.73}, {12303.8, 8440.66}, {11715.5, 9160.13}, {11690, 9181.22}, {11690.8, 9187.25}, {11689.5, 9178.87}, {11723.3, 9156.71}, {11924.8, 9215.54}, {11861.6, 9177.85}, {11718.5, 9144.12}, {11725.2, 9153.86}, {10557.9, 9887.39}, {10600.8, 9888.17}, {10554.6, 9766.45}, {2283.52, 11226.8}, {9611.94, 10428.7}, {12868.5, 10116}, {12870.5, 10138.7}, {12852.7, 10118.9}, {12904.1, 10144.5}, {12865.9, 10070.8}, {12857.3, 10070}, {5698.52, 2986.9}, {5699.81, 2987.56}, {6520.23, 2873.64}, {6521.16, 2873}, {6630.25, 2890.62}, {6446.39, 2900.59}, {6733.03, 2963.73}, {6421, 2869.86}, {7547.59, 5257.36}, {5816.8, 4039.35}, {12302.1, 9681.06}, {12272.2, 9668.79}, {12302.7, 9623.12}, {12302.5, 9622.36}, {12305.3, 9601.15}, {12308.4, 9580.24}, {12187.4, 9528.02}, {12161.3, 9540.13}, {12361.1, 9702.39}, {12363.8, 9601.25}, {12353.4, 9620.57}, {12352.2, 9620.58}, {12351.7, 9620.11}, {12357.6, 9541.8}, {5852.86, 3992.56}, {5843.47, 3969.8}, {5844.42, 3980.41}, {12775.1, 9619.35}, {12912.9, 9617.09}, {12745.5, 9759.42}, {12785, 9742.51}, {12295.5, 9761.56}, {12186, 9759.04}, {12241.5, 9706.08}, {12354.9, 9733.28}, {12416.5, 9723.6}, {12796.6, 10137.4}, {12791.7, 10127.5}, {12803.6, 10104.2}, {8443.48, 6693.43}, {8478.13, 6653.69}, {8534.06, 6637.89}, {8478.81, 6653.76}, {12240.4, 9187.21}, {12046.6, 9136.72}, {12086, 9115.58}, {12041.8, 9058.8}, {12068, 9097.67}, {12001, 9061.12}, {12304.4, 9018.51}, {12700, 9446.76}, {12683, 9410.28}, {12691.6, 9408.75}, {6370.8, 3240.91}, {6371.45, 3241.34}, {7530.75, 5188.65}, {7495.17, 5148.04}, {7472.59, 5142.56}, {7469.52, 5126.48}, {7467.59, 5142.12}, {7505.88, 5117.65}, {7536.19, 5108.67}, {7505.94, 5118.37}, {7561.27, 5116.41}, {7535.52, 5108.75}, {8026.41, 3294.3}, {7947.83, 3240.63}, {7966.67, 3265.87}, {8409.02, 4927.97}, {8439.94, 4949.87}, {7467.73, 4732.13}, {7497.27, 4733.36}, {6554.52, 6087.98}, {6558.23, 6056.74}, {6573.45, 6040.37}, {5826.34, 4971.28}, {5862.41, 4931.8}, {5848, 4877.6}, {5908.19, 4898.55}, {5843.16, 4829}, {5842.5, 4829.74}, {5894.5, 4824.98}, {5861.78, 4847.87}, {5909.56, 4841.57}, {5861.06, 4847.22}, {5851.13, 4790.92}, {5827.34, 4708.29}, {5859.17, 4717.68}, {5842.2, 4672.92}, {5838, 4692.79}, {5875.7, 4667.6}, {5878.03, 4651.91}, {5845.31, 3934.04}, {5878.5, 4638.59}, {5877, 4618.04}, {5876.63, 4596.56}, {8315.28, 3348.63}, {8072.19, 3296.87}, {8124.2, 3209.02}, {8140.97, 3207.63}, {8135.08, 3187.42}, {8126.89, 3157.93}, {10928.3, 2680.68}, {10926.9, 2682.8}, {6994.22, 2809.23}, {6997.2, 2782.23}, {6998.48, 2782.15}, {6792.81, 3127.87}, {6819.13, 3135.41}, {6818.73, 3136.69}, {6835.59, 3115.64}, {6866.14, 3119.86}, {6861.09, 3135.05}, {6982.89, 3191.89}, {5716.39, 2545.33}, {5711.59, 2508.96}, {7827.86, 3528.48}, {7822.61, 3547.69}, {7821.91, 3546.64}, {7671.08, 3213.26}, {7672.28, 3213.02}, {8042.86, 2915.89}, {8042.7, 2915.14}, {12061, 11977.8}, {12522.6, 10447.2}, {12841.6, 9983.67}, {12857.6, 9985.09}, {12983.8, 10006.9}, {12475.8, 8248.1}, {12967.4, 8287.91}, {12976.9, 8275.3}, {12986.7, 8190.95}, {12981, 8219.24}, {12979.5, 8218.91}, {12978.7, 8218.7}, {13080, 8204.03}, {13081.1, 8203.85}, {12723.1, 8090.83}, {10526.6, 9654.1}, {10557.6, 9670.15}, {12992.1, 10229.8}, {12142, 9754.89}, {12745.5, 9766.42}, {12736.7, 9796.3}, {12738.2, 9794.71}, {11931.3, 8853.35}, {12403.5, 9554.4}, {12465.3, 9581.96}, {12452.5, 9517.44}, {12496, 9583.18}, {12505.8, 9547.45}, {12491.7, 9519.81}, {12623.9, 9514.45}, {12623.2, 9514.68}, {12139.4, 9460.95}, {12083.4, 9355.32}, {12641.5, 9448.77}, {7710.5, 3510.6}, {7737.75, 3509.85}, {7713.45, 3447.21}, {7702.09, 3474.61}, {12838.1, 8152.81}, {12953.4, 8139.88}, {12953.9, 8138.94}, {12887, 8061.37}, {12844.5, 8072.49}, {12907.8, 8069.21}, {12832.8, 8041.73}, {12875.5, 8030.94}, {12959.8, 8054.57}, {12920.5, 8035.16}, {12959.2, 8054.71}, {12974.3, 8025.29}, {6297.05, 2542.75}, {7030.86, 3147.04}, {10081.2, 1817.53}, {10080.5, 1817.5}, {10151.7, 1824.38}, {10151.7, 1825.08}, {10443.6, 1869.56}, {10442.7, 1869.62}, {10773.9, 2587.74}, {10774.9, 2587.54}, {10829, 2512.19}, {10830.1, 2495.05}, {10818, 2484.55}, {6116.67, 3284.16}, {6267.55, 3280.17}, {6268.41, 3280.12}, {6268.55, 3278.91}, {6156.64, 3174.5}, {6104.22, 3176.25}, {6104.22, 3175.07}, {6149.42, 3140.22}, {6148.39, 3140.44}, {11599.3, 12489.5}, {11592.6, 12470.2}, {11571.3, 12415.4}, {11572.1, 12415.1}, {11563, 12418.8}, {11599.5, 12417.5}, {11591.2, 12448.9}, {11548.1, 12393.1}, {11541.7, 12390.9}, {11569.4, 12388}, {11596.9, 12385.3}, {11302.2, 12283.7}, {11275, 12250.7}, {11260, 12244.4}, {11274.3, 12251}, {11118, 12220.2}, {11148.8, 12212.8}, {11185.3, 12207.9}, {11185.6, 12207.2}, {11233.1, 12133.5}, {9728.45, 13939.4}, {9755.09, 13891.7}, {9752.11, 13893.3}, {9738.39, 13884.5}, {9636.97, 13823.6}, {9636.17, 13822.9}, {9441.22, 13728.4}, {9441.38, 13727.4}, {9488.25, 13734.4}, {6584.94, 3684.33}, {6564.47, 3687.43}, {8680.8, 2453.37}, {8702.47, 2409.55}, {9517.11, 2000.47}, {9484.72, 1922.68}, {9397.59, 1887.24}, {9459.22, 1875.68}, {9706.97, 1986.05}, {9706, 1986.16}, {9950.88, 1975.83}, {9974.91, 1987.91}, {9998.89, 1980.88}, {10015.6, 1976.43}, {10016.4, 1976.4}, {9958.47, 1982.16}, {9998.11, 1980.71}, {9927.7, 1861.65}, {9928.45, 1861.72}, {9973.73, 1854.58}, {10026.6, 1884.75}, {9956.06, 1891.97}, {9958.89, 1891.72}, {10026.5, 1885.42}, {9932.89, 1836.33}, {10155.1, 2220.23}, {10162.2, 2193.4}, {10154.3, 2219.89}, {10120.1, 2194.87}, {10141.6, 2136.62}, {10175.2, 2163.85}, {10174.5, 2136.57}, {10150, 2097.63}, {10066.4, 2057.7}, {10061.2, 2063.3}, {10041.9, 2043.22}, {10232.5, 2110.45}, {10326.2, 2044.98}, {10342.8, 2062.39}, {10472.4, 2200.69}, {10473, 2200}, {10487.8, 2234.72}, {10450.2, 2187.46}, {10491.7, 2198.86}, {10471.9, 2201.34}, {10414.7, 2148.14}, {10409.9, 2177.87}, {10466.7, 2136.74}, {9248.81, 4979.44}, {9248.3, 4979.05}, {8740.47, 11661.8}, {13298.3, 12983.5}, {8098.56, 11629.9}, {8129.5, 11600.3}, {8218.31, 11596.5}, {8218.88, 11597.7}, {8225.38, 11620.4}, {8103.66, 11537.6}, {8131.67, 11490.3}, {8646.08, 11856.2}, {10450.8, 2338.18}, {10487.2, 2235.41}, {10569.7, 2302.2}, {10569.2, 2302.93}, {10581.5, 2320.93}, {10582.1, 2320.21}, {6547.05, 3649.87}, {6012.03, 3307.47}, {6097.02, 3325.18}, {6065.61, 3312.18}, {6090.17, 3315.17}, {5993.11, 3261.91}, {5997.06, 3264.37}, {6007.88, 3225.6}, {5990.89, 3224.75}, {6049.47, 3241.18}, {6061.66, 3271.03}, {6019, 3190.09}, {5999.97, 3172.21}, {6054.63, 3210.91}, {6060, 3198.08}, {6054.39, 3211.57}, {6013.91, 3166.34}, {9279.09, 2036.72}, {9317.2, 2024.48}, {9342.7, 2024.01}, {4874.58, 2843.16}, {4875.59, 2807.04}, {4907.25, 2820.74}, {3029.06, 2552.91}, {3553.8, 2563.9}, {3641.08, 2456.94}, {3673.77, 2496.92}, {3526.47, 2448.4}, {3565.45, 2435.43}, {3566.28, 2435.67}, {3576.27, 2439.44}, {3663.95, 2427.47}, {3669.13, 2449.03}, {6874.56, 3488.41}, {6871.2, 3488.77}, {6876.02, 3488.56}, {5925.59, 10131.5}, {6333.5, 2637.3}, {6292, 2658.47}, {6291.28, 2658.52}, {6147.8, 10732.5}, {6033.69, 10440.9}, {5984.94, 10365.6}, {5994.84, 10392.2}, {6016.88, 10381.9}, {5932.53, 10329.9}, {5936.95, 10293.9}, {5992.05, 10328.6}, {5942.45, 10347.8}, {5943, 10348.6}, {6032.78, 10334.4}, {5957.66, 10294.9}, {5961.73, 10277.8}, {5894.06, 10189.5}, {5880.42, 10188.2}, {6205.14, 10377.7}, {10565.2, 2144.56}, {10600.4, 2133.37}, {10567.2, 2130.69}, {10611.2, 2165.69}, {10636.8, 2168.42}, {10427.2, 2088.86}, {10514.2, 2118.64}, {10474.5, 2103.2}, {10504.1, 2114.67}, {10407.2, 2069.35}, {10458.8, 2050.75}, {10486.9, 2067.23}, {10449.7, 2064.86}, {10464.9, 2030.54}, {10493.9, 2056.36}, {10450.4, 2065.09}, {10588.4, 2116.86}, {10563.5, 2086.82}, {10591.6, 2090.19}, {10538, 2112.15}, {10529, 2124.71}, {10568.3, 2069.83}, {10320.2, 2014.37}, {10062.9, 1890.38}, {10101.3, 1883.42}, {10100.5, 1883.35}, {10062.2, 1884.57}, {10102.1, 1883.41}, {10351.9, 2479.46}, {10386.6, 2474.66}, {10454.6, 2462.76}, {10215.7, 2422.44}, {10290.8, 2427.24}, {4394.8, 5661.45}, {4934.47, 5597.43}, {4877.44, 5636.73}, {4955.09, 5585.43}, {10364.7, 1730.83}, {10365.6, 1731.18}, {8578.22, 11911.7}, {10646, 2323.65}, {10592.5, 2283.68}, {9841.73, 2055.33}, {9841.72, 2054.57}, {10007.7, 2103.92}, {9987.19, 2047.38}, {9987.94, 2047.57}, {4470.36, 2399.25}, {4498.91, 2391.34}, {4554.86, 2375.76}, {4828.88, 2527.81}, {2821.94, 2723.17}, {4798.88, 6805.8}, {4453.75, 6430.17}, {4453.91, 6429.6}, {4446.84, 6448.53}, {4508.09, 6457.73}, {4417.66, 6390.77}, {10263.1, 2290.66}, {10435.7, 2412.31}, {10500.2, 2403.76}, {10478.7, 2418.72}, {10454.3, 2412.71}, {10451, 2437.54}, {10512.8, 2387.41}, {10624.4, 2400.73}, {10639.7, 2443.2}, {10680.9, 2416.28}, {10653.5, 2407.18}, {10608.8, 2430.17}, {10609.5, 2430.48}, {10681.8, 2416.66}, {10528, 2381.42}, {10527.8, 2380.8}, {10534.2, 2385.96}, {10563, 2373}, {10587.9, 2351.1}, {10533.4, 2385.4}, {5188.36, 2102.39}, {4726.02, 6386.76}, {6510.25, 2281.35}, {13451.3, 3301.11}, {13432.5, 3273.19}, {13433.1, 3273.53}, {13506.4, 3315.08}, {1727.69, 3792.14}, {6390.86, 2231.9}, {6107.05, 10969.8}, {9148.25, 3891.51}, {4705.44, 6812.78}, {4696.17, 6829.55}, {4723.28, 6812.79}, {4753.17, 6833.61}, {3627.33, 2224.56}, {4405.23, 2508.61}, {4442.66, 2488.06}, {4516.23, 2571.92}, {4516.97, 2592.16}, {4694.52, 2601.78}, {4511.13, 2551.45}, {4440.52, 2363.03}, {6796.39, 14485.3}, {7079.61, 14510}, {11140.2, 12267.9}, {11139.6, 12267.3}, {11117.3, 12259.3}, {11114.3, 12286.8}, {10905.5, 12355.3}, {10870.7, 12383.4}, {11029.4, 12503.8}, {11096.6, 12455.6}, {11027.4, 12410}, {11015.2, 12447.9}, {11014.5, 12448}, {11076.5, 12364.8}, {10797.5, 12465.5}, {10784.5, 12472.9}, {10997.3, 12506.7}, {10762.4, 12446.8}, {10757.4, 12441.2}, {10698.8, 12440.2}, {10819.4, 12428.6}, {10775.7, 12420.1}, {10783.9, 12408.4}, {10791.3, 12449.5}, {10896, 12402}, {10981.5, 12420.7}, {10946.2, 12431}, {10962.1, 12448.3}, {1682.3, 3905.12}, {1661.09, 3898.23}, {1636.7, 3912.61}, {1706.13, 3892.15}, {1666.86, 3831.97}, {1626.83, 3838.47}, {1675.17, 3861.55}, {1654.66, 3855.98}, {1649.58, 3873.18}, {1653.92, 3855.73}, {1632.75, 3810.32}, {1665.16, 3785.22}, {1679.05, 3822.45}, {1704.63, 3867.91}, {1727.69, 3792.14}, {1694.94, 3784.15}, {1855.66, 3881.62}, {6583.83, 14499.9}, {9702.47, 6525.16}, {9714.77, 6538.4}, {9705.11, 6551.93}, {9600.72, 8857.4}, {9571.16, 8856.27}, {9564.41, 8873.24}, {9604.89, 8849.47}, {9538.67, 8880.81}, {9860.53, 8832.06}, {9860.97, 8832.57}, {8546.3, 12781.1}, {8450.95, 12715.7}, {8514.42, 12673.1}, {8513.5, 12672.6}, {8569.94, 12705.6}, {13342.8, 12894.6}, {13303.5, 12943.4}, {13354.6, 12844.5}, {13386.2, 12828.1}, {12478.3, 12518.5}, {12478.6, 12520.4}, {12477.9, 12517.9}, {11618, 14767.6}, {11603, 14766.7}, {11762.5, 12170.3}, {11924.3, 12046.1}, {11945, 12021.7}, {1698.86, 4000.08}, {1716.8, 4006.51}, {1660.58, 3749.63}, {1675.8, 3759.84}, {1665.77, 3732.74}, {1684.55, 3670.76}, {1690.38, 3683.98}, {1738.53, 3672.69}, {1720.5, 3673.49}, {13191.5, 13148.2}, {6216.56, 7647.99}, {6217.34, 7649.74}, {6299.55, 7579.7}, {6289.52, 7566.77}, {6610.64, 14484.1}, {6730.95, 14375.1}, {13237.9, 13119.7}, {13294.3, 13016.2}, {3114.61, 4058.77}, {3187.64, 4003.8}, {3237.75, 4015.36}, {3250.34, 4009.25}, {3310.5, 3930.04}, {3322.27, 3933.78}, {3322.66, 3884.7}, {3348.77, 3959.82}, {3335.83, 3965.82}, {3422.77, 3946.56}, {3409.34, 3965.89}, {3417.81, 3916.79}, {3471.28, 3809.72}, {2604.34, 3485.74}, {9273.8, 8812.66}, {1762.84, 2247.91}, {1847.94, 2238.78}, {1717.75, 2212.26}, {1884.95, 2227.24}, {1956.7, 2234.39}, {1935.67, 2195.64}, {2026.25, 2233.45}, {11350.7, 14695}, {11582.5, 14749.2}, {11555.1, 14731.2}, {11586.5, 14723.1}, {11613.9, 14745.7}, {11628.8, 14724.7}, {9449.39, 8801.91}, {9449.44, 8801.2}, {9462.97, 8811.03}, {9490.39, 8813.56}, {9501, 8813.95}, {9501.72, 8814.02}, {9531.27, 8822.27}, {9489.72, 8813.46}, {9498.19, 8830.13}, {9501.92, 8840.09}, {9517.84, 8852.65}, {9542.5, 8888.81}, {9629.5, 8794.44}, {9755.83, 8794.89}, {9787.02, 8777.89}, {9789.56, 8815.84}, {9583.89, 6618.18}, {9562.3, 6614.87}, {9568.03, 6569.15}, {9595, 6547.97}, {9668.06, 6546.98}, {9628.39, 6565.02}, {9642.09, 6532.87}, {11428.9, 14914.8}, {12974.3, 6285.89}, {12975.4, 6285.86}, {11152.9, 6568.45}, {11140.1, 6551.52}, {11236.5, 6583.44}, {11245.6, 6543.48}, {11500, 6579.43}, {12013.4, 7252.18}, {12012.6, 7251.96}, {12060.9, 7260.83}, {12182.4, 7263}, {12208.7, 7253.39}, {12098.2, 6310.5}, {12148.1, 6299.96}, {12074.5, 6318.75}, {12061, 6280.56}, {12214.9, 6272.38}, {12180, 6286.89}, {12315, 6251.44}, {12280.7, 6274.36}, {12244.7, 6292.03}, {12253.3, 6262.87}, {12340.1, 6258.06}, {12371.2, 6238.31}, {12973.3, 6285.91}, {9462.17, 14623}, {9480.53, 14648.4}, {9444.02, 14565.4}, {9442.94, 14547.5}, {9379.56, 14552.2}, {9359.47, 14623.7}, {9314.67, 14608.8}, {9289.33, 14590.2}, {9333.69, 14548.4}, {9310.48, 13834.6}, {9315.89, 13837.2}, {9362.67, 13719.9}, {11697.4, 14328.4}, {11746.2, 14339}, {11690.8, 14328}, {11723.5, 14328.3}, {11742.5, 14328.5}, {11588.4, 14305.5}, {9451.17, 14723.5}, {9431.72, 14718.4}, {9428.5, 14743}, {9414.11, 14660.3}, {9418.44, 14673.9}, {9446.59, 14607.4}, {9389.75, 14635}, {10663.8, 14346.1}, {11653.6, 14539.4}, {11657.9, 14466.6}, {11457.3, 14323.3}, {11479, 14325.6}, {11621, 14414.5}, {11605.3, 14426.5}, {7677.33, 13274.4}, {11684.4, 14306.4}, {9696.34, 13938.3}, {13306.7, 6110.73}, {13409.1, 6045.53}, {13410.2, 6045.28}, {13395.2, 5977.95}, {13394.3, 5977.96}, {7187.16, 7720.24}, {7100.56, 7653.76}, {7100.06, 7655.4}, {12790.1, 4437.75}, {12789.2, 4437.68}, {7887.92, 12413.4}, {7860.55, 12419.2}, {7884.63, 12424.7}, {10717.3, 5330.15}, {10717.1, 5329.36}, {11233.8, 5477.84}, {11325.5, 5478.77}, {11268.6, 5484.29}, {11273, 5501.36}, {11303.7, 5497.42}, {11320.8, 5504.07}, {11257.6, 5437.66}, {11204.6, 5380.56}, {11238, 5392.63}, {11247.7, 5371.35}, {11215.3, 5404.04}, {11204.5, 5379.9}, {11237.2, 5416.65}, {11222.7, 5361.37}, {11220.4, 5352.31}, {11376.1, 5541.47}, {11343.4, 5482.03}, {8111.09, 12457.3}, {8110.08, 12457.9}, {8110.61, 12448.3}, {7753.58, 12461.9}, {7932.92, 12534.1}, {7933.61, 12534.4}, {8163.67, 13120.9}, {8237.77, 13129.3}, {8238.5, 13130}, {8024.63, 12749.8}, {7810, 12581.6}, {7851.02, 12579.7}, {7851.95, 12579.6}, {7914.27, 12608.1}, {13344.3, 5466.78}, {8368.03, 13016.4}, {8214.16, 12860.3}, {8213.17, 12859.8}, {8215.08, 12860.7}, {8171.09, 12835.2}, {7149.05, 7733.65}, {12263, 10608.4}, {12262, 10607.7}, {8435.23, 12836.4}, {8674.95, 12844.3}, {8667.16, 12840}, {8558.31, 12804.9}, {8623.16, 12827.5}, {8651.22, 12825.2}, {8857.91, 12930.8}, {12898.1, 5657.62}, {12159.3, 13430.4}, {13335, 6237.96}, {13348.2, 6232.05}, {13427.5, 6224.9}, {13403.3, 6239.73}, {13427.7, 6225.93}, {5955.55, 7918.58}, {5997.95, 7861.7}, {6009.58, 7864.11}, {5987.19, 7870.11}, {11817.8, 13897}, {11963, 13909.5}, {5978.8, 7835.25}, {6044.86, 7730.66}, {6042.14, 7774.9}, {6045.31, 7731.69}, {6078.7, 7727.67}, {10342.6, 5486.01}, {10296.1, 5525.42}, {10335.5, 5511.7}, {10334.8, 5512.29}, {10296.6, 5525.92}, {7662.39, 12641.1}, {7661.81, 12582.3}, {7802.22, 12726}, {11515.7, 14329.4}, {11653.7, 14328.9}, {11643.2, 14328.9}, {11751.8, 14443.2}, {7471.52, 12656.8}, {7434.34, 12648.3}, {7435.34, 12648.1}, {7494.41, 13773.6}, {7460.33, 13742.9}, {7475.17, 13742.4}, {7473.83, 13741.9}, {11552.3, 14694.9}, {11594.9, 14682.8}, {11630.6, 14665.4}, {11605.1, 14666}, {11663.2, 14669.5}, {11608, 14692.1}, {11396.5, 14637.4}, {11540.6, 14603.1}, {11582.8, 14608.4}, {11529.9, 14600.9}, {11627.8, 14610.8}, {11656.4, 14563}, {12864.7, 4484.51}, {12831.4, 4437.18}, {12829.6, 4467.57}, {10981.7, 14439.1}, {10906.6, 14396.8}, {11001.1, 14350.7}, {11676.5, 14665.8}, {11693.5, 14618.1}, {11046.2, 14350.2}, {11022.9, 14347}, {11029.3, 14346.7}, {8164.22, 12328.6}, {8216.94, 12199.8}, {8264.67, 12207.7}, {8265.45, 12207}, {8157.16, 12772.9}, {8201.41, 12757.3}, {8136.05, 12703.5}, {8180.52, 12722.9}, {8341.59, 12739.7}, {6887.7, 9873.81}, {6900.11, 9880.14}, {12050.3, 3716.43}, {12058.9, 3691.53}, {12059.2, 3690.89}, {12079.5, 3646.1}, {12079.7, 3645.4}, {12033.6, 3554.03}, {12012.8, 3585.48}, {12049, 3568.04}, {12049.3, 3567.44}, {12085.3, 3580.82}, {12078.1, 3607.26}, {12164.8, 3561.54}, {12159.4, 13644}, {10117, 5487.04}, {10133.6, 5483.76}, {10104.7, 5475.31}, {10143.6, 5455.61}, {11897.6, 13865.5}, {11919.4, 13876.8}, {11940.2, 13846.9}, {6113.73, 7744.86}, {6162.88, 7713.8}, {6120.45, 7709.57}, {6117.34, 7699.11}, {12933.4, 6734.21}, {12977.8, 6731.6}, {12921, 14469.1}, {12955.6, 14466.2}, {12967.6, 14436.1}, {12981, 14440.6}, {3099.38, 8054.24}, {3108.05, 8013.74}, {3122.31, 8043.09}, {3056.88, 7951.7}, {3074.14, 7997.12}, {3119.67, 7949.93}, {3138.39, 7952.4}, {3215.11, 8124.03}, {3175.5, 8034.39}, {3171.09, 8027.28}, {3683.34, 8257.54}, {13296.4, 6274.69}, {13296.4, 6275.41}, {13396.1, 6375.76}, {13418.9, 6379.11}, {13332.9, 6336.27}, {13332.8, 6336.96}, {13407.1, 6341.38}, {13447, 6313.11}, {13432.9, 6318.56}, {13397.8, 6307.05}, {13449.3, 6349.06}, {13524.8, 6334.62}, {13524.4, 6335.3}, {13334.1, 6273.18}, {13350.4, 6295.01}, {13378.8, 6291.91}, {13303.1, 6292.14}, {13422.3, 6277.73}, {13417.8, 6259.94}, {13437, 6277.16}, {13440, 6256.15}, {13418.6, 6259.87}, {13204.8, 7042.42}, {13201.9, 7007.19}, {13205.5, 6905.39}, {13205.8, 6903.98}, {12935.6, 6747.45}, {12925.9, 6782.57}, {12958.3, 6757.51}, {12623.3, 4384.03}, {11894.5, 3479.07}, {11990.3, 3471.55}, {11931.6, 3485}, {11951.5, 3488.03}, {12039.9, 3530.06}, {12042.3, 3508.3}, {12025.7, 3515.68}, {12064, 3514.39}, {12026.3, 3515.76}, {12119.5, 3514.69}, {12147.8, 3527.36}, {12101.3, 3506.12}, {12150, 3473.46}, {12200.8, 3519.18}, {12180.3, 3550.73}, {12217.2, 3478.16}, {12168.1, 3482.02}, {12212, 3472.34}, {12299, 10949.8}, {12304.7, 10968.7}, {12269, 10882.4}, {12268.2, 10882.2}, {12259.2, 10894.2}, {12309.8, 10829.5}, {12335.9, 10913.9}, {12328, 10873.5}, {14106.9, 13274.6}, {14073.4, 13267.3}, {12106.9, 13648.3}, {2862.36, 8149.78}, {2862.13, 8151.63}, {1190.3, 12061.2}, {1191.38, 12004.9}, {1225.19, 12060.9}, {1367.52, 12093.7}, {12149.9, 13720.8}, {12093.1, 13744.5}, {12098.4, 13762.2}, {12090.6, 13767.3}, {12147.3, 13664.7}, {12156.4, 13686.7}, {12167.7, 13707.6}, {12322.6, 13865}, {12002.1, 13857.2}, {12048, 13862.5}, {12014.7, 13864.1}, {12120.8, 13780.6}, {13753.9, 13349.3}, {13777, 13352.5}, {13871.7, 13345}, {13872.2, 13345.7}, {13796.3, 13362.2}, {13884.6, 13333.7}, {13768.7, 13279.4}, {13778.3, 13253}, {13850, 13301.3}, {13822.8, 13326.8}, {13876.3, 13299.5}, {13842.2, 13257.9}, {13814.5, 13236.1}, {13913.9, 13186.4}, {13915.8, 13206.2}, {13922.4, 13200.6}, {13886.1, 13134.8}, {13898.2, 13111.5}, {14114.6, 13088.4}, {14111.1, 13071.4}, {14127.3, 13080.1}, {12967, 15023.2}, {13019.1, 14987.5}, {12362.4, 14879.7}, {12452.9, 14854.1}, {12549.5, 14782.1}, {12560.9, 14809.2}, {12645.4, 14627.9}, {12755, 14613.3}, {12916.7, 14622.7}, {12718, 14598.9}, {12834.7, 14581.7}, {12919.6, 14607.1}, {13579.5, 14119.8}, {13565.3, 14091.5}, {13569, 14053.7}, {13558, 13987.2}, {13558.5, 13988}, {13574.1, 13979.1}, {13573.2, 13979.6}, {2407.88, 6369.88}, {2481.8, 6402.66}, {2502.27, 6301.21}, {2187.58, 6248.06}, {2554.48, 6315.45}, {2555.98, 6315.63}, {2561.31, 6348.86}, {2539.8, 6287.49}, {3861.42, 8824.76}, {3890.53, 8809.43}, {3437.23, 14808.6}, {3794.83, 9052.8}, {3999.7, 9182.07}, {3845.22, 9064.91}, {3663.97, 9001.56}, {3766.78, 9006.84}, {3765.75, 9005.65}, {3707.5, 8953}, {3732.92, 8983.97}, {3770.05, 8895.83}, {3788.53, 8888.35}, {3807.88, 8848.06}, {3797.27, 8852.69}, {3870.7, 9018.96}, {3833.77, 8963.96}, {3848.17, 8946.92}, {3884.78, 8912.86}, {3820.17, 8827.43}, {3853.52, 8853.77}, {3871.75, 8845.19}, {3835.97, 8865.73}, {2509.89, 6425.14}, {3144.92, 8069.3}, {2021.05, 7263.65}, {3078.42, 7912.24}, {3020, 7878.11}, {3080.52, 7849.78}, {3103.11, 7869.92}, {2983.64, 7821.7}, {2961.13, 7767.56}, {2993.16, 7738.41}, {2948.89, 7700.31}, {2923.83, 7718.48}, {2958.44, 7688.53}, {2982.03, 7718.84}, {4554.75, 8333.84}, {4554.66, 8333.11}, {4481.41, 8303.43}, {4579.19, 8237.93}, {2604.06, 5693.9}, {2681.94, 5547.18}, {2279.98, 5381.86}, {2663.59, 5490.4}, {2675.52, 5513.82}, {2993.91, 5581.38}, {2970.52, 5553.07}, {2908.11, 5487.6}, {2856.91, 5426.93}, {2849.09, 5469.27}, {2682.11, 5443.2}, {2657.28, 5419.98}, {2584.94, 5355.13}, {2720.98, 5375.6}, {2731.03, 5411.57}, {2830.48, 5416.29}, {2780.81, 5397.34}, {2965.16, 5453.44}, {2950.7, 5453.41}, {2937.11, 5424.76}, {1797.31, 5084.3}, {2661.17, 5225.86}, {2650.44, 5207.57}, {2723.84, 5292.32}, {2732.66, 5287.62}, {2712.73, 5275.41}, {2774.63, 5294.43}, {2721.77, 5208.02}, {2738.38, 5236.26}, {2743.95, 5204.59}, {2751.77, 5242.86}, {2624.98, 5117.94}, {2708.48, 5151.97}, {2703.33, 5173.53}, {2745.41, 5165.75}, {2682.66, 5193.47}, {2746.75, 5165.1}, {2672.38, 5099.72}, {2736.06, 5127.4}, {2501.05, 5083.93}, {2500.2, 5083.75}, {2546.14, 5039.65}, {2599.47, 5045.04}, {2643.36, 5078.44}, {2574.66, 5026.95}, {2739.23, 5067.99}, {2707.98, 5056.61}, {2708.41, 5077.91}, {2727.73, 5055.29}, {2753.34, 5065.96}, {2584.23, 4970.86}, {2903.53, 5265.48}, {2860.25, 5269.77}, {2885.02, 5273.84}, {3174.08, 5203.82}, {3173.69, 5202.85}, {3306.06, 4887.07}, {3382.28, 4936.64}, {3359.97, 4963.62}, {3325.09, 4946.45}, {3364.64, 4911.99}, {3396.5, 4920.62}, {3422.75, 4904.53}, {4665.94, 4698.14}, {4334.13, 4643.68}, {4340.98, 4647.1}, {4414.44, 4601.17}, {4388.56, 4599.85}, {4413.81, 4601.43}, {4390.02, 4635.43}, {4394.33, 4570.11}, {4497.77, 4613.17}, {4353.41, 4678.21}, {4397.2, 4688.46}, {4396.55, 4688.4}, {5435.14, 3807.94}, {5800.05, 13570.1}, {5436.08, 12700.6}, {5415.25, 12690.6}, {5414.28, 12646.7}, {3530.14, 14188.5}, {3285.33, 13190}, {3725.14, 13187.3}, {3755.28, 13194.8}, {3260.92, 13173.4}, {3258, 13136.8}, {3305.63, 12978.9}, {2287.47, 12199.8}, {1642.47, 12079.8}, {1560.52, 12039.6}, {1575.33, 12002.9}, {1617.52, 12007.3}, {1517.8, 12028.7}, {1267.72, 12011}, {10080.3, 13286.9}, {3972.66, 12554.2}, {2601.59, 12353.9}, {2653.53, 12373.8}, {2730.23, 12365.7}, {2697.03, 12370.6}, {6775.45, 12574.6}, {6448.45, 12719.6}, {4308.55, 13163}, {5390.61, 8547.79}, {2903.16, 12419}, {2655.88, 12334.2}, {2689.47, 12322.6}, {2737.05, 12334}, {179.547, 12525.9}, {14057.9, 15052.4}, {14105.8, 15046.7}, {2999.7, 12575.7}, {2961.39, 12532.4}, {2996.61, 12504.2}, {5195.39, 12354.2}, {3418.78, 12642.9}, {6130.5, 12693.4}, {6166.53, 12692.4}, {6188.09, 12693.8}, {6223.67, 12682.2}, {6290.3, 12709}, {6327, 12711.8}, {3876.42, 12835.3}, {2800.77, 1208.61}, {2799.88, 1209.19}, {14026.2, 15066.5}, {14004.9, 15073}, {14337.1, 14812.5}, {4944.7, 15104}, {4936.88, 15107.9}, {4935.03, 15127.1}, {5005.67, 15160.5}, {4981.16, 15149.1}, {4973.91, 15130.6}, {4964.11, 15123.3}, {6318.88, 2316.59}};
		};
		
		class StaticFridgeTest {
			locations[] = {{4887.45, 2855.82, 257.482}, {4812.3, 6798.16, 327.098}, {5010.28, 6816.06, 203.528}, {3300.64, 3822.35, 240.871}, {9898.38, 8734.79, 241.005}, {11447.3, 7570.85, 325.94}, {11448, 7447.1, 106.006}, {9246.36, 13612, 92.932}, {6017.95, 7819.67, 69.9724}, {7648.0, 12665.0, 288.604}, {7606.88, 12628.8, 67.1333}, {6911.55, 7801.91, 138.833}, {6139.03, 7737.6, 225.997}, {12621.2, 13833.9, 128.924}, {12533.3, 13792.3, 9.39176}, {12588, 13816.6, 288.246}, {2741.14, 12162.1, 113.329}, {3534.27, 14188.3, 207.15}, {1389.09, 11995.0, 72.6881}};
		};
		
		class VehicleV3SChassis {
			locations[] = {{13396.9, 6103.37, 3.3}, {11965.6, 12528.4, 24.6}, {11677.9, 12703.6, 32.9}, {8116.94, 9310.08, 338.1}, {5848.41, 10150.3, 197.9}, {5632.04, 9127.33, 239.0}, {5970.55, 7885.68, 320.8}, {4678.07, 10439.7, 343.7}, {2041.28, 12191.7, 231.4}, {4558.57, 8271.92, 104.8}, {3701.6, 5991.28, 52.0}, {2502.94, 5072.03, 60.9}, {1079.38, 7130.9, 349.9}, {1199.46, 7220.25, 176.3}, {2172.62, 3282.22, 277.0}, {4739.39, 2554.72, 116.8}, {7745.31, 14833.3, 177.8}, {8177.66, 12767, 91.7}, {9376.06, 13398.8, 63.6}, {9169.04, 11001.6, 270.6}, {6860.72, 11433.7, 343.3}, {6344.71, 7748.96, 246.1}};
		};
		
		class VehicleV3SCargo {
			locations[] = {{3184.61, 15243.7, 239.5}, {7188.63, 7535.78, 116.25}, {8071.46, 9406.59, 18.14}, {9668.16, 9848.97, 196.3}, {11555.1, 11315.2, 66.2662}, {3226.75, 13730.4, 51}, {5684.44, 13565.9}, {6174.08, 10385.9, 289.7}, {1642.67, 12065.4, 347.65}, {6063.95, 4859.74, 301.95}, {2822.03, 9959.07, 132.2}, {9437.34, 11483.7, 58.4}, {9161.35, 11005.2, 268.4}, {6983.09, 11362.5, 196.5}, {7851.26, 11556.7, 322.23}, {9581.45, 6585.56, 121.4}, {8558.4, 11665.8, 350.25}, {9437.34, 11483.7, 58.4}, {8023.82, 7051.35, 224.9}, {6537.19, 6101.61, 77.6}, {10252.2, 12032.9, 207.46}, {5256.4, 11116.7}};
		};
	};
	
	class WildAnimalsSpawns {
		serverWildAnimalSpawn = 300;
		
		class WildAnimalBase {
			scope = protected;
			position[] = {7500, 7500};
			radius = 300;
			minSpawn = 1;
			maxSpawn = 4;
			probability = 1;
			types[] = {};
		};
		
		class DomesticAnimalBase {
			scope = protected;
			position[] = {7500, 7500};
			radius = 50;
			minSpawn = 4;
			maxSpawn = 6;
			probability = 1;
			types[] = {};
		};
		
		class Dom_Nadezhdino : DomesticAnimalBase {
			scope = public;
			position[] = {5880.22, 4601.91};
			radius = 30;
			minSpawn = 0;
			maxSpawn = 4;
			locations[] = {{5869.32, 4586.62}, {5877.41, 4581.89}, {5875.22, 4584.77}, {5880.77, 4590.66}, {5884.07, 4598.41}, {5879.19, 4601.7}, {5888.59, 4605.06}, {5890.24, 4619.59}, {5880.77, 4621.51}, {5890.86, 4610.47}, {5883.45, 4603}};
		};
		
		class Dom_Vyshnoye : DomesticAnimalBase {
			scope = public;
			position[] = {6551.77, 6114.61};
			radius = 30;
			minSpawn = 0;
			maxSpawn = 4;
			locations[] = {{6543.88, 6125.35}, {6542.02, 6123.19}, {6552.39, 6126.05}, {6561.2, 6119.17}, {6552.39, 6118.09}, {6567.24, 6108.12}, {6564.3, 6120.56}, {6554.24, 6118.79}, {6542.56, 6124.12}, {6557.34, 6129.99}, {6556.79, 6122.03}, {6564.99, 6123.96}, {6551.46, 6128.37}};
		};
		
		class Dom_Kozlovka : DomesticAnimalBase {
			scope = public;
			position[] = {4680.78, 4700.72};
			radius = 30;
			minSpawn = 0;
			maxSpawn = 4;
			locations[] = {{4679.88, 4702.17}, {4681.99, 4703.8}, {4685.43, 4700.12}, {4682.18, 4696.1}, {4680.6, 4690.94}, {4686.96, 4692.8}, {4684.62, 4709.63}, {4691.37, 4710.11}, {4672.41, 4706.67}, {4674.71, 4700.98}, {4682.8, 4702.7}, {4688.73, 4698.44}, {4680.26, 4694.43}, {4667.82, 4703.46}};
		};
		
		class Dom_Msta : DomesticAnimalBase {
			scope = public;
			position[] = {11193.9, 5353.98};
			radius = 30;
			minSpawn = 0;
			maxSpawn = 4;
			locations[] = {{11185.5, 5362.66}, {11195.3, 5358.35}, {11185.5, 5353.01}, {11198.5, 5347.51}, {11199.5, 5356.89}, {11200.2, 5358.24}, {11188.2, 5352.52}, {11184.3, 5367.62}, {11196.3, 5360.23}, {11201.9, 5355.65}, {11184.2, 5354.41}, {11192.4, 5358.45}, {11200.8, 5354.52}, {11185.9, 5353.92}};
		};
		
		class Cows_Pustoshka : DomesticAnimalBase {
			scope = public;
			position[] = {2930.24, 7930.42};
			radius = 120;
			minSpawn = 6;
			maxSpawn = 10;
			types[] = {};
			locations[] = {{2874.29, 7912.77}, {2941.65, 7953.96}, {2899.36, 7954.78}, {2863.25, 7913.14}, {2918.46, 7888.13}, {2948.5, 7936}, {2916.62, 7968.67}, {2873.55, 7978.97}, {2911.1, 7946.24}, {2878.71, 7902.1}, {2865.82, 7874.52}, {2947.17, 7914.98}, {2942.75, 7969.77}, {2903.37, 7968.3}, {2886.8, 7937.04}, {2954.9, 8031.56}, {2984.35, 7998.46}, {2928.4, 7984.48}, {2882.39, 7995.52}, {2882.22, 7950.92}, {2904.47, 7902.47}, {2885.7, 7921.96}, {2902.26, 7925.27}};
		};
		
		class Cows_Polana : DomesticAnimalBase {
			scope = public;
			position[] = {10083.6, 7155.1};
			radius = 120;
			minSpawn = 4;
			maxSpawn = 6;
			types[] = {};
			locations[] = {{10059.5, 7122.41}, {10136.8, 7123.85}, {10111.7, 7176.22}, {10030.6, 7177.66}, {10227.5, 7144.68}, {10147.6, 7110.26}, {9990.63, 7108.81}, {10073.1, 7102.45}, {10028, 7136.58}, {10079.2, 7194.44}, {10192.1, 7112.15}, {10113.6, 7142.98}, {10192.1, 7176.48}, {10165.3, 7163.08}, {10006.3, 7159.73}};
		};
		
		class Cows_Gorka : DomesticAnimalBase {
			scope = public;
			position[] = {8678.26, 9185.44};
			radius = 120;
			minSpawn = 5;
			maxSpawn = 8;
			types[] = {};
			locations[] = {{8755.19, 9112.25}, {8736.05, 9122.55}, {8739, 9151.97}, {8645.13, 9167.05}, {8731.63, 9208.98}, {8744.15, 9170.36}, {8677.16, 9217.8}, {8727.95, 9177.72}, {8694.83, 9157.49}, {8653.97, 9169.26}, {8623.79, 9219.27}, {8698.87, 9169.99}, {8698.87, 9169.99}, {8740.83, 9183.97}, {8748.93, 9158.59}, {8704.4, 9164.84}, {8606.49, 9179.92}, {8600.96, 9198.31}, {8583.66, 9229.57}, {8623.42, 9243.91}};
		};
		
		class Cows_Berezino : DomesticAnimalBase {
			scope = public;
			position[] = {12074.8, 8813.08};
			radius = 100;
			minSpawn = 6;
			maxSpawn = 10;
			types[] = {};
			locations[] = {{12060.3, 8849.15}, {12097.2, 8859.52}, {12125.4, 8803.95}, {12052.4, 8773.68}, {12103.8, 8739.27}, {12062.7, 8748.8}, {12061.3, 8818.28}, {12088.5, 8780.32}, {12110.9, 8807.68}, {12034.1, 8810.59}, {12043.4, 8832.78}, {12088.7, 8803.22}, {12066, 8797.34}, {12129.7, 8886.38}, {12032.9, 8778.8}, {12109.3, 8763.06}, {12032.5, 8750.55}, {12116, 8729.35}, {12107.3, 8843.39}, {12053.3, 8868.42}, {12093.5, 8846.21}, {12028.1, 8887.19}};
		};
		
		class Cows_Mogilevka : DomesticAnimalBase {
			scope = public;
			position[] = {7020.41, 5384.19};
			radius = 150;
			minSpawn = 4;
			maxSpawn = 8;
			types[] = {};
			locations[] = {{7001.26, 5412.48}, {6976.94, 5418.84}, {7065.25, 5401.49}, {6926.85, 5467.73}, {7136.77, 5369.95}, {7105.21, 5306.02}, {6872.42, 5367.35}, {6954.94, 5345.36}, {7052.51, 5306.31}, {7097.1, 5435.33}, {7094.21, 5362.43}, {6895, 5432.44}, {6950.31, 5463.97}, {6897.61, 5387.31}, {6972.31, 5350.57}, {7072.78, 5329.74}, {6931.77, 5445.17}, {7058.88, 5414.5}, {6961.89, 5414.5}, {7011.69, 5382.1}, {7053.96, 5387.6}, {7026.46, 5380.08}, {6923.09, 5386.15}, {7089, 5378.63}, {7073.07, 5339.58}, {7007.86, 5471.8}, {6938.34, 5409.02}, {6985.63, 5443.72}, {6982.73, 5366.77}, {7105.5, 5402.06}, {7028.18, 5344.67}, {7030.51, 5390.2}};
		};
		
		class Cows_DevCastleSouth : DomesticAnimalBase {
			scope = public;
			position[] = {8452.07, 10184.5};
			radius = 100;
			minSpawn = 4;
			maxSpawn = 8;
			types[] = {};
			locations[] = {{8470.8, 10195.6}, {8479.58, 10155.3}, {8478.73, 10176.5}, {8394.83, 10197.5}, {8471.87, 10187.9}, {8463.09, 10199}, {8427.44, 10216.7}, {8426.18, 10193.4}, {8510.39, 10219.9}, {8446.25, 10224.9}, {8427.44, 10170.3}, {8465.42, 10137.7}, {8418.84, 10148.5}, {8407.37, 10168.2}, {8402.18, 10192.3}, {8430.48, 10233.5}, {8411.82, 10207.2}, {8450.37, 10168.4}, {8534.58, 10239.1}, {8501.25, 10238.3}, {8530.82, 10224}};
		};
		
		class PustaWest : WildAnimalBase {
			scope = public;
			position[] = {9876.57, 4353};
			radius = 150;
			locations[] = {{9886.57, 4353}, {9888.58, 4390.54}, {9906.77, 4386.9}, {9922.51, 4371.67}, {9897.13, 4332.31}, {9883.13, 4324.29}, {9862.54, 4319.68}, {9877.91, 4231.03}, {9879.79, 4240.77}, {9853.3, 4250.74}, {9850.12, 4310.38}, {9838.26, 4355.92}, {9815.05, 4400.2}, {9821.54, 4413.34}, {9863.8, 4450}, {9879.27, 4443.36}, {9911.15, 4404.33}, {10008.2, 4297.69}, {9993.63, 4322.73}, {9977.04, 4350.89}, {9953.17, 4373.67}};
		};
		
		class PustaSouth : WildAnimalBase {
			scope = public;
			position[] = {9466.56, 3503.35};
			locations[] = {{9371.14, 3488.87}, {9329.06, 3478.21}, {9341.22, 3367.17}, {9454.75, 3358.48}, {9504.02, 3330.76}, {9640.91, 3311.92}, {9265.07, 3410.14}, {9520.81, 3419.33}, {9568.81, 3525.28}, {9607.63, 3483.41}, {9627.27, 3505.13}, {9629.7, 3533.87}, {9778.58, 4338.1}, {9578.98, 3662.13}, {9550.92, 3662.1}, {9977.46, 4270.1}, {9489.62, 3643.88}, {9462.37, 3492.35}, {9546.87, 3508.86}, {9175.74, 3493.48}, {9302.89, 3531.28}, {9347.01, 3541.46}, {9374.29, 3590.56}};
		};
		
		class Kozlova : WildAnimalBase {
			scope = public;
			position[] = {9132.13, 3097.81};
			radius = 200;
			locations[] = {{9132.13, 3097.81}, {9116.73, 3077.78}, {9099.95, 3094.22}, {9081.77, 3092.13}, {9117.95, 3169.85}, {9141.26, 3170.91}, {9165.32, 3151.31}, {9155.11, 3112.68}, {9243.61, 3118.1}, {9213.63, 3133.7}, {9284.7, 3112.97}, {9186.24, 2959.69}, {9164.84, 2973.21}, {9130.61, 2970.64}, {9114.13, 2969.71}, {9107.1, 2994.28}, {9086.26, 3023.3}, {9031.18, 2993.05}, {9065.79, 3065.1}, {9074.95, 3111.48}, {9165.38, 3024.69}, {9174.13, 3043.1}, {9171.89, 3059.82}, {9014.34, 3082.23}, {9027.54, 3103.44}};
		};
		
		class Kamyshovo : WildAnimalBase {
			scope = public;
			position[] = {11827.3, 4015.33};
			radius = 200;
			locations[] = {{11869, 3893.63}, {11779, 3907.86}, {11823.4, 4009.96}, {11780.9, 4026.26}, {11886.1, 4025.29}, {11871.1, 3934.61}, {11744.4, 4091.17}, {11975.2, 3922.36}, {11916.4, 3977.99}, {11771.6, 3961.27}};
		};
		
		class GuglovoKumyrna : WildAnimalBase {
			scope = public;
			position[] = {8225.88, 6432.89};
			radius = 800;
			minSpawn = 3;
			maxSpawn = 8;
			locations[] = {{7808.37, 6601.98}, {7960.11, 6795.83}, {8586.59, 6528.34}, {8118.99, 6099.76}, {8155.84, 6375.91}, {8133.08, 6008.79}, {8065.88, 7001.85}, {8240.38, 6813.42}, {8746.56, 6719.21}, {8815.4, 6178.69}, {7665.78, 6875.7}, {7880.16, 6338.88}, {7664.99, 6348.63}, {7617.3, 6783.97}, {8539.02, 6957.45}, {8560.48, 7120.96}, {8286.17, 7219.46}, {8139.96, 7197.35}, {8238.55, 7053.95}, {7785.84, 7061.32}, {8121.56, 6602.25}, {8118.39, 5844.45}, {8837.65, 5969.72}};
		};
		
		class LittleHill : WildAnimalBase {
			scope = public;
			position[] = {6906.18, 4916.53};
			radius = 550;
			minSpawn = 4;
			maxSpawn = 6;
			locations[] = {{6653.41, 4867.67}, {6564.25, 4723.77}, {6714.61, 4624.67}, {6868.67, 4678.96}, {6888.19, 4543.49}, {6640.23, 4589.35}, {7061.76, 4711.65}, {6816.19, 5025.88}, {6967.1, 5154.55}, {6853.08, 5319.39}, {6964.41, 5496.3}, {7084.47, 5225.58}, {7050.93, 5037.95}, {6959.05, 5391.09}, {7302.93, 4885.36}, {7416.36, 5010.81}, {7427.08, 4720.92}, {7347.27, 4616.38}, {7163.45, 4543.25}};
		};
		
		class VysokyKamen : WildAnimalBase {
			scope = public;
			position[] = {8936.56, 4380.37};
			radius = 400;
			locations[] = {{9005.87, 4363.2}, {8997.4, 4267.33}, {8929.4, 4280.8}, {8874.37, 4231.43}, {8798.68, 4274.53}, {8834.75, 4339.69}, {8803.57, 4419.28}, {8865.41, 4453.94}, {8894.35, 4431.49}, {8937.3, 4501.08}, {9018.04, 4447.58}, {9142.55, 4381.01}, {9261.83, 4235.43}, {9184.23, 4165.06}, {9123.3, 4202.67}, {9059.07, 4232.2}, {9010.48, 4184.97}, {8965, 4182.36}, {8911.54, 4146.2}, {8868.27, 4178.47}, {8815.13, 4142.57}, {8796.89, 4173.55}, {8710.61, 4179.21}, {8663.08, 4282.66}, {8675.58, 4381.83}, {8631.01, 4422.25}, {8604.8, 4479.85}, {8658.45, 4523.93}, {8742.91, 4592.71}, {8973.53, 4644.73}, {9079.39, 4626.28}, {9113.99, 4598.55}, {9094.54, 4546.5}};
		};
		
		class Kopyto : WildAnimalBase {
			scope = public;
			position[] = {7873.69, 3866.67};
			radius = 350;
			minSpawn = 4;
			maxSpawn = 8;
			locations[] = {{7896.51, 3887.41}, {7984.19, 3836.97}, {8066.92, 3859.82}, {8188.03, 3828.8}, {8201.22, 3781.73}, {8143.5, 3738.69}, {8101.63, 3690.55}, {8110.5, 3619.18}, {7979.9, 3671.34}, {7899.48, 3738.83}, {7775.7, 3793.57}, {7646.4, 3829.07}, {7625.87, 3865.7}, {7649.74, 3909.26}, {7616.44, 3966.76}, {7651.67, 3990.58}, {7669.43, 4048.06}, {7711.3, 4111.85}, {7795.38, 4131.31}, {7951.45, 4185.7}, {8011.04, 4149.15}, {7925.66, 4027.69}};
		};
		
		class DubkyNW : WildAnimalBase {
			scope = public;
			position[] = {6219.59, 4265.66};
			radius = 400;
			minSpawn = 4;
			maxSpawn = 8;
			locations[] = {{6026.41, 4180.61}, {6091.45, 4327.18}, {6528.53, 4119.41}, {6317.55, 4305.27}, {6375.78, 4075.59}, {6057.42, 4246.34}, {6259.32, 4240.29}, {6395.44, 4256.92}, {6355.19, 4529.15}, {6169.17, 4133.25}, {6093.55, 4047.87}, {5967.26, 4392.4}};
		};
		
		class KozlovkaSE : WildAnimalBase {
			scope = public;
			position[] = {4997.77, 4054.2};
			radius = 600;
			minSpawn = 4;
			maxSpawn = 8;
			locations[] = {{4830.77, 3759.64}, {4614.21, 3849.09}, {4945.02, 3888.27}, {5086.56, 3512.6}, {5009.82, 3664.23}, {5297.15, 3808.2}, {5208.48, 3921.49}, {5165.85, 4065.46}, {5544.01, 3943.36}, {5451, 4148.87}, {5148.52, 4262.96}, {5003.33, 4395.93}, {5334.54, 4392.16}, {5192.38, 4584.06}, {4917.88, 4383.85}, {4879.31, 4557.62}, {4774.2, 4496.42}, {4442.99, 4188.92}, {4716.73, 4197.23}, {4598.77, 3990.21}};
		};
		
		class KomarovoNE : WildAnimalBase {
			scope = public;
			position[] = {3821.4, 2974.11};
			radius = 700;
			minSpawn = 4;
			maxSpawn = 8;
			locations[] = {{4174.2, 2671.69}, {4269.82, 2884.86}, {4494.03, 2996.87}, {4315.36, 3080.87}, {4250.55, 3161.38}, {4154.21, 3287.39}, {4145.45, 2916.36}, {4029.85, 2755.35}, {3858.18, 2723.85}, {3649.74, 3000.37}, {3502.6, 2856.86}, {3812.64, 2904.11}, {3444.8, 2704.59}, {3409.77, 2867.36}, {4085.9, 2867.36}, {3945.77, 2778.1}, {3443.61, 3273.75}, {3945.41, 3101.45}, {3859.97, 3494.16}, {3679.75, 3382.4}};
		};
		
		class KamenkaNE : WildAnimalBase {
			scope = public;
			position[] = {2323.33, 2531.02};
			radius = 700;
			minSpawn = 4;
			maxSpawn = 8;
			locations[] = {{2310.45, 2549.81}, {2309.24, 2421.21}, {2485.27, 2573.1}, {2114.2, 2499.14}, {2102.66, 2696.04}, {2292.04, 2921.76}, {2382.41, 2815.14}, {2521.8, 2923.68}, {2635.23, 2718.13}, {2814.04, 2647.06}, {2210.33, 2363.71}, {2080.55, 2387.73}, {2329.78, 2144.05}, {2945.83, 2345.68}, {2668.3, 2428.03}, {2769.63, 2573.1}, {2898.19, 2893.45}, {2063.35, 3037.76}, {1741.2, 2740.83}, {1920.42, 2946.34}, {1645.92, 2437.1}, {1742.72, 2641.85}};
		};
		
		class PavlovoW : WildAnimalBase {
			scope = public;
			position[] = {1136.74, 3803.52};
			radius = 700;
			minSpawn = 8;
			maxSpawn = 12;
			locations[] = {{1786.5, 3599.44}, {1592.22, 3408.08}, {1432.39, 3297.94}, {1521.95, 3637.99}, {961.151, 3470.03}, {1233.97, 3196.07}, {826.119, 3286.93}, {1497.15, 4195.55}, {799.939, 4195.55}, {1163.7, 4296.05}, {912.925, 3943.61}, {1258.77, 3852.75}, {615.302, 3665.52}, {1673.52, 4192.79}, {1552.26, 4074.4}, {1290.47, 4089.54}, {1117.54, 4118.88}, {534.249, 4034.87}, {1332.99, 3658.6}, {975.661, 3691.85}, {1254.17, 3539.59}};
		};
		
		class Zelenogorsk : WildAnimalBase {
			scope = public;
			position[] = {2947.65, 5482.7};
			radius = 1700;
			minSpawn = 12;
			maxSpawn = 16;
			locations[] = {{3216.39, 5741.12}, {2990.62, 6914.85}, {2696.87, 6247.59}, {2076.74, 6418.16}, {2905.26, 6094.57}, {3492.75, 6272.67}, {4080.25, 6468.33}, {4100.34, 5816.12}, {4517.11, 5517.61}, {4205.78, 5209.07}, {4451.83, 4895.5}, {3563.05, 5344.53}, {3357.18, 5118.76}, {4218.34, 4597}, {3756.38, 4306.01}, {3492.75, 4185.6}, {3186.45, 3894.62}, {3264.28, 4250.82}, {2749.6, 4067.7}, {2455.85, 4213.2}, {2654.19, 4464.05}, {2114.4, 4431.43}, {1825.67, 4363.71}, {2041.59, 4822.76}, {1519.37, 4840.32}, {2003.93, 5023.44}, {1808.09, 5419.78}, {1326.05, 5158.9}, {1426.47, 5379.65}, {1827.99, 6104.85}, {2475.74, 6082.27}, {3148.6, 6440.99}, {3909.33, 5031.21}, {3018.04, 5011.15}, {1993.69, 5899.15}};
		};
		
		class StarySoborW : WildAnimalBase {
			scope = public;
			position[] = {5123.36, 7712.81};
			radius = 1200;
			minSpawn = 12;
			maxSpawn = 16;
			locations[] = {{4970.54, 6678.46}, {5078.11, 6961.29}, {5593.31, 6675.63}, {5581.99, 7156.44}, {4384.57, 6842.5}, {4260.02, 7159.27}, {4279.83, 7408.16}, {5001.68, 7162.1}, {5205.49, 7402.51}, {5635.77, 7594.83}, {6142.48, 7374.22}, {6196.26, 8143.53}, {5890.54, 8313.23}, {5389.49, 8287.77}, {5364.02, 8024.74}, {5256.45, 7688.17}, {4494.97, 8536.66}, {4446.85, 7948.37}, {4783.71, 8511.21}, {4596.88, 8089.79}, {4356.26, 7617.46}, {6033.94, 7180.95}, {5708.76, 7980.8}, {4908.21, 7476.93}, {4729.08, 7136.89}, {4099.39, 7761.91}, {4191.71, 8243.75}, {5174.14, 8286.43}, {5101.11, 8839.86}, {5652.27, 8648.5}, {4872.88, 7583.32}};
		};
		
		class MyshkinoN : WildAnimalBase {
			scope = public;
			position[] = {2016.64, 8589.45};
			radius = 800;
			minSpawn = 8;
			maxSpawn = 12;
			locations[] = {{2279.33, 8061.84}, {2086.84, 8174.97}, {1950.96, 7928.91}, {1724.5, 7903.46}, {2440.68, 8384.27}, {2183.08, 8695.38}, {2740.75, 8460.64}, {2539.76, 8797.21}, {2174.59, 8443.67}, {2449.18, 8036.39}, {1686.04, 9197.46}, {2436.46, 9190.79}, {1412.14, 8923.81}, {1739.48, 8418.77}, {1372.06, 8332}, {2483.22, 8743.6}, {2028.96, 8819.24}, {1942.11, 8552.26}};
		};
		
		class LopatinoW : WildAnimalBase {
			scope = public;
			position[] = {2008.43, 10059.1};
			radius = 550;
			minSpawn = 3;
			maxSpawn = 6;
			locations[] = {{1982.25, 10430.4}, {1735.13, 10328.6}, {1551.95, 9828.32}, {2070.05, 9563}, {2407.13, 9870.55}, {2073.3, 9737.35}, {2426.64, 9937.69}, {1871.7, 9904.12}, {2413.64, 10238.8}, {2150.25, 10224.7}, {2267.31, 9894.38}, {1798.2, 10111.3}, {2077.84, 10089.6}, {1588.47, 10336.4}};
		};
		
		class LopatinoE : WildAnimalBase {
			scope = public;
			position[] = {3184.57, 10629.2};
			radius = 550;
			minSpawn = 2;
			maxSpawn = 4;
			locations[] = {{2692.96, 10760.6}, {3115.53, 10993.4}, {3587.81, 10540.2}, {3597.13, 10915.8}, {3291.08, 10158.3}, {3110.87, 10720.2}, {3160.58, 10909.6}, {2796.72, 10495.7}, {3048.47, 10337}, {2981.25, 10168.5}, {3328.32, 10389.5}};
		};
		
		class NadezhdinoN : WildAnimalBase {
			scope = public;
			position[] = {5683.83, 5702.46};
			radius = 900;
			minSpawn = 7;
			maxSpawn = 10;
			locations[] = {{5012.55, 5231.3}, {5002.5, 5434.49}, {5364.04, 5442.01}, {5416.77, 5710.42}, {5065.27, 5941.21}, {4889.53, 5873.48}, {5494.6, 5923.65}, {6049.46, 5278.96}, {5941.5, 5923.65}, {6004.26, 6166.97}, {6172.48, 6294.9}, {6534.01, 5878.49}, {5328.89, 6355.11}, {5718.05, 6106.77}, {6124.77, 5808.25}, {5582.83, 5080.98}, {6158.79, 5093.37}, {5067.5, 6190.6}, {5925.92, 6501.73}};
		};
		
		class StaroyeW : WildAnimalBase {
			scope = public;
			position[] = {9425.49, 5435.07};
			radius = 700;
			minSpawn = 6;
			maxSpawn = 9;
			locations[] = {{10010.3, 5211.47}, {9744.39, 5459.27}, {9156.03, 4889.32}, {9445.39, 4934.75}, {8925.92, 5766.28}, {9270.39, 5707.08}, {9674.11, 6011.33}, {9766.43, 5621.72}, {9716.83, 5208.72}, {8876.32, 5674.04}, {9408.18, 5501.95}, {9926.27, 5811.71}, {9556.99, 5795.19}, {9771.94, 5923.22}, {8871.55, 5450.69}, {9206.11, 5294.94}};
		};
		
		class Msta : WildAnimalBase {
			scope = public;
			position[] = {11415.3, 5499.48};
			radius = 1200;
			minSpawn = 8;
			maxSpawn = 14;
			locations[] = {{11654.7, 6441.56}, {11172.8, 6415.91}, {10479.6, 5993.63}, {11263.7, 5703.56}, {12059.6, 6100.19}, {11935.2, 6461.29}, {11654.7, 5725.27}, {11425.6, 6039.02}, {11046.4, 5685.81}, {12243.3, 5450.99}, {12590.8, 5547.68}, {10507.3, 5222.09}, {10989.1, 4833.36}, {11873.9, 4568.94}, {11259.7, 4399.24}, {11745.6, 4559.08}, {11952.9, 5133.29}, {10750.2, 5097.77}, {12077.4, 5415.47}, {11654.4, 5406.16}, {10742.4, 5419.73}, {10278.3, 5838.99}, {12481.3, 5082.3}, {11525.6, 5589.02}, {11198.1, 5270.33}};
		};
		
		class Polana : WildAnimalBase {
			scope = public;
			position[] = {10331.1, 7885.54};
			radius = 1400;
			minSpawn = 8;
			maxSpawn = 14;
			locations[] = {{9149.73, 7525.94}, {9649.36, 7282.62}, {9526.33, 6946.48}, {10083.7, 6753.32}, {9990.81, 7197.33}, {10354.9, 7142.14}, {10081.2, 7435.63}, {10558.2, 7267.56}, {11238.6, 7525.94}, {11670.4, 7847.03}, {11361.6, 7985}, {11286.3, 8378.83}, {10628.5, 8775.17}, {10806.8, 8494.22}, {10794.2, 9013.48}, {10573.3, 9211.65}, {9912.98, 8990.9}, {9682, 8489.2}, {9486.17, 8258.42}, {10108.8, 8291.03}, {10284.6, 7962.42}, {9842.68, 7774.28}, {9797.49, 7568.58}, {11548.7, 7233}, {11162.9, 7206.85}, {11048.5, 6825.5}, {10351.4, 8644.9}, {9225.17, 8241.1}, {9103.91, 8510.19}, {10945.5, 7608.91}, {10614.3, 7687.05}, {10244, 7709.03}};
		};
		
		class Orlovets : WildAnimalBase {
			scope = public;
			position[] = {12532.9, 7249.47};
			radius = 850;
			minSpawn = 8;
			maxSpawn = 10;
			locations[] = {{12129.8, 6733.27}, {12552.6, 7036.09}, {11801, 7277.85}, {12325.3, 7015.33}, {12093.1, 7459.78}, {12509.8, 7425.59}, {13039, 6606.29}, {12701.7, 6507.39}, {12987.7, 7368.2}, {12726.2, 7747.94}, {12470.7, 8026.33}, {12285, 8028.77}, {12678.5, 7478.1}, {11777.8, 7546.47}, {11934.3, 7126.44}, {12058.9, 7855.39}, {12468.2, 7724.56}, {12256.9, 7533.15}, {12517.6, 6714.25}, {12019.9, 6923.42}, {11707.9, 7122.71}, {11885.6, 6745.82}, {12523.5, 7647.6}};
		};
		
		class BerezinoN : WildAnimalBase {
			scope = public;
			position[] = {11728.4, 10408.6};
			radius = 1500;
			minSpawn = 15;
			maxSpawn = 25;
			locations[] = {{11301.1, 9081.34}, {11649.7, 9532.87}, {11217.1, 9629.12}, {10964.8, 9377.11}, {11096.2, 9700.88}, {11726.8, 9641.38}, {11474.6, 9975.65}, {10950.8, 9993.15}, {10495.4, 9609.87}, {10406.1, 10222.4}, {10696.8, 10498.9}, {10502.4, 10649.4}, {11332.7, 10645.9}, {12480, 11155.2}, {11725, 10873.5}, {12809.3, 11029.2}, {13031.8, 10737}, {11387, 11342.5}, {11420.3, 11424.7}, {11618.2, 11307.5}, {11770.6, 11748.5}, {11926.5, 11851.8}, {13080.8, 10971.5}, {11059.4, 11437}, {11905.5, 11466.8}, {12843.1, 10517.4}, {12495.2, 10549.3}, {12169.7, 10169.8}, {11690.9, 10332.4}, {11968.6, 10689.6}, {12900.6, 11270}, {12396.3, 11413.5}, {10727, 11410.3}, {11253.7, 11799.3}, {11106.8, 11011.7}, {12010.1, 9975.27}, {12246.8, 10383}, {11729.6, 10132.2}, {11310.3, 10370.5}, {10408.8, 11012.8}, {10714.4, 10148.2}};
		};
		
		class NovySoborNE : WildAnimalBase {
			scope = public;
			position[] = {7599, 8473.19};
			radius = 1300;
			minSpawn = 10;
			maxSpawn = 15;
			locations[] = {{7978.33, 9337.81}, {7511.22, 9399.77}, {7090.97, 9288.25}, {7595.28, 9059.72}, {7344.5, 9259.34}, {8213.95, 8871.12}, {7752.35, 8839.45}, {7381.7, 8927.56}, {7542.92, 8710.04}, {6969.72, 9083.13}, {6684.49, 8967.48}, {8306.26, 8520.06}, {8408.23, 8732.07}, {8146.43, 8912.42}, {7507.09, 8438.84}, {6663.83, 7813.82}, {6701.03, 8134.59}, {7214.98, 7297.56}, {7936.99, 7603.19}, {8229.1, 7659.63}, {7775.78, 7199.81}, {8780.26, 8203.43}, {8650.74, 7955.62}, {8444.05, 8102.93}, {8192.89, 8156.01}, {7976.62, 8020.77}, {8509.71, 9303.92}, {8686.63, 9078.15}, {8861.79, 8553.11}, {7579.59, 8124.33}, {7689.95, 7688.56}, {7525.29, 7994.83}, {6404.25, 8451.61}, {6950.76, 8621.37}};
		};
		
		class GorkaN : WildAnimalBase {
			scope = public;
			position[] = {9313, 9960.67};
			radius = 900;
			minSpawn = 4;
			maxSpawn = 7;
			locations[] = {{8518.94, 9621.78}, {9032.44, 9144.25}, {9476.8, 9282.38}, {9093.66, 9442.21}, {8678.92, 9765.82}, {8988.99, 9943.42}, {8704.59, 10162.4}, {8459.7, 10113.1}, {8815.19, 10533.4}, {9383.98, 10391.3}, {9810.57, 10679.4}, {9622.95, 10640}, {10148.3, 10016.4}, {10130.5, 9621.78}, {9883.64, 9560.61}, {9620.97, 9649.4}, {9790.82, 9994.72}, {9591.49, 10222.7}, {9324.18, 9955.6}, {9110.61, 10807.8}, {9930.45, 9772.5}};
		};
		
		class BlackMountain : WildAnimalBase {
			scope = public;
			position[] = {9486.38, 12281.1};
			radius = 1400;
			minSpawn = 10;
			maxSpawn = 14;
			locations[] = {{10468.4, 12327.2}, {10806.7, 11890.4}, {10612, 11549.1}, {9999.22, 11565.1}, {9817.3, 12349.6}, {9427.91, 12135.9}, {9306.63, 11482.2}, {9498.13, 10956}, {8856.6, 11310}, {8406.57, 11539.6}, {8314.01, 12279.4}, {8246.99, 11919.1}, {8760.85, 12238}, {8738.51, 12697.2}, {9092.79, 12933.1}, {9887.52, 13704.9}, {8894.9, 13510.3}, {9929.01, 13484.8}, {9565.16, 12796}, {10385, 12993.5}, {9947.09, 13103.7}, {9390.08, 13613}, {9110.35, 12015.7}, {9233.78, 11838.6}, {9280.42, 11222.9}, {9825.51, 11406.4}, {9752.44, 11801.1}};
		};
		
		class DevilsCastle : WildAnimalBase {
			scope = public;
			position[] = {6497.35, 11386.3};
			radius = 1700;
			minSpawn = 16;
			maxSpawn = 20;
			locations[] = {{6757.4, 9938.22}, {7278.43, 10113}, {7637.96, 10202.4}, {7225.56, 10433.8}, {7549.52, 10652.8}, {7388.98, 10849.7}, {7953.27, 10557.7}, {7772.55, 10547.2}, {7850.41, 10953.5}, {7959.04, 11198.4}, {7990.77, 11456.8}, {7677.38, 11289.6}, {7472.62, 11086}, {6418.52, 10007.2}, {5935.8, 9890.01}, {6208.33, 9769.13}, {5611.95, 10035.3}, {5340.65, 10213.6}, {5000.92, 10659.3}, {5334.54, 10781.4}, {4994.81, 11091.5}, {5062.02, 11424.8}, {5093.8, 11615.3}, {4922.71, 11967}, {5294.22, 12229.5}, {5554.52, 12446.8}, {6203.44, 12256.3}, {5836.82, 12222.2}, {6364.76, 13036.6}, {5979.8, 12879.1}, {7956.92, 11895.5}, {7613.32, 12183.5}, {7200.37, 12588.6}, {6745.13, 12886.4}, {6599.89, 12524.7}, {5752.53, 11339.8}, {6247.19, 11222.8}, {6568.24, 11986.8}, {6364.31, 10663.8}, {6963.69, 11710.1}, {7338.48, 11630.3}};
		};
		
		class Bashnya : WildAnimalBase {
			scope = public;
			position[] = {3713.93, 11815.5};
			radius = 700;
			minSpawn = 1;
			maxSpawn = 3;
			locations[] = {{3704.33, 11636.1}, {3834.83, 11386.1}, {3190.1, 11567.8}, {3822.4, 12452.5}, {4297.79, 12045.8}, {3213.4, 12134.3}, {3887.34, 12173.4}, {3708.67, 11214.4}, {3381.12, 11258.1}, {4016.96, 11860.1}, {3472.2, 11858.4}};
		};
		
		class Vybor : WildAnimalBase {
			scope = public;
			position[] = {3674.3, 9406.4};
			radius = 750;
			minSpawn = 3;
			maxSpawn = 5;
			locations[] = {{3102.75, 9054.04}, {3108, 9531.83}, {3496.86, 9610.58}, {3922.51, 9972.86}, {4043.37, 9670.09}, {3892.73, 9643.84}, {3719.32, 9365.57}, {4230.8, 9236.06}, {3544.16, 8730.27}, {3465.43, 9297.72}, {3417.2, 9873.18}, {3235.32, 9765.8}, {3349.68, 9551.03}, {3446.14, 9311.49}};
		};
	};
	
	class ZombiesSpawns {
		serverZombieSpawn = 1000;
		
		class SpawnVillage {
			scope = private;
			position[] = {0, 0};
			radius = 200;
			probability = 1;
			minSpawn = 5;
			maxSpawn = 5;
			locations[] = {{7500, 7500}};
			types[] = {"ZmbM_HermitSkinny_Beige", "ZmbM_HermitSkinny_Black", "ZmbM_HermitSkinny_Green", "ZmbM_HermitSkinny_Red", "ZmbM_FarmerFat_Beige", "ZmbM_FarmerFat_Blue", "ZmbM_FarmerFat_Brown", "ZmbM_FarmerFat_Green", "ZmbM_FishermanOld_Blue", "ZmbM_FishermanOld_Green", "ZmbM_FishermanOld_Grey", "ZmbM_FishermanOld_Red", "ZmbM_HunterOld_Autumn", "ZmbM_HunterOld_Spring", "ZmbM_HunterOld_Summer", "ZmbM_HunterOld_Winter", "ZmbM_VillagerOld_Blue", "ZmbM_VillagerOld_Green", "ZmbM_HikerSkinny_Green", "ZmbM_HikerSkinny_Yellow", "ZmbF_HikerSkinny_Blue", "ZmbF_HikerSkinny_Grey", "ZmbF_HikerSkinny_Green", "ZmbF_HikerSkinny_Red", "ZmbF_SurvivorNormal_Blue", "ZmbF_SurvivorNormal_Orange", "ZmbF_SurvivorNormal_Red", "ZmbF_SurvivorNormal_White", "ZmbM_SurvivorDean_Black", "ZmbM_SurvivorDean_Blue", "ZmbM_SurvivorDean_Grey"};
		};
		
		class SpawnXRoad : SpawnVillage {
			radius = 90;
			minSpawn = 0;
			maxSpawn = 0;
			types[] = {"ZmbM_HermitSkinny_Beige", "ZmbM_HermitSkinny_Black", "ZmbM_HermitSkinny_Green", "ZmbM_HermitSkinny_Red", "ZmbM_FishermanOld_Blue", "ZmbM_FishermanOld_Green", "ZmbM_FishermanOld_Grey", "ZmbM_FishermanOld_Red", "ZmbM_HunterOld_Autumn", "ZmbM_HunterOld_Spring", "ZmbM_HunterOld_Summer", "ZmbM_HunterOld_Winter"};
		};
		
		class SpawnHamlet : SpawnVillage {
			radius = 120;
			minSpawn = 0;
			maxSpawn = 0;
			types[] = {"ZmbM_HermitSkinny_Beige", "ZmbM_HermitSkinny_Black", "ZmbM_HermitSkinny_Green", "ZmbM_HermitSkinny_Red", "ZmbM_FishermanOld_Blue", "ZmbM_FishermanOld_Green", "ZmbM_FishermanOld_Grey", "ZmbM_FishermanOld_Red", "ZmbM_HunterOld_Autumn", "ZmbM_HunterOld_Spring", "ZmbM_HunterOld_Summer", "ZmbM_HunterOld_Winter"};
		};
		
		class SpawnTown : SpawnVillage {
			radius = 250;
			minSpawn = 14;
			maxSpawn = 14;
			types[] = {"ZmbF_CitizenANormal_Brown", "ZmbF_CitizenANormal_Blue", "ZmbM_CitizenBFat_Red", "ZmbM_CitizenBFat_Green", "ZmbF_JournalistNormal_Blue", "ZmbF_JournalistNormal_Green", "ZmbF_JournalistNormal_Red", "ZmbF_JournalistNormal_White", "ZmbF_SkaterYoung_Brown", "ZmbF_SkaterYoung_Violet", "ZmbM_JoggerSkinny_Blue", "ZmbM_JoggerSkinny_Green", "ZmbM_JoggerSkinny_Red", "ZmbM_MotobikerFat_Beige", "ZmbM_MotobikerFat_Black", "ZmbM_CommercialPilotOld_Olive", "ZmbM_CommercialPilotOld_Brown", "ZmbM_CommercialPilotOld_Grey", "ZmbM_HikerSkinny_Green", "ZmbM_HikerSkinny_Yellow", "ZmbF_HikerSkinny_Blue", "ZmbF_HikerSkinny_Grey", "ZmbF_HikerSkinny_Green", "ZmbF_HikerSkinny_Red", "ZmbF_SurvivorNormal_Blue", "ZmbF_SurvivorNormal_Orange", "ZmbF_SurvivorNormal_Red", "ZmbF_SurvivorNormal_White", "ZmbM_SurvivorDean_Black", "ZmbM_SurvivorDean_Blue", "ZmbM_SurvivorDean_Grey"};
		};
		
		class SpawnCity : SpawnVillage {
			radius = 350;
			minSpawn = 20;
			maxSpawn = 20;
			types[] = {"ZmbF_CitizenANormal_Brown", "ZmbF_CitizenANormal_Blue", "ZmbM_CitizenBFat_Red", "ZmbM_CitizenBFat_Green", "ZmbF_JournalistNormal_Blue", "ZmbF_JournalistNormal_Green", "ZmbF_JournalistNormal_Red", "ZmbF_JournalistNormal_White", "ZmbF_SkaterYoung_Brown", "ZmbF_SkaterYoung_Violet", "ZmbM_JoggerSkinny_Blue", "ZmbM_JoggerSkinny_Green", "ZmbM_JoggerSkinny_Red", "ZmbM_MotobikerFat_Beige", "ZmbM_MotobikerFat_Black", "ZmbM_CommercialPilotOld_Olive", "ZmbM_CommercialPilotOld_Brown", "ZmbM_CommercialPilotOld_Grey", "ZmbM_HikerSkinny_Green", "ZmbM_HikerSkinny_Yellow", "ZmbF_HikerSkinny_Blue", "ZmbF_HikerSkinny_Grey", "ZmbF_HikerSkinny_Green", "ZmbF_HikerSkinny_Red", "ZmbF_SurvivorNormal_Blue", "ZmbF_SurvivorNormal_Orange", "ZmbF_SurvivorNormal_Red", "ZmbF_SurvivorNormal_White", "ZmbM_SurvivorDean_Black", "ZmbM_SurvivorDean_Blue", "ZmbM_SurvivorDean_Grey", "ZmbF_DoctorSkinny", "ZmbM_ParamedicNormal_Blue", "ZmbM_ParamedicNormal_Green", "ZmbM_ParamedicNormal_Red", "ZmbM_ParamedicNormal_Black", "ZmbF_ParamedicNormal_Blue", "ZmbF_ParamedicNormal_Green", "ZmbF_ParamedicNormal_Red", "ZmbM_PolicemanFat", "ZmbF_PoliceWomanNormal"};
		};
		
		class SpawnLargeCity : SpawnVillage {
			radius = 450;
			minSpawn = 40;
			maxSpawn = 40;
			types[] = {"ZmbF_CitizenANormal_Brown", "ZmbF_CitizenANormal_Blue", "ZmbM_CitizenBFat_Red", "ZmbM_CitizenBFat_Green", "ZmbF_JournalistNormal_Blue", "ZmbF_JournalistNormal_Green", "ZmbF_JournalistNormal_Red", "ZmbF_JournalistNormal_White", "ZmbF_SkaterYoung_Brown", "ZmbF_SkaterYoung_Violet", "ZmbM_JoggerSkinny_Blue", "ZmbM_JoggerSkinny_Green", "ZmbM_JoggerSkinny_Red", "ZmbM_MotobikerFat_Beige", "ZmbM_MotobikerFat_Black", "ZmbM_CommercialPilotOld_Olive", "ZmbM_CommercialPilotOld_Brown", "ZmbM_CommercialPilotOld_Grey", "ZmbM_HikerSkinny_Green", "ZmbM_HikerSkinny_Yellow", "ZmbF_HikerSkinny_Blue", "ZmbF_HikerSkinny_Grey", "ZmbF_HikerSkinny_Green", "ZmbF_HikerSkinny_Red", "ZmbF_SurvivorNormal_Blue", "ZmbF_SurvivorNormal_Orange", "ZmbF_SurvivorNormal_Red", "ZmbF_SurvivorNormal_White", "ZmbM_SurvivorDean_Black", "ZmbM_SurvivorDean_Blue", "ZmbM_SurvivorDean_Grey", "ZmbF_DoctorSkinny", "ZmbM_ParamedicNormal_Blue", "ZmbM_ParamedicNormal_Green", "ZmbM_ParamedicNormal_Red", "ZmbM_ParamedicNormal_Black", "ZmbF_ParamedicNormal_Blue", "ZmbF_ParamedicNormal_Green", "ZmbF_ParamedicNormal_Red", "ZmbM_FirefighterNormal", "ZmbM_PolicemanFat", "ZmbF_PoliceWomanNormal"};
		};
		
		class SpawnMetropolis : SpawnVillage {
			radius = 600;
			minSpawn = 30;
			maxSpawn = 30;
			types[] = {"ZmbF_CitizenANormal_Brown", "ZmbF_CitizenANormal_Blue", "ZmbM_CitizenBFat_Red", "ZmbM_CitizenBFat_Green", "ZmbF_JournalistNormal_Blue", "ZmbF_JournalistNormal_Green", "ZmbF_JournalistNormal_Red", "ZmbF_JournalistNormal_White", "ZmbF_SkaterYoung_Brown", "ZmbF_SkaterYoung_Violet", "ZmbM_JoggerSkinny_Blue", "ZmbM_JoggerSkinny_Green", "ZmbM_JoggerSkinny_Red", "ZmbM_MotobikerFat_Beige", "ZmbM_MotobikerFat_Black", "ZmbM_CommercialPilotOld_Olive", "ZmbM_CommercialPilotOld_Brown", "ZmbM_CommercialPilotOld_Grey", "ZmbM_HikerSkinny_Green", "ZmbM_HikerSkinny_Yellow", "ZmbF_HikerSkinny_Blue", "ZmbF_HikerSkinny_Grey", "ZmbF_HikerSkinny_Green", "ZmbF_HikerSkinny_Red", "ZmbF_SurvivorNormal_Blue", "ZmbF_SurvivorNormal_Orange", "ZmbF_SurvivorNormal_Red", "ZmbF_SurvivorNormal_White", "ZmbM_SurvivorDean_Black", "ZmbM_SurvivorDean_Blue", "ZmbM_SurvivorDean_Grey", "ZmbF_DoctorSkinny", "ZmbM_ParamedicNormal_Blue", "ZmbM_ParamedicNormal_Green", "ZmbM_ParamedicNormal_Red", "ZmbM_ParamedicNormal_Black", "ZmbF_ParamedicNormal_Blue", "ZmbF_ParamedicNormal_Green", "ZmbF_ParamedicNormal_Red"};
		};
		
		class Balota : SpawnVillage {
			scope = public;
			position[] = {4497, 2452};
			radius = 200;
			locations[] = {{4501.98, 2453.65}, {4520.46, 2481.01}, {4489.82, 2512.75}, {4511.48, 2534.04}, {4529.26, 2545.9}, {4502.62, 2560.92}, {4513.68, 2575.07}, {4524, 2582.3}, {4511.06, 2607.11}, {4543.3, 2615.56}, {4557.02, 2595.01}, {4608.31, 2599.1}, {4591.36, 2549.99}, {4613.05, 2527.76}, {4600.28, 2510.61}, {4568.64, 2496.21}, {4566.77, 2475.84}, {4597.69, 2474.95}, {4601.16, 2473.34}, {4611.9, 2452.54}, {4641.82, 2465.92}, {4668.35, 2486.38}, {4664.69, 2487.62}, {4663.44, 2497.33}, {4632.51, 2523.26}, {4602.58, 2431.93}, {4567.68, 2397.05}, {4551.88, 2400.61}, {4532.96, 2406.71}, {4519.05, 2385.9}, {4543.73, 2356.28}, {4559.25, 2358.95}, {4513.44, 2344.85}, {4496.6, 2369.5}, {4475.89, 2360.15}, {4473.04, 2342.31}, {4444.02, 2336.14}, {4413.53, 2309.07}, {4403.67, 2358.65}, {4421.33, 2379.04}, {4434.5, 2388.63}, {4439.15, 2408.11}, {4439.06, 2420.22}, {4462.78, 2428.72}, {4478.45, 2434.72}, {4467.11, 2462.24}, {4453.81, 2503.11}, {4436.74, 2526.87}, {4438.81, 2480.08}, {4440.54, 2477.33}, {4412.3, 2468.4}, {4410.66, 2493.05}, {4414.97, 2527.77}, {4363.66, 2497.3}, {4365.21, 2529.67}, {4338.58, 2547.23}, {4330.93, 2469.64}, {4409.13, 2440.09}};
		};
		
		class BalotaNorth : SpawnHamlet {
			scope = public;
			position[] = {4885, 2839};
			types[] = {"ZmbM_HermitSkinny_Beige", "ZmbM_HermitSkinny_Black", "ZmbM_HermitSkinny_Green", "ZmbM_HermitSkinny_Red", "ZmbM_FarmerFat_Beige", "ZmbM_FarmerFat_Blue", "ZmbM_FarmerFat_Brown", "ZmbM_FarmerFat_Green", "ZmbM_FishermanOld_Blue", "ZmbM_FishermanOld_Green", "ZmbM_FishermanOld_Grey", "ZmbM_FishermanOld_Red", "ZmbM_HunterOld_Autumn", "ZmbM_HunterOld_Spring", "ZmbM_HunterOld_Summer", "ZmbM_HunterOld_Winter", "ZmbM_VillagerOld_Blue", "ZmbM_VillagerOld_Green", "ZmbM_HikerSkinny_Green", "ZmbM_HikerSkinny_Yellow", "ZmbF_HikerSkinny_Blue", "ZmbF_HikerSkinny_Grey", "ZmbF_HikerSkinny_Green", "ZmbF_HikerSkinny_Red", "ZmbF_SurvivorNormal_Blue", "ZmbF_SurvivorNormal_Orange", "ZmbF_SurvivorNormal_Red", "ZmbF_SurvivorNormal_White", "ZmbM_SurvivorDean_Black", "ZmbM_SurvivorDean_Blue", "ZmbM_SurvivorDean_Grey", "ZmbM_PatrolNormal_PautRev", "ZmbM_PatrolNormal_Autumn", "ZmbM_PatrolNormal_Flat", "ZmbM_PatrolNormal_Summer", "", "ZmbM_SoldierNormal"};
			locations[] = {{4884.97, 2847.07}, {4886.29, 2859.59}, {4877.21, 2862.93}, {4859.09, 2858.13}, {4871.56, 2828.93}, {4868.03, 2811.69}, {4871.92, 2789.28}, {4894.76, 2793.71}, {4909.33, 2748.06}};
		};
		
		class BalotaSouth : SpawnHamlet {
			scope = public;
			position[] = {4840, 2247};
			types[] = {"ZmbM_HermitSkinny_Beige", "ZmbM_HermitSkinny_Black", "ZmbM_HermitSkinny_Green", "ZmbM_HermitSkinny_Red", "ZmbM_FarmerFat_Beige", "ZmbM_FarmerFat_Blue", "ZmbM_FarmerFat_Brown", "ZmbM_FarmerFat_Green", "ZmbM_FishermanOld_Blue", "ZmbM_FishermanOld_Green", "ZmbM_FishermanOld_Grey", "ZmbM_FishermanOld_Red", "ZmbM_HunterOld_Autumn", "ZmbM_HunterOld_Spring", "ZmbM_HunterOld_Summer", "ZmbM_HunterOld_Winter", "ZmbM_VillagerOld_Blue", "ZmbM_VillagerOld_Green", "ZmbM_HikerSkinny_Green", "ZmbM_HikerSkinny_Yellow", "ZmbF_HikerSkinny_Blue", "ZmbF_HikerSkinny_Grey", "ZmbF_HikerSkinny_Green", "ZmbF_HikerSkinny_Red", "ZmbF_SurvivorNormal_Blue", "ZmbF_SurvivorNormal_Orange", "ZmbF_SurvivorNormal_Red", "ZmbF_SurvivorNormal_White", "ZmbM_SurvivorDean_Black", "ZmbM_SurvivorDean_Blue", "ZmbM_SurvivorDean_Grey", "ZmbM_PatrolNormal_PautRev", "ZmbM_PatrolNormal_Autumn", "ZmbM_PatrolNormal_Flat", "ZmbM_PatrolNormal_Summer", "", "ZmbM_SoldierNormal"};
			locations[] = {{4840.43, 2247.72}, {4869.67, 2242.55}, {4876.51, 2261.09}, {4870.6, 2278.49}, {4855.5, 2293.61}, {4845.05, 2294.13}, {4843.5, 2321.67}, {4825.43, 2314.63}, {4814, 2309.63}, {4796.25, 2323.18}, {4784.58, 2309.93}, {4749.44, 2279.69}, {4758.2, 2269.89}, {4757.01, 2258.99}, {4764.35, 2229.41}, {4779.79, 2232.18}, {4790.33, 2236.57}, {4819.54, 2242.45}, {4820.07, 2268.79}};
		};
		
		class BalotaAir1 : SpawnHamlet {
			scope = public;
			position[] = {4773, 2585};
			types[] = {"ZmbM_PatrolNormal_PautRev", "ZmbM_PatrolNormal_Autumn", "ZmbM_PatrolNormal_Flat", "ZmbM_PatrolNormal_Summer", "", "ZmbM_SoldierNormal"};
			locations[] = {{4767.88, 2574.99}, {4750.36, 2569.93}, {4732.26, 2614.96}, {4710.14, 2602.81}, {4701.1, 2596.29}, {4688.19, 2598.3}, {4684.39, 2565.6}, {4729.19, 2538.48}, {4783.72, 2542.64}, {4809.87, 2568.82}, {4816.41, 2550.69}, {4810.64, 2530.91}, {4811.88, 2517.73}, {4830.87, 2523.06}, {4845.48, 2553.56}, {4788.36, 2499.38}, {4693.07, 2551.76}, {4723.08, 2567.57}, {4775.83, 2480.27}, {4731.49, 2524.5}, {4673.12, 2585.45}, {4719.29, 2511.98}, {4751.93, 2560.08}};
		};
		
		class BalotaAir2 : SpawnHamlet {
			scope = public;
			position[] = {5137, 2355};
			radius = 150;
			types[] = {"ZmbM_PatrolNormal_PautRev", "ZmbM_PatrolNormal_Autumn", "ZmbM_PatrolNormal_Flat", "ZmbM_PatrolNormal_Summer", "", "ZmbM_SoldierNormal"};
			locations[] = {{5150.12, 2348}, {5157.59, 2355.14}, {5156.94, 2364.93}, {5124.78, 2347.76}, {5088.58, 2348.3}, {5020.33, 2358.59}, {5009.2, 2346.58}, {5087.69, 2393.7}, {5132.67, 2390.95}, {5137.92, 2392.35}, {5203.24, 2361.02}, {5239.29, 2264.84}, {5133.53, 2314.53}, {5062.63, 2304.14}, {5041.37, 2401.42}, {5210.57, 2240.87}, {5139.61, 2370.13}, {5088.83, 2346.74}, {5146.21, 2266.35}, {5179.18, 2367.16}, {5063.77, 2402.74}, {5005.74, 2336.52}, {5110.6, 2339.81}, {5231.28, 2289.74}};
		};
		
		class Karmanovka : SpawnVillage {
			scope = public;
			position[] = {12843, 14842};
			radius = 480;
			locations[] = {{12412.4, 14896.9}, {12374.9, 14875.1}, {12415.4, 14807.2}, {12476.4, 14778.9}, {12565.2, 14799.7}, {12484.6, 14825.8}, {12565.2, 14799.7}, {12553.1, 14730.9}, {12601.1, 14667.6}, {12631.5, 14636}, {12542.3, 14694.4}, {12681.1, 14615.8}, {12805.5, 14666.7}, {12831.9, 14731.9}, {12717.3, 14734.8}, {12640.9, 14774.9}, {12889, 14616.7}, {12851.5, 14575.3}, {13007.2, 14550.9}, {12948.1, 14485.9}, {12947.5, 14536.2}, {13052.6, 14422.3}, {12975.6, 14437.3}, {12932.1, 14472.3}, {12861.6, 14532.3}, {12899.8, 14573}, {13251.7, 14478.1}, {12744.7, 14577.9}, {12750, 14771.7}, {12443.3, 14754.5}, {12385.2, 14836.8}, {12412.2, 14870.7}, {12614, 14605.9}, {12487.2, 14713.3}, {12651.9, 14714.2}, {12769.2, 14648.9}, {12923.6, 14562.2}, {12936.7, 14595.3}, {12735.1, 14640.8}, {12754, 14662}, {12675.3, 14682.2}, {12532.2, 14675.1}, {12602.9, 14778.7}, {12589.7, 14751.5}, {12523, 14826.2}, {12465.8, 14815.8}, {12439.2, 14877.4}, {12432.5, 14835.5}, {12818.2, 14553.3}, {12805.3, 14726.1}, {12696, 14777.1}, {12754.8, 15081.2}, {12754.5, 15122.8}, {12808.2, 15076.6}, {12858.8, 15013.8}, {12865.2, 15132}, {12916.1, 15112.8}, {12872.9, 15118.2}, {12903.2, 15096.4}, {12893.7, 15040.7}, {12957.9, 15025.8}, {13099.7, 14967.6}, {13126.6, 14911.4}, {13161.8, 14952.4}, {13068.9, 14917.5}, {13299.7, 14770.3}, {13285.3, 14801.1}, {13199.3, 14874.7}, {12955.4, 15009.1}, {13097.4, 15016.1}, {12725, 15147.7}};
		};
		
		class KarmanovkaEast : SpawnVillage {
			scope = public;
			position[] = {14100.2, 14967.5};
			radius = 350;
			locations[] = {{14334.3, 14784.8}, {14361.6, 14792.7}, {14369.4, 14825.6}, {14339.3, 14831.6}, {14323.6, 14822}, {14317.8, 14802.3}, {14331.1, 14801.1}, {14381.9, 15001.7}, {14325.9, 14975.3}, {14245.9, 14908.9}, {14236.2, 14889.3}, {14234.6, 14839.9}, {14200.3, 14839}, {14212.9, 14865.9}, {14188.2, 14855.2}, {14189.4, 14880.2}, {14206.5, 14888.3}, {14214.8, 14902}, {14206.3, 14922.8}, {14182.2, 14918.4}, {14151.1, 14944.2}, {14129.1, 14933.6}, {14107.2, 14972}, {14109.1, 15005.4}, {14092.8, 15027.5}, {14183.2, 15011.2}, {14205.4, 15030.4}, {14226.3, 15021.4}, {14236.4, 15044.3}, {14118.8, 15084.4}, {14108.9, 15072.5}, {14087, 15065.5}, {14081.1, 15073}, {14059.8, 15075.1}, {14040.3, 15077.1}, {14042.4, 15067.6}, {14050.3, 15051.4}, {14082.5, 15042.5}, {14057.9, 15011.3}, {14022.3, 15030.7}, {14023.2, 15063.8}, {14022.6, 15078.8}, {14035.6, 15090.3}, {14013.6, 15109.8}, {14029.2, 15143.1}, {14009.1, 15166.4}, {13984.8, 15114.6}, {13953.1, 15105.5}, {13945, 15086.6}, {13917, 15060.1}, {13912.3, 15041.5}, {13915.2, 15026}};
		};
		
		class NovodmitrovskWest : SpawnVillage {
			scope = public;
			position[] = {10755, 14380};
			locations[] = {{10521, 14222.5}, {10560, 14319.5}, {10672.9, 14351}, {10690.7, 14269.7}, {10882.9, 14302.9}, {10811.5, 14419}, {10911.9, 14467.5}, {10980.8, 14428.1}, {10901.1, 14350.6}, {11085.8, 14301.7}, {11066.7, 14402.4}, {11048.9, 14436.8}, {10960.9, 14453.8}, {10941, 14346.4}, {10842.6, 14458.4}, {10461.3, 14431.4}, {10549.2, 14379.1}, {10615.8, 14485.8}, {10764.1, 14503.2}, {10662.8, 14466.9}, {10866.4, 14424.2}, {10663.8, 14396.2}, {10818.4, 14336.1}, {10889.1, 14500.1}, {10930.8, 14402}, {10892.8, 14445.8}, {10679.1, 14456.3}, {10539.9, 14255}, {10470.2, 14192.8}, {10507.8, 14354.4}, {10563.8, 14461.4}, {10791.3, 14319.2}, {10718.8, 14325.6}, {10647.4, 14294.7}, {10600.5, 14314.4}, {10648, 14431}, {10633.1, 14417.7}, {10785.5, 14390.6}, {10649.6, 14326.2}, {10741.8, 14345.3}, {10857.4, 14370.9}, {11028.5, 14344.8}, {10819.6, 14286.2}, {10821.7, 14488.5}, {10790.3, 14373}, {10719.9, 14367.2}};
		};
		
		class NovodmitrovskCenter : SpawnLargeCity {
			scope = public;
			position[] = {11572, 14525};
			locations[] = {{11967.3, 14429.6}, {11858.7, 14434.7}, {11965.9, 14386.5}, {11921, 14326.7}, {11960.3, 14344.5}, {11848.4, 14327.6}, {11845.2, 14441.7}, {11816.6, 14291.2}, {11795.1, 14431}, {11696.4, 14504.4}, {11681.9, 14408.1}, {11614, 14421.1}, {11719.8, 14604.4}, {11650, 14659.1}, {11602.8, 14665.7}, {11610.3, 14726}, {11555.1, 14710.1}, {11635.1, 14676.4}, {11533.5, 14737.7}, {11625.7, 14648.8}, {11580.8, 14777.4}, {11611.7, 14798.9}, {11622.9, 14826.5}, {11536.3, 14681.6}, {11567.7, 14605.3}, {11584.5, 14562.3}, {11585.5, 14468.8}, {11485.3, 14471.2}, {11475, 14495.5}, {11392.7, 14466}, {11335.1, 14432.4}, {11308.9, 14396.8}, {11237.8, 14310.8}, {11913.2, 14368.2}, {11862.9, 14362.7}, {11781.6, 14355.2}, {11782, 14315}, {11822.6, 14250.9}, {11761.8, 14248.8}, {11683, 14261.8}, {11641.5, 14286.1}, {11653.7, 14307.5}, {11621, 14341.4}, {11673.4, 14256.4}, {11563.6, 14261.8}, {11592.1, 14282.3}, {11570.7, 14304.9}, {11500.7, 14300.3}, {11432.8, 14339.3}, {11499.4, 14376.1}, {11422.7, 14377.8}, {11392.6, 14289}, {11324.2, 14338}, {11310.8, 14293.6}, {11218.6, 14289.5}, {11173.3, 14377.8}, {11216.5, 14343.5}, {11170, 14429.8}, {11216.5, 14452}, {11239.6, 14405.9}, {11551.8, 14514.8}, {11762.7, 14486.3}, {11642.8, 14513.9}, {11555.6, 14526.9}, {11541.8, 14497.2}, {11568.2, 14418.5}, {11588.7, 14387.5}, {11558.6, 14309.6}, {11669.2, 14258}, {11272.7, 14627.4}, {11301.2, 14586.4}, {11438.3, 14616.6}, {11497.4, 14632.9}, {11302.4, 14691.9}, {11416.9, 14699.9}, {11383.8, 14650.1}, {11382.1, 14563.4}, {11520.8, 14779.5}, {11505.7, 14724.6}, {11523.8, 14617}, {11499.5, 14617.4}, {11665, 14768.2}, {11522.9, 14809.6}, {11528.8, 14755.6}, {11457.1, 14891.3}, {11410.6, 14911.5}, {11425.5, 14938.4}, {11457.1, 14916.2}, {11730.7, 14936.1}, {11696.8, 14854.3}, {11675.1, 14591.6}, {11736.8, 14502.8}, {11690.2, 14561.9}, {11711.6, 14311.3}, {11710.2, 14341.7}, {11857.3, 14263.3}, {11874, 14227.4}, {11678.3, 14206}, {11718, 14229.5}, {11672.5, 14380.2}, {11709, 14424.7}, {11747.8, 14436.3}, {11589.1, 14725.7}, {11617.5, 14694.7}, {11590.1, 14683.3}, {11659.3, 14629.1}, {11676.6, 14590}, {11698.8, 14569.8}, {11295.3, 14358.7}, {11452.7, 14300.9}, {11733.1, 14391.9}, {11747.9, 14434.5}, {11708.7, 14430.1}, {11650.4, 14434.2}, {11619.5, 14448.6}, {11671.8, 14481.1}, {11640.1, 14581.2}, {11700.3, 14591.6}, {11658.9, 14622}, {11749, 14537.3}, {11815.6, 14460.3}, {11827.7, 14386}, {11698.6, 14349.2}, {11732.2, 14312.5}, {11729.3, 14296.9}, {11714.2, 14246.2}, {11389.1, 14739.5}, {11359.9, 14673.1}, {11530.2, 14848.9}, {11599.1, 14857}, {11668.6, 14836.2}, {11432.6, 14855.9}, {11891.6, 14227.2}, {11642.7, 15082.1}, {11670.4, 15040.9}, {11584.6, 15061.9}, {11678.5, 15007.8}};
		};
		
		class NovodmitrovskEast : SpawnVillage {
			scope = public;
			position[] = {12240, 14330};
			radius = 250;
			locations[] = {{11996.3, 14306.6}, {12010.8, 14416.5}, {12081.5, 14382.3}, {12072.6, 14332.3}, {12185.4, 14421.6}, {12103, 14273.4}, {12253.7, 14354.3}, {12189.6, 14382.8}, {12209.7, 14265}, {12293.4, 14340.3}, {12363.2, 14313.1}, {12393.1, 14360.4}, {12366, 14249.6}, {12433.8, 14345.4}, {12307, 14216.4}, {12438.5, 14233.7}, {12441.8, 14190.7}, {12350.1, 14184.6}, {12009.4, 14364}, {12033.2, 14253.3}, {12159.3, 14244.8}, {12173, 14305.5}, {12249.1, 14318.6}, {12192.7, 14335.5}, {12125, 14345.4}, {12080.5, 14441.4}, {12408.8, 14287.3}, {12471.4, 14255.7}, {12402.2, 14291.7}, {12234.3, 14332.6}, {12270.8, 14396.2}, {12304.6, 14401}, {12289.9, 14293.6}, {12352.1, 14345.1}, {12279, 14227.1}, {12161.2, 14407.6}, {12121.1, 14317.5}, {12273.4, 14301.7}, {12289.6, 14366.8}, {12373.6, 14273}, {12383.5, 14210.5}, {12033.5, 14320.8}};
		};
		
		class Severograd : SpawnLargeCity {
			scope = public;
			position[] = {7995, 12717};
			radius = 500;
			locations[] = {{7468.73, 12635.4}, {7669.27, 12724.6}, {7678.65, 12500.8}, {7753.77, 12577.8}, {7901.99, 12523.5}, {7951.63, 12680.3}, {7879.19, 12651.5}, {7857.06, 12719.9}, {7950.95, 12782.2}, {8014, 12572.5}, {8145.45, 12767.5}, {8107.23, 12815}, {8152.16, 12824.4}, {7864.54, 13005}, {7901.06, 13021.1}, {7992.78, 13044.3}, {8084.91, 12926.2}, {8282.1, 12901}, {7687.86, 12644.4}, {7585.35, 12612.1}, {7518.12, 12612.1}, {7514.39, 12657.3}, {7720.23, 12531.6}, {7755.51, 12475.3}, {7871.3, 12549.9}, {7701.56, 12628.3}, {7630.59, 12697.5}, {7778.34, 12653.6}, {7748.46, 12692.5}, {7704.2, 12677.3}, {7817.35, 12746.4}, {7897.44, 12629.9}, {7736.81, 12667.8}, {7740.05, 12620.8}, {7974.52, 12640.3}, {8041.8, 12726.5}, {8011.24, 12707.8}, {7976.83, 12700.3}, {8013.29, 12718.8}, {7952.94, 12702.6}, {7907.49, 12731.6}, {7892.08, 12674.1}, {7845.34, 12661.6}, {7974, 12752.1}, {7923.92, 12730.6}, {8133.73, 12674.4}, {8080.57, 12594.1}, {8047.45, 12513.8}, {8145.03, 12414.2}, {8149.47, 12334.4}, {8178.38, 12347.6}, {7880.44, 12419.3}, {7826.97, 12425.3}, {7776.06, 12418.1}, {8484.73, 12687.4}, {8456.23, 12705.6}, {8452.37, 12765.1}, {8401.78, 12750.5}, {8421.04, 12781.8}, {8382.52, 12717.6}, {8427.98, 12659.1}, {8439.02, 12828.2}, {8392.02, 12767.7}, {8351.45, 12805.9}, {8128.68, 12639.7}, {8085.83, 12669.5}, {8155.03, 12608.2}, {8056.88, 12565.6}, {8112.76, 12458.6}, {8123.47, 12469.6}, {7979.57, 12537.6}, {7970.01, 12597.2}, {7833.93, 12575.5}, {7826.98, 12523.1}, {7820.32, 12473.1}, {8056.59, 12785.2}, {8015.47, 12821.1}, {8261.87, 12781.4}, {8309.36, 12814.4}, {8243.05, 12740.9}, {8169.22, 12754.5}, {8072.51, 12794.8}, {8083.81, 12782.9}, {8038.35, 12674.4}, {8449.79, 12888.8}, {8384.64, 12970.4}, {8381.75, 12888.8}, {8233.21, 13132.1}, {8348.09, 13046.9}, {8201.86, 12884.4}, {7906.36, 12812.7}, {7896.11, 12769.2}};
		};
		
		class SeverogradNorth : SpawnVillage {
			scope = public;
			position[] = {7568.99, 13511.4};
			locations[] = {{7709.67, 13243.9}, {7690.08, 13270.4}, {7682.76, 13250}, {7658.26, 13247.5}, {7648.11, 13255}, {7640.68, 13266.9}, {7622.68, 13268.1}, {7659.96, 13268}, {7675.02, 13282.6}, {7687.19, 13291.9}, {7708.28, 13298.3}, {7720.81, 13288.5}, {7740.07, 13271.9}, {7763.22, 13291.9}, {7771.55, 13321.3}, {7751.12, 13330}, {7723.98, 13331}, {7664.75, 13354.8}, {7643.1, 13367.5}, {7610.96, 13345.1}, {7589.42, 13355.2}, {7569.57, 13339.6}, {7548.23, 13319.8}, {7569.43, 13308.8}, {7585.22, 13327.5}, {7632.92, 13405.3}, {7603.31, 13473.1}, {7579.99, 13473}, {7551.34, 13475.1}, {7543.81, 13494.6}, {7515.53, 13479.2}, {7477.84, 13479.5}, {7484.67, 13504.1}, {7465.34, 13530.4}, {7450.66, 13513.5}, {7463.23, 13497.7}, {7496.97, 13504.7}, {7516.58, 13536.8}, {7531.76, 13525.1}, {7560.73, 13526.5}, {7530.92, 13538.9}, {7515.28, 13553.8}, {7517.69, 13581.7}, {7535.47, 13596.8}, {7552.3, 13572.3}, {7567.82, 13555.2}, {7577.36, 13526.7}, {7601.54, 13509.4}, {7500.77, 13628.6}, {7506.4, 13702.9}, {7492.73, 13732.4}, {7462.42, 13759.6}, {7462.98, 13738.1}, {7494.7, 13757.5}, {7514.1, 13764}, {7506.8, 13785.1}, {7527.1, 13793.8}, {7526.09, 13805.6}, {7507.56, 13814.1}, {7487.15, 13836.4}, {7454.1, 13806.6}};
		};
		
		class SeverogradCamp : SpawnVillage {
			scope = public;
			position[] = {8512.58, 13921.9};
			locations[] = {{8502.22, 14049.1}, {8481.38, 14032.3}, {8452.77, 14021.2}, {8453.45, 14005.5}, {8428.04, 13983}, {8402.88, 13994.7}, {8423.09, 13942.1}, {8434.46, 13970.2}, {8446.13, 13950.9}, {8461.47, 13923.4}, {8480.62, 13916.7}, {8497.33, 13927.6}, {8524.55, 13941.3}, {8516.07, 13978.3}, {8497.38, 13994.7}, {8465.54, 13993.4}, {8502.27, 13998.1}, {8529.39, 14010.5}, {8550.48, 13990.4}, {8555.55, 13963.2}, {8569.71, 13935.9}, {8588, 13943.2}, {8594.59, 13963.8}, {8579.32, 13981.6}, {8556.38, 13991.4}, {8507.61, 13970.4}, {8466.21, 13960.3}};
		};
		
		class Svergino : SpawnVillage {
			scope = public;
			position[] = {9513.87, 13802.2};
			locations[] = {{9864.7, 13936.2}, {9847.38, 13958.8}, {9847.98, 13908.1}, {9827.23, 13934.3}, {9802.15, 13930.8}, {9786.34, 13929}, {9768.63, 13919.8}, {9772.82, 13898.6}, {9784.22, 13886.4}, {9793.82, 13871.2}, {9768.23, 13869.2}, {9745.45, 13869.5}, {9729.47, 13878.4}, {9728.37, 13892.5}, {9704.32, 13923.9}, {9733.05, 13932}, {9732.13, 13950.6}, {9697.59, 13953.1}, {9675.27, 13941.4}, {9720.98, 13847.7}, {9757.71, 13839.3}, {9734.42, 13815.6}, {9707.24, 13817.9}, {9695.56, 13795}, {9676.45, 13766.6}, {9300.51, 13689.4}, {9328.21, 13747.7}, {9242.15, 13649.2}, {9581.13, 13814.5}, {9635.2, 13843.9}, {9704.12, 13868.6}, {9685.65, 13859}, {9642.84, 13766.5}, {9590.93, 13754}, {9573.9, 13726.9}, {9507.94, 13719.3}, {9467.41, 13739.2}, {9466.54, 13770.2}, {9440.37, 13775.9}, {9440.51, 13813.9}, {9438.11, 13845.1}, {9466.92, 13871}, {9437.68, 13901.5}, {9436.48, 13933.8}, {9419.54, 13947.7}, {9398.94, 13935.3}, {9378.44, 13938.5}, {9369.48, 13918.4}, {9342.59, 13920.1}, {9317.83, 13931.2}, {9287.79, 13916.4}, {9250.58, 13888.6}, {9291.11, 13864.2}, {9308.55, 13853.4}, {9341.92, 13796}, {9358.49, 13720.8}, {9370.4, 13715.1}, {9389.72, 13717.4}, {9425.06, 13726.8}, {9440.58, 13692.3}, {9477.38, 13668.5}, {9424.17, 13658.3}, {9397.48, 13642.7}, {9375.37, 13664.8}, {9349.34, 13665.2}, {9346.77, 13640.1}, {9325.99, 13636.1}, {9327.43, 13612.1}, {9305.95, 13620.6}, {9288.33, 13607.2}, {9264.12, 13615.3}, {9247.76, 13601.3}, {9226.26, 13583.2}, {9209.03, 13593.3}, {9248.37, 13578.2}, {9280.89, 13577.6}, {9309.5, 13602.9}, {9323.99, 13668.3}, {9335.99, 13710.5}, {9312.13, 13719.7}};
		};
		
		class SverginoNorth : SpawnVillage {
			scope = public;
			position[] = {9427.04, 14591.8};
			locations[] = {{9600.76, 14772.9}, {9600.42, 14745.4}, {9570.54, 14756.8}, {9568.99, 14731.5}, {9594.25, 14723.2}, {9561.04, 14717.3}, {9536.79, 14719.4}, {9488.8, 14708.7}, {9479.67, 14709.6}, {9462.57, 14731.2}, {9444.43, 14722.2}, {9413.32, 14746}, {9419.12, 14732}, {9426.86, 14717.8}, {9410.73, 14704.1}, {9407.79, 14690.5}, {9414.83, 14675.1}, {9425.04, 14673.2}, {9408.35, 14658.1}, {9383.94, 14651.2}, {9376.57, 14635}, {9370.01, 14624.1}, {9398.2, 14610.7}, {9423.7, 14574.4}, {9436.72, 14605}, {9458.37, 14603.7}, {9470.75, 14590.8}, {9448.91, 14575.3}, {9441.83, 14562.9}, {9443.85, 14541.1}, {9452.84, 14534.6}, {9407.13, 14559.1}, {9392.17, 14577.9}, {9385.97, 14619.1}, {9362.64, 14628.5}, {9339.36, 14632.6}, {9329.58, 14617.5}, {9327.96, 14596.5}, {9301.38, 14607.2}, {9284.74, 14612.8}, {9262.78, 14608.1}, {9248.67, 14590.4}, {9253.24, 14556.8}, {9222.99, 14548.2}, {9203.87, 14576}, {9181.99, 14595.9}, {9157.88, 14582.5}, {9162.21, 14557.9}, {9150.04, 14533.1}, {9153.96, 14506.2}, {9155.89, 14481.9}, {9404.3, 14528}, {9348.13, 14545}, {9421.96, 14513.1}, {9302.22, 14557.3}, {9488.41, 14619.6}, {9486.48, 14669.4}, {9321.65, 14540}, {9305.44, 14530.2}};
		};
		
		class Ratnoe : SpawnVillage {
			scope = public;
			position[] = {6300.0, 12703.7};
			locations[] = {{6153.65, 12704.9}, {6244.67, 12676.6}, {6317.95, 12720.1}, {6296.8, 12696.7}, {6374.02, 12717.5}, {6398.39, 12696.2}, {6106.53, 12690.3}, {6456.45, 12722.9}, {6228.56, 12706.7}, {6200.94, 12674.4}, {6153.58, 12674.8}, {6213.62, 12664.2}, {6268.01, 12716.5}, {6373.84, 12677.3}, {6464.88, 12679.4}, {6357.1, 12706.3}, {6174.49, 12699.6}};
		};
		
		class ZaprudnoeWest : SpawnVillage {
			scope = public;
			position[] = {4274.78, 13081.6};
			locations[] = {{4134.87, 13086.7}, {4134.54, 13130.4}, {4094.71, 13099.4}, {4323.89, 13054.7}, {4241.29, 13043.3}, {4327.63, 13158.1}, {4290.28, 13107.1}, {4190.06, 13072.1}, {4100.57, 13155.6}, {4213.2, 13018.4}, {4369.26, 13054}, {4282.69, 13069.9}, {4181.06, 13133.6}, {4130.1, 13193.5}, {4127.21, 13100.3}};
		};
		
		class ZaprudnoeMid : SpawnVillage {
			scope = public;
			position[] = {4963.5, 12912.2};
			locations[] = {{4934.01, 12840.7}, {4997.78, 12795}, {5087.98, 12752}, {5022.84, 12730.1}, {5048.8, 12760.2}, {4909.73, 12888.4}, {4989.66, 13031.1}, {4989.66, 12948.6}, {4878.82, 12986.9}, {4968.35, 13075.3}, {5061.6, 12920.9}, {4965.68, 12896.4}, {4895.86, 12927.1}, {4849.5, 12866.4}, {4863.36, 12777.5}, {5047.2, 12840.3}, {4895.86, 13061.2}, {4942.96, 13003.8}, {5074.17, 13016.5}, {5035.32, 13087}};
		};
		
		class ZaprudnoeEast : SpawnVillage {
			scope = public;
			position[] = {5339.15, 12640.7};
			locations[] = {{5206.87, 12719.4}, {5228.51, 12658.4}, {5320.98, 12653.9}, {5426.56, 12709.8}, {5216.66, 12640.2}, {5280.2, 12553.5}, {5207.76, 12595.7}, {5218.31, 12681.4}, {5294.81, 12629.6}, {5386.81, 12583.8}, {5433.96, 12603}, {5439.57, 12631.6}, {5415.5, 12670.2}, {5373.44, 12477.2}, {5472.81, 12539}, {5492.81, 12592.2}, {5395.89, 12703.1}, {5402.62, 12807.3}, {5476.29, 12744.1}, {5249.37, 12713.7}};
		};
		
		class Polesovo : SpawnVillage {
			scope = public;
			position[] = {5899.59, 13320.3};
			radius = 400;
			locations[] = {{5922.21, 13462}, {5944.99, 13530.9}, {5950.17, 13592.8}, {5873.4, 13576}, {5911.79, 13612.1}, {5810.89, 13521.3}, {5815.82, 13471.3}, {5722.76, 13561.1}, {5747.34, 13591.8}, {5890.54, 13503.5}, {5896.11, 13555.6}, {5863.9, 13552.9}, {5794.43, 13583.2}, {6069.96, 13420}, {6146.26, 13357.2}, {6055.15, 13400.2}, {6062.21, 13428.9}, {5938.12, 13276.4}, {5570.9, 13171.5}, {5660.41, 13125.1}, {5626.24, 13144.2}, {5623.28, 13190.7}, {5629.66, 13086}, {6224.23, 13361.4}, {6159.77, 13324}, {6096.47, 13405.9}, {5958.75, 13504.6}, {5912.71, 13528.2}, {5945.85, 13487.2}, {5919.19, 13590.8}, {5611.6, 13103.7}, {5688.35, 13101.8}, {5674.46, 13059.5}, {5595.15, 13120.5}, {5612.52, 13167.9}};
		};
		
		class NovPetrovka : SpawnCity {
			scope = public;
			position[] = {3514.01, 12925.4};
			radius = 400;
			locations[] = {{3295.11, 13103}, {3365.05, 13135.4}, {3335.23, 13217}, {3253.15, 13174.4}, {3400.02, 13059.2}, {3457.8, 13111.5}, {3466.64, 13087.2}, {3325.29, 13025.8}, {3455.23, 12996.4}, {3402.22, 12905.5}, {3338.91, 12984.6}, {3564.18, 13058.5}, {3430.07, 13163.4}, {3546.81, 13100.2}, {3529.33, 13137}, {3415.42, 13248}, {3483.48, 13011.9}, {3295.85, 13083.7}, {3437.97, 12712.7}, {3468.21, 13051.8}, {3800.47, 13093.6}, {3881.89, 12991.4}, {3881.14, 13091.7}, {3710.13, 12942}, {3367.74, 12577.3}, {3425.9, 12583.9}, {3521.23, 12574.4}, {3547.96, 12590.1}, {3599.12, 12598.3}, {3556.42, 12573.9}, {3454.1, 12720.7}, {3465.23, 12795.6}, {3440.99, 12845.7}, {3339.52, 12836.7}, {3323.56, 12792.4}, {3187.13, 12749.4}, {3271.18, 12863.6}, {3280.29, 12884.3}, {3280.93, 12932.1}, {3296.12, 13003.3}, {3323.39, 13127.4}, {3379.27, 13102.5}, {3451.27, 13135.6}, {3314.27, 13170.8}, {3430.13, 13213.3}, {3703.99, 13094.5}, {3665.77, 13142.5}, {3733.23, 13175.2}, {3815.17, 13119.7}, {3754.37, 13023}, {3777.24, 12993}, {3828.69, 13023.5}, {3801.99, 12975}, {3883.14, 13039.4}, {3790.69, 13050.2}, {3779.39, 13106.1}, {3652.27, 13080.7}, {3733.11, 13142.8}, {3589.06, 13114.5}, {3769.59, 13227}, {3408.04, 13146.6}, {3395.66, 13171.3}, {3389.66, 13207.6}, {3344.29, 13152.7}, {3304.29, 13186.8}, {3273.92, 13210.6}, {3246.42, 13150.5}, {3293.42, 13177.8}, {3254.79, 13097.2}, {3355.29, 13082.9}, {3361.92, 12961.4}, {3434.79, 12949.3}, {3377.67, 12788.3}, {3888.85, 12856.6}, {3849.6, 12815.1}, {3925.08, 12846.4}, {3422.65, 13011.2}, {3505.33, 13050.6}, {3440.42, 13078.6}, {3384.62, 13235.6}, {3269.07, 12701.3}, {3387.42, 12716.1}, {3414.35, 12625.2}, {3392.92, 12666.9}, {3473.41, 12825.7}};
		};
		
		class Toploniki : SpawnVillage {
			scope = public;
			position[] = {2855.62, 12487};
			radius = 400;
			locations[] = {{3068.9, 12588.9}, {2964.85, 12493.6}, {2929.08, 12458.9}, {2853.21, 12372.3}, {2831.53, 12375.6}, {2823.94, 12290}, {2815.61, 12412}, {2732.89, 12190.4}, {3038.49, 12672.9}, {2989.56, 12686.5}, {2904.43, 12667.5}, {2991.3, 12634.5}, {2920.94, 12600.3}, {2883.59, 12550}, {2969.58, 12531.8}, {2896.91, 12489.3}, {2926.15, 12596.9}, {3006.06, 12560.4}, {2968.42, 12533.8}, {3100.32, 12582.4}, {2661.87, 12354.2}, {2788.96, 12177.8}, {2983.24, 12308.2}, {2989.85, 12397.4}, {2794.43, 12431.1}, {3029.91, 12714.3}, {3076.58, 12649.5}, {2961.03, 12650.3}, {2841.04, 12581.3}, {2787.1, 12570}, {2648.12, 12459.2}, {2693.37, 12483.2}, {2707.71, 12375.6}, {2740.44, 12361.1}, {2624.89, 12330.4}, {2685.69, 12337.7}, {2759.23, 12257.5}, {2778.01, 12278.5}, {2740.84, 12125.5}, {2727.31, 12103.3}, {2792.96, 12144.9}, {2893.96, 12305.8}, {2936.59, 12416.6}, {2888.31, 12409.7}, {2864.47, 12436.6}, {2931.13, 12498.1}, {2825.08, 12512.5}, {2991.29, 12515}, {2669.61, 12373.5}, {2592.31, 12360.5}, {2745.63, 12398.9}, {2792.36, 12317.3}, {2990.1, 12451.8}, {3046.85, 12549}, {3136.22, 12597}};
		};
		
		class Sinistok : SpawnVillage {
			scope = public;
			position[] = {1495.34, 11904.6};
			radius = 400;
			locations[] = {{1443.75, 11971.7}, {1497.12, 11895.9}, {1528.04, 11976.8}, {1349.15, 12023.5}, {1814.04, 12054.1}, {1432.24, 11933.3}, {1557.05, 12010.7}, {1502.85, 12080.1}, {1648.84, 12055.8}, {1586.89, 12016.6}, {1440.79, 11993}, {1207.21, 12048.1}, {1140.95, 12050.4}, {1301.76, 12030.8}, {1378.83, 11987.4}, {1281.98, 11916.2}, {1255.98, 11994.8}, {1206.29, 11983.7}, {1357.1, 12089}, {1328.53, 12088.4}, {1404.77, 12002.7}, {1355.02, 11973.1}, {1378.51, 11944.9}, {1859.8, 12000.2}, {1870.44, 11965.5}, {1881.85, 11985.2}, {1824.53, 12025.4}, {1754.75, 12046.3}, {1673.05, 11983.9}, {1527.58, 12014}, {1579.2, 12033.7}, {1534.58, 11930.9}, {1474.41, 12034.5}, {1564.67, 11982.2}, {1630.82, 12031.1}, {1558.97, 11863}};
		};
		
		class Vavilovo : SpawnTown {
			scope = public;
			position[] = {2187.22, 10918.7};
			locations[] = {{2027.6, 11362.2}, {2195.95, 11142.9}, {2399.38, 11202.3}, {2211.41, 11057.3}, {2209.03, 11027}, {2424.37, 10996.1}, {2557.61, 10995.5}, {2144.2, 10643}, {1944.92, 10716.7}, {2144.79, 10586.6}, {1910.42, 10638.3}, {1981.8, 10555.1}, {2079.43, 11317.5}, {2115.72, 11312.4}, {2178.54, 11214.2}, {2235.25, 11186.4}, {2267.37, 11226.3}, {2264.86, 11200.8}, {2337.52, 11238.3}, {2183.33, 11109.2}, {2186.04, 11079.4}, {2238, 11068.9}, {2257.7, 11036.4}, {2251.03, 11005.2}, {2191.6, 11010.6}, {2186.51, 10981.6}, {2242.77, 10977.8}, {2286.78, 10974}, {2266.92, 11023}, {2172.37, 10895.1}, {2268.83, 10910.3}, {2191.92, 10829.2}, {2158.39, 10800.6}, {1934.4, 10684.4}, {2031.19, 10656.2}, {2108.57, 10635.4}, {1951.07, 10582.2}, {1876.12, 10788.3}, {1891.27, 10718.7}, {1846.02, 10707.8}, {2445.91, 10953.4}, {2411.22, 10937.3}, {2422.44, 11023.7}, {2404.69, 11024.3}, {2336.75, 10972.8}, {2276.55, 10989.7}, {2334.09, 10955.4}, {2218.81, 10978.5}, {2170.66, 11024.9}, {2191.06, 11186.4}, {2084.76, 11304}, {2075.78, 11285.5}, {2142.28, 10863.3}, {2145.73, 10706.1}, {2071.42, 10766.5}, {2058.77, 10689.3}};
		};
		
		class Tisy : SpawnVillage {
			scope = public;
			position[] = {3556.86, 14842.9};
			locations[] = {{3521.75, 14702.2}, {3519.33, 14672.5}, {3476.5, 14752.6}, {3407.42, 14805.5}, {3423.17, 14817}, {3385.8, 14866.6}, {3692.77, 14777.1}, {3743.79, 14787.4}, {3698.69, 14902.5}, {3667.72, 14890.5}, {3695.19, 14764.7}, {3685.58, 14753.5}, {3672.32, 14774.2}, {3667.1, 14793}, {3652.36, 14814}, {3664.25, 14823.5}, {3653.93, 14839.4}, {3626.06, 14858.4}, {3628.6, 14884.8}, {3630.23, 14909.5}, {3609.77, 14928.4}, {3614.45, 14941.8}, {3631.6, 14953.6}, {3644.74, 14953}, {3667.71, 14934}, {3677.7, 14910.9}, {3694.64, 14889.3}, {3750.23, 14773.4}, {3729.43, 14809.3}, {3723.55, 14851.8}, {3706.24, 14861.2}};
		};
		
		class Staryjar : SpawnVillage {
			scope = public;
			position[] = {4969.35, 15013.1};
			locations[] = {{4820.35, 15073.6}, {5216.41, 14984.3}, {4810.74, 15028.4}, {4860.73, 15059.2}, {5186.61, 15115.8}, {5249.17, 14970.5}, {4760.62, 15056.3}, {4911.01, 14865.9}, {4764.47, 15034.6}, {5188.91, 14951.1}, {4878.34, 15000.6}, {5038.92, 15061.9}, {4936.55, 15160.3}, {4780.64, 14938.2}, {4878.18, 14975.7}, {4947.05, 15076.2}, {4987.88, 15052.1}, {5034.62, 15156.8}, {4969.91, 15103.7}, {4910.58, 15105.7}, {5181.03, 15058}, {5194.03, 15087.9}, {5132.13, 15017.7}, {5072.63, 15131.8}, {4917, 15155.8}, {4858.75, 15019.3}, {4877.82, 15014.8}, {4895.61, 15023.2}, {4907.09, 15007.9}, {4909.8, 14981.3}, {4882.68, 14979.7}, {5218.33, 15077.9}, {5096.43, 15153.2}, {4988.05, 15148.8}, {4915.75, 15059.9}, {4999.04, 15030.6}};
		};
		
		class StaryjarEast : SpawnVillage {
			scope = public;
			position[] = {5763.26, 15204.7};
			locations[] = {{5814.34, 15257.6}, {5810.79, 15242.1}, {5797.32, 15227.6}, {5771.03, 15222.1}, {5767.83, 15207.4}, {5757.39, 15196.1}, {5764.8, 15183.6}, {5781.68, 15182.5}, {5793.02, 15192}, {5805.47, 15185.8}, {5823.55, 15186.6}, {5821.72, 15199.3}, {5828.33, 15219.1}, {5784.02, 15254}, {5769.91, 15246.5}, {5744.69, 15245.6}, {5735.25, 15238.4}, {5729.83, 15242.3}, {5736.84, 15228.6}, {5721.6, 15217.5}, {5742.28, 15203.6}, {5735.73, 15192}, {5748.32, 15170.3}, {5707.28, 15158.7}, {5705.14, 15179.3}, {5696.92, 15195.4}, {5704.29, 15214.6}, {5683.04, 15227.5}};
		};
		
		class StaryjarHamlet : SpawnHamlet {
			scope = public;
			position[] = {5694.57, 14880.7};
			locations[] = {{5721.91, 14883.9}, {5702.88, 14886.8}, {5684.24, 14905.9}, {5658.57, 14883}, {5678.86, 14875}, {5680.81, 14890.9}, {5686.42, 14898.1}, {5691.48, 14876.7}, {5704.96, 14882.2}, {5695.32, 14858.7}, {5648.2, 14846.6}, {5744.45, 14846.3}, {5679.13, 14867.5}, {5673.63, 14905.1}, {5783.08, 14881.1}};
		};
		
		class Krasnoe : SpawnHamlet {
			scope = public;
			position[] = {6449.35, 14977.4};
			locations[] = {{6498.92, 14959.7}, {6469.29, 14983.1}, {6479.76, 15014.6}, {6505.36, 14992.8}, {6481.11, 14950.3}, {6486.2, 14923.7}, {6462.13, 14914.1}, {6462.83, 14895.9}, {6440.19, 14922.2}, {6412.85, 14928.2}, {6390.25, 14943.7}, {6405.44, 14958.3}, {6427.64, 14967.8}, {6408.81, 14985.8}, {6384.35, 14993}, {6384.48, 15011.3}, {6367.47, 15033.8}, {6390.95, 15039.7}, {6383.19, 14971.7}, {6377.36, 14946.3}};
		};
		
		class Kamensk : SpawnVillage {
			scope = public;
			position[] = {6653.42, 14416};
			locations[] = {{6728.81, 14242.1}, {6737.87, 14220.2}, {6744.78, 14244.4}, {6744.86, 14264}, {6750.55, 14281}, {6752.17, 14308.7}, {6730, 14313.5}, {6737.34, 14345.9}, {6748.2, 14375.9}, {6771.87, 14376}, {6803.48, 14345.4}, {6826.15, 14324.4}, {6825.18, 14357}, {6759.24, 14409.1}, {6729.69, 14402.8}, {6702.29, 14394}, {6675.94, 14378.5}, {6681.59, 14359.7}, {6684.4, 14320.3}, {6682.87, 14285.3}, {6699.21, 14283.6}, {6634.46, 14328.6}, {6640.73, 14364.2}, {6635.73, 14383.1}, {6614, 14378.4}, {6588.59, 14385.5}, {6557.78, 14373.9}, {6544.69, 14378.5}, {6529.3, 14378.9}, {6520.15, 14373.8}, {6513.64, 14400.1}, {6520.31, 14407.3}, {6522.68, 14423.9}, {6540.74, 14442.9}, {6532.11, 14457.6}, {6545.31, 14482.2}, {6555.59, 14496.1}, {6578.39, 14495.5}, {6582.88, 14481.1}, {6600.35, 14486.1}, {6610.59, 14481.7}, {6606.97, 14498.3}, {6607.05, 14537.9}, {6592.6, 14524.9}, {6633.79, 14520.1}, {6688.64, 14548.5}, {6721.53, 14550.5}, {6698.81, 14526.6}, {6678.91, 14506}, {6694.23, 14490.7}, {6671.04, 14468.3}, {6690.56, 14454.8}, {6645.15, 14393.3}, {6606.31, 14427.9}, {6641.4, 14470}, {6760.66, 14465.8}, {6687.11, 14522}, {6556.82, 14428.2}};
		};
		
		class KamenskMine : SpawnHamlet {
			scope = public;
			position[] = {7072.82, 14609.7};
			locations[] = {{7040.86, 14631.9}, {7033.8, 14606.3}, {7044.41, 14573.4}, {7039.83, 14547.7}, {7044.69, 14528.2}, {7048.4, 14494.3}, {7058.01, 14527.9}, {7079.22, 14536.5}, {7088.93, 14557.8}, {7094.39, 14580.1}, {7113.18, 14610.1}, {7094.04, 14619.6}, {7081.44, 14635.4}, {7083.03, 14657.8}, {7099.17, 14673.2}, {7067.05, 14619.8}, {7054.28, 14590.6}, {7053.85, 14568.9}};
		};
		
		class KamenskOldBase : SpawnVillage {
			scope = public;
			types[] = {"ZmbM_PatrolNormal_PautRev", "ZmbM_PatrolNormal_Autumn", "ZmbM_PatrolNormal_Flat", "ZmbM_PatrolNormal_Summer", "", "ZmbM_SoldierNormal"};
			position[] = {7892.28, 14745.3};
			locations[] = {{7885.53, 14606.9}, {7903.49, 14620.4}, {7925.64, 14666.2}, {7899.51, 14692.1}, {7917.71, 14721.4}, {7935.25, 14699.7}, {7956.45, 14664.1}, {7984.14, 14663.1}, {7994.33, 14646.2}, {8013.96, 14650.6}, {8019.2, 14628.1}, {8026.7, 14609.7}, {8050.55, 14609.8}, {8056.45, 14628.3}, {8053.68, 14649.2}, {8067.84, 14662}, {8022.07, 14660.7}, {7992.4, 14606.7}, {7972.72, 14588}, {7937.44, 14554.7}, {7886.1, 14573.9}, {7912.8, 14749}, {7920.94, 14788.1}, {7915.93, 14833.7}, {7929.43, 14843.5}, {7945.08, 14838.8}, {7959.19, 14848.5}, {7950.44, 14869.7}, {7963.77, 14825.2}, {7935.54, 14815.3}, {7894.41, 14810.3}, {7832.32, 14787.5}, {7813.6, 14766.4}, {7813.69, 14720.9}, {7785.81, 14720.2}, {7755.5, 14734.1}, {7720.58, 14777.9}, {7730.94, 14808}, {7734.07, 14827.3}, {7760.82, 14841.8}, {7724.35, 14866.8}, {7704.96, 14849.6}, {7687.25, 14836.2}, {7769.33, 14812.1}, {7858.24, 14654.6}, {7858.93, 14680.4}, {7827.16, 14682.1}, {7813.39, 14705.6}, {7792.33, 14699.2}, {7774.51, 14716.3}};
		};
		
		class Komarovo : SpawnVillage {
			scope = public;
			position[] = {3615, 2462};
			radius = 200;
			locations[] = {{3599.31, 2449.6}, {3592.23, 2436.9}, {3604.45, 2429.84}, {3616.48, 2424.3}, {3625.45, 2436.23}, {3638.6, 2436.13}, {3625.81, 2456.96}, {3639.4, 2422.95}, {3645.43, 2403.51}, {3657.08, 2406.72}, {3670.65, 2419.07}, {3679.73, 2427.58}, {3671.97, 2440.29}, {3658.95, 2448.68}, {3658.53, 2459.36}, {3631.73, 2482.67}, {3632.41, 2505.44}, {3660.35, 2529.15}, {3685.92, 2534.68}, {3701.55, 2518.87}, {3693.54, 2508.87}, {3675.05, 2510.71}, {3708.25, 2479.07}, {3716.16, 2467.23}, {3706.38, 2464.33}, {3693.45, 2462.45}, {3681.54, 2471.65}, {3673.21, 2453.35}, {3674.16, 2401.46}, {3672.56, 2385.57}, {3635.14, 2361.78}, {3612.03, 2405.78}, {3582.61, 2422.37}, {3577.33, 2443.57}, {3565.63, 2462.8}, {3540.48, 2453.9}, {3524.62, 2462.69}, {3513.39, 2453.32}, {3518.18, 2414.48}, {3500.05, 2404.68}, {3582.58, 2473.3}, {3573.32, 2513.79}, {3577.73, 2524.96}, {3564.13, 2529.59}, {3582.15, 2545.76}, {3598.1, 2561.23}, {3553.17, 2554.55}, {3558.7, 2576.62}, {3532.25, 2602.27}, {3494.48, 2578.09}, {3469.54, 2578.22}, {3452.11, 2561.07}, {3470.2, 2550.86}, {3500.49, 2526.76}, {3520.72, 2520.15}, {3537.52, 2529.93}, {3515.45, 2482.62}, {3459.39, 2455.85}, {3588.53, 2453.25}, {3614.89, 2470.18}, {3639.71, 2466.47}, {3660.7, 2481.43}, {3683.15, 2480.07}, {3701.75, 2494}, {3666.14, 2492.44}, {3657.61, 2503.63}, {3655.19, 2515.94}, {3641.43, 2522.51}, {3615.11, 2534.04}, {3597.18, 2530.48}, {3576.65, 2538.21}, {3563.75, 2504.55}, {3626.36, 2417.06}, {3636.32, 2392.16}, {3625.62, 2519.92}, {3528.14, 2548.29}, {3652, 2605.84}, {3735.3, 2553.86}, {3756.3, 2420.44}, {3568.51, 2358.14}, {3547.19, 2423.66}, {3598.43, 2500.4}, {3634.9, 2556.52}};
		};
		
		class Novoselky : SpawnVillage {
			scope = public;
			position[] = {6168, 3256};
			radius = 250;
			locations[] = {{6146.14, 3276.56}, {6141.75, 3295.13}, {6134.21, 3318.74}, {6138.55, 3336.52}, {6134.06, 3356.11}, {6140.89, 3372.58}, {6131.63, 3388.04}, {6140.44, 3404.41}, {6126.75, 3419.71}, {6123.28, 3433.49}, {6159.98, 3450.09}, {6173.43, 3433.44}, {6165.44, 3405.7}, {6176.82, 3379.15}, {6179.92, 3349.61}, {6198.03, 3332.15}, {6207.33, 3321.41}, {6200.56, 3304.43}, {6212.51, 3293.4}, {6229.68, 3297.42}, {6252.67, 3302.84}, {6260.41, 3284.94}, {6256.02, 3251.58}, {6239.04, 3248.93}, {6240.81, 3227.69}, {6262.67, 3218.82}, {6288.3, 3198.82}, {6281.87, 3179.92}, {6266.74, 3165.62}, {6277.93, 3136.85}, {6266.65, 3122}, {6244.35, 3121.36}, {6235.8, 3142.54}, {6215.86, 3147.75}, {6215.64, 3169}, {6240.67, 3184.7}, {6198.67, 3195.66}, {6178.9, 3182.96}, {6157.78, 3193.54}, {6174.46, 3199.94}, {6159.75, 3224.35}, {6170.18, 3245.4}, {6193.15, 3256.22}, {6206.64, 3240.31}, {6156.47, 3266.36}, {6099.61, 3243.77}, {6094.35, 3275.7}, {6091.89, 3291.96}, {6111.23, 3315.71}, {6081.58, 3323.9}, {6085.18, 3357.93}, {6083.82, 3388.65}, {6068.05, 3407.12}, {6041.88, 3326.82}, {6053.52, 3288.43}, {6062.56, 3260.66}, {6082.65, 3223.48}, {6086.41, 3190.5}, {6087.97, 3163.74}, {6091.51, 3119.93}, {6120.4, 3123.73}, {6140.33, 3136.99}, {6150.26, 3107.84}, {6172.16, 3109.39}, {6126.42, 3166.79}, {6144.57, 3160.72}, {6155.2, 3140.12}, {6176.61, 3141.92}, {6199.09, 3136.43}, {6223.47, 3112.49}, {6253.01, 3088.78}, {6297.27, 3110.95}, {6319.75, 3169.2}, {6348.77, 3177.5}, {6369.44, 3177.65}, {6374.72, 3157.43}, {6350.71, 3275.3}, {6361.39, 3281.17}, {6371.8, 3267.67}, {6367.72, 3255.49}, {6385.26, 3245.94}, {6386.22, 3213.08}, {6370.88, 3218.4}, {6399.27, 3220.41}, {6387.05, 3204.45}, {6382.78, 3186.56}, {6378.07, 3158.31}, {6358.71, 3146.54}, {6339.53, 3175.07}, {6295.78, 3164.9}, {6262.89, 3151.24}, {6254.74, 3222.92}, {6000.32, 3221.15}, {5989.06, 3238.95}, {5987.32, 3259.99}, {5963.78, 3238.55}, {5968.53, 3212.83}, {5973.47, 3196.58}, {5968.4, 3180.37}, {5991.56, 3165.71}, {6010.58, 3158.59}, {6030.76, 3146.9}, {6060.21, 3152.8}, {6033.79, 3207.15}, {6021.88, 3178.86}, {6002.88, 3196.43}, {6016.65, 3173.57}, {5992.53, 3199.88}, {5986.61, 3278.59}, {5999.09, 3305.88}, {6025.89, 3309.42}, {6057.4, 3332.31}, {6084.44, 3339.16}, {6105.62, 3352.42}, {6114.58, 3364.32}, {6135.05, 3363.18}, {6159.13, 3329.72}, {6167.92, 3340.8}, {6173.4, 3382.84}, {6221.32, 3352.94}, {6285.37, 3308.59}, {6311.7, 3271.45}, {6178.49, 3057.81}, {6045.01, 3114.17}, {6035.62, 3376.49}, {6306.61, 3401.98}, {6098.67, 3077.94}, {5985.31, 3327.51}, {6333.44, 3346.97}, {6220.08, 3403.32}, {6262.34, 3043.05}, {6132.87, 3245.83}, {6164.97, 3276.65}, {6134.66, 3278.45}, {6175.5, 3166.71}, {6073.79, 3143.85}, {6116.94, 3229.39}, {6224.81, 3177.75}, {6234.31, 3165.94}, {6125.68, 3257.9}, {6143.91, 3155.66}, {6115.66, 3183.15}, {6049.14, 3281.79}, {6079.96, 3304.14}, {6140.83, 3346.78}, {6139.29, 3307.22}, {6134.67, 3257.9}, {6114.38, 3215.52}, {6138.52, 3322.12}, {6176.12, 3291.2}, {6200.16, 3249.57}, {6227.44, 3152.98}, {6227.23, 3163.89}, {6239.76, 3156.62}, {6121.41, 3169.77}, {6156.34, 3147.56}, {6092.8, 3479.83}};
		};
		
		class Dubky : SpawnVillage {
			scope = public;
			position[] = {6710, 3589};
			locations[] = {{6683.51, 3591.1}, {6677.52, 3579.61}, {6667.48, 3583.76}, {6667.68, 3598.01}, {6651.5, 3595.92}, {6647.33, 3579.2}, {6633.8, 3574.27}, {6632.36, 3563.04}, {6619.13, 3563.37}, {6610.45, 3572.68}, {6608.12, 3586.01}, {6601.38, 3599.19}, {6589.29, 3604.55}, {6582.99, 3597.37}, {6578.98, 3585.14}, {6577.68, 3573.63}, {6570.28, 3566.36}, {6562.19, 3558.29}, {6557.54, 3547.74}, {6564.2, 3540.56}, {6573.48, 3539.81}, {6577.65, 3530.56}, {6571.74, 3526.04}, {6559.25, 3523.51}, {6549.07, 3515.64}, {6532.38, 3514.4}, {6516.44, 3517.57}, {6514.19, 3530.94}, {6515.91, 3547.24}, {6507.98, 3550.73}, {6497.66, 3561.71}, {6489.76, 3574.19}, {6491.39, 3583.02}, {6503.93, 3585.62}, {6515.31, 3593.59}, {6528.81, 3589.6}, {6536.68, 3579.88}, {6546.94, 3581.38}, {6552.02, 3592.18}, {6547.24, 3603.73}, {6562.06, 3605.17}, {6572.87, 3601}, {6530.39, 3630.18}, {6538.07, 3639.41}, {6554.27, 3639.63}, {6582.05, 3633.95}, {6594.41, 3642.28}, {6611.27, 3638.63}, {6626.26, 3634.21}, {6649.71, 3641.83}, {6666.28, 3630.32}, {6678.11, 3628.29}, {6688.17, 3637.8}, {6695.55, 3651.79}, {6706.74, 3661.89}, {6703.93, 3647.77}, {6720.92, 3643.24}, {6734.43, 3644.06}, {6746.04, 3661.11}, {6765.72, 3664.51}, {6780.06, 3679.4}, {6791.46, 3690.55}, {6803.54, 3685.39}, {6812.48, 3685.6}, {6820.77, 3676.13}, {6815.39, 3662.07}, {6797.35, 3656}, {6787.16, 3640.39}, {6779.36, 3628.11}, {6786.62, 3616.69}, {6797.63, 3610.62}, {6810.9, 3602.91}, {6821.39, 3598.73}, {6821.6, 3616.33}, {6829.53, 3622.23}, {6830.19, 3635.6}, {6838.96, 3629.47}, {6849.22, 3638.33}, {6858.74, 3653.3}, {6875.69, 3680.86}, {6863.61, 3690.56}, {6866.88, 3699.26}, {6878.98, 3720.13}, {6865.52, 3738.01}, {6840.99, 3738.15}, {6830.73, 3722.45}, {6815.46, 3701.45}, {6833.84, 3698.09}, {6835.38, 3682}, {6821.25, 3752.33}, {6775.05, 3735.71}, {6721.02, 3718.75}, {6691.55, 3689.7}, {6671.28, 3666.77}, {6633.13, 3665.74}, {6611.58, 3690.38}, {6587.66, 3697.73}, {6573.7, 3695.23}, {6560.8, 3679.45}, {6548.55, 3678.44}, {6532.71, 3685.72}, {6524.06, 3677.18}, {6507.1, 3643.94}, {6490.37, 3628.47}, {6499.39, 3606.76}, {6468.75, 3550.72}, {6481.77, 3530.99}, {6493.31, 3501.64}, {6630.33, 3513.15}, {6686.02, 3537.49}, {6744.04, 3507.53}, {6738.43, 3566.51}, {6734.57, 3550.94}, {6719.92, 3542.3}, {6700.85, 3533.45}, {6692.33, 3513.19}, {6673.73, 3506.91}, {6668.08, 3519.27}, {6653.54, 3538.09}, {6639.19, 3534.28}, {6629.42, 3542.14}, {6657.45, 3566.69}, {6670.63, 3557.18}, {6704.93, 3569.11}, {6752.7, 3566.74}, {6769.46, 3576.4}, {6781.84, 3555.58}, {6797.54, 3543.35}, {6812.76, 3521.84}, {6834.34, 3535.41}, {6844.68, 3518.67}, {6830.35, 3501.1}, {6800.61, 3496.41}, {6751.83, 3456.15}, {6709.85, 3428.7}, {6666.88, 3459.6}, {6587.34, 3437.75}, {6583.25, 3420.73}, {6560.61, 3422.6}, {6562.08, 3410.38}, {6581.39, 3423.27}, {6562.06, 3439.82}, {6517.65, 3467.12}, {6540.37, 3493.34}, {6542.16, 3529.5}, {6527.36, 3539.52}, {6518.95, 3561.03}, {6534.61, 3594.59}, {6527.99, 3604.02}, {6514.53, 3606.65}, {6491.6, 3615}, {6471.87, 3630.21}, {6855.52, 3461.73}, {6874.98, 3435.56}, {6881.94, 3455.42}, {6898.36, 3449.58}, {6886.8, 3473.72}, {6896.37, 3493.43}, {6866.55, 3502.47}, {6860.16, 3521.25}, {6873.96, 3538.46}, {6844.72, 3568.23}, {6838.31, 3579.09}, {6847.43, 3590.11}, {6860.68, 3587.01}, {6853.65, 3576.6}, {6864.3, 3605.5}, {6887.48, 3615.2}, {6897.89, 3620.58}, {6893.48, 3649.57}, {6886.17, 3664.8}, {6904.64, 3678.25}, {6937.52, 3682.03}, {6942.34, 3628.51}, {6932.01, 3563.94}, {6938.12, 3506.62}, {6603.22, 3746.36}, {6787.04, 3780.28}, {6687.1, 3378.63}, {6825.71, 3410.77}, {6697.81, 3760.64}, {6661.52, 3690.43}, {6602.62, 3507.76}, {6623.44, 3529.18}, {6730.53, 3586.3}, {6704.35, 3598.2}, {6715.06, 3584.51}, {6750.76, 3603.55}, {6767.41, 3611.29}, {6509.77, 3663.27}, {6900.94, 3435.78}};
		};
		
		class StarySobor : SpawnTown {
			scope = public;
			position[] = {6061, 7773};
			locations[] = {{5968.18, 7724.65}, {5995.6, 7692.52}, {6030.76, 7699.33}, {6061.9, 7690.46}, {6081.78, 7707.59}, {6096.89, 7691.4}, {6123.47, 7680.03}, {6214.52, 7631.79}, {6243.31, 7617.39}, {6284.52, 7563.89}, {6306.31, 7591.86}, {6317.28, 7679.2}, {6343.75, 7702.15}, {6292.96, 7743.38}, {6239.35, 7778.34}, {6257.19, 7735.69}, {6217.56, 7743.33}, {6255.89, 7699.96}, {6179.79, 7720.37}, {6183.78, 7797.53}, {6110.56, 7843}, {6031.96, 7881.63}, {5999.95, 7879.29}, {5944.24, 7909.77}, {5891.28, 7878.26}, {5925.48, 7814}, {5960.13, 7771.83}, {5975.83, 7804.46}, {6003.39, 7791.91}, {6019.65, 7760.66}, {6021.53, 7730.61}, {6035.32, 7765.64}, {6056.44, 7766.61}, {6053.93, 7728.65}, {6129.25, 7711.79}, {6139.31, 7736.52}, {6134.43, 7752.69}, {6105.67, 7758.58}, {6088.22, 7742.04}, {6089.81, 7787.64}, {6070.7, 7803.69}, {6056.2, 7791.59}, {6069.19, 7828.1}, {6067.34, 7845.69}, {6060.14, 7875.43}, {6023.57, 7862.99}, {6047.3, 7864.33}, {6045.32, 7838.03}, {6047.2, 7819.95}, {6019.88, 7823.02}, {6007.91, 7835.42}, {5996.25, 7918.84}, {5964.6, 7881.37}, {5971.87, 7846.81}, {6014.01, 7813.11}, {6030.5, 7793.91}, {6040.38, 7778.4}, {6089.84, 7767.52}, {6067.38, 7729.53}, {6105.41, 7722.73}, {6149.45, 7701.41}, {6071.8, 7774.67}, {5942.13, 7862.38}, {6026.37, 7846.95}, {6042.63, 7730.42}, {6066.18, 7754.41}, {6128.85, 7771.19}, {6079.4, 7819.22}, {6049.02, 7810.98}, {6004.46, 7770.58}};
		};
		
		class Kabanino : SpawnVillage {
			scope = public;
			position[] = {5340, 8582};
			locations[] = {{5320.22, 8573.73}, {5266.56, 8542.98}, {5203.19, 8564.62}, {5206.8, 8595.16}, {5194.42, 8581.43}, {5215.95, 8635.22}, {5258.33, 8636.55}, {5285.51, 8568.85}, {5321.52, 8482.42}, {5328.3, 8536.85}, {5369.09, 8512.25}, {5451.5, 8486.23}, {5468.73, 8515.12}, {5468.41, 8537.57}, {5440.02, 8558.38}, {5409.87, 8625.67}, {5369.18, 8615.24}, {5372.03, 8656.71}, {5359.43, 8681.82}, {5339.85, 8663.59}, {5316.03, 8699.05}, {5314.78, 8658.04}, {5298.95, 8640.52}, {5339.17, 8639.54}, {5338.21, 8608.48}, {5281.45, 8602.75}, {5346.27, 8552.13}, {5371.33, 8543.58}, {5395.39, 8547.41}, {5430.92, 8522.79}, {5420.25, 8550.56}, {5397.28, 8593.29}, {5395.46, 8569.72}, {5371.01, 8591.88}, {5356.79, 8586.54}, {5342.01, 8590.91}, {5343.18, 8575.04}, {5315.43, 8597.13}, {5296.88, 8624.91}};
		};
		
		class Lopatino : SpawnVillage {
			scope = public;
			position[] = {2750, 9899};
			radius = 250;
			locations[] = {{2887.65, 9695.93}, {2909.39, 9723.37}, {2884.26, 9762.26}, {2858.9, 9783.87}, {2842.88, 9765.67}, {2856.71, 9727.55}, {2838.59, 9837.24}, {2939.12, 9972.81}, {2843.33, 9908.74}, {2834.92, 9947.9}, {2808.43, 9986.06}, {2790.3, 10001.8}, {2772.12, 10030.6}, {2751.9, 10061.1}, {2735.79, 10094.7}, {2697.55, 10086.4}, {2658.65, 10073.7}, {2650.07, 10035}, {2609.48, 9971.96}, {2643.58, 9946.63}, {2668.48, 9933.08}, {2699.53, 9925.78}, {2731.46, 9862.56}, {2755.82, 9880.62}, {2732.19, 9912.35}, {2806.94, 9917.18}, {2800.45, 9962.54}, {2776.84, 9956.76}, {2784.27, 9924.07}, {2769.05, 9898.78}, {2766.01, 9934.58}, {2749.14, 9962.01}, {2768.15, 9979.81}, {2756.55, 10015.6}, {2746.01, 10039.5}, {2715.22, 10072}, {2737.21, 10007}, {2716.96, 9994.72}, {2700.52, 10053.8}, {2723.23, 10024.1}, {2680.28, 9999}, {2692.4, 9984.09}, {2677.64, 9959.28}, {2712.97, 9931.42}, {2732.16, 9972.65}, {2710.76, 9987.94}, {2681.45, 10027.1}, {2707.34, 10015.5}, {2764.05, 9908.4}, {2724.65, 9891.06}};
		};
		
		class Pustoshka : SpawnVillage {
			scope = public;
			position[] = {3085, 7909};
			radius = 350;
			locations[] = {{3012.57, 7668.79}, {3059.69, 7728.93}, {3075.33, 7781.02}, {3213.79, 7760.19}, {3144.09, 7773.49}, {3129.4, 7798.28}, {3102.45, 7824.03}, {3132.26, 7864.24}, {3139.45, 7903.38}, {3162.48, 7943.89}, {3177.09, 7988.28}, {3208.11, 8036}, {3242.51, 8084.06}, {3232.41, 8122.26}, {3080.94, 8119.15}, {3099.93, 8080.94}, {3090.77, 8055.79}, {3055.21, 8028.01}, {3027.18, 7960.04}, {2993.67, 7924.31}, {2958.01, 7892.27}, {2939.65, 7835.27}, {2940.19, 7793.32}, {2922.09, 7752.87}, {2902.66, 7725.06}, {2976.41, 7679.93}, {2994.25, 7698.21}, {3006.98, 7729.74}, {3028.47, 7751.08}, {3023.55, 7769.97}, {3069.45, 7766.23}, {3049.3, 7796.38}, {3059.69, 7818.75}, {3109.72, 7848.07}, {3107.27, 7886.29}, {3106.34, 7916.36}, {3130.77, 7940.18}, {3145.35, 7972.67}, {3150.69, 8008.89}, {3189.51, 8084.62}, {3156.36, 8069.17}, {3122.94, 8095.48}, {3092.22, 8023.28}, {3077.89, 7991.88}, {3045.82, 7989.76}, {3055.59, 7954.84}, {3075.25, 7973.74}, {3033, 7899.56}, {3001.82, 7879.44}, {2975.96, 7834.66}, {2961.27, 7776.44}, {2957.04, 7741.72}, {2959.34, 7717.25}, {2980.49, 7754.59}, {2986.34, 7805.2}, {3024.13, 7814.37}, {3054.05, 7856.94}, {3080.67, 7854.67}, {3080.67, 7908.97}, {3112.25, 7939.5}, {3124.14, 7982.94}, {3126.53, 8027.23}, {3127.34, 8060.37}, {3089.81, 8002.97}, {3101.17, 7981.27}, {3087.73, 7938.38}, {3052.78, 7880.84}, {3028.48, 7856.22}, {2996.5, 7842.54}, {3025.27, 7825.35}};
		};
		
		class Myshkino : SpawnVillage {
			scope = public;
			position[] = {1972, 7350};
			radius = 200;
			locations[] = {{1932.83, 7518.21}, {1912.89, 7491.26}, {1955.92, 7428.61}, {2007.84, 7412.8}, {2045.6, 7384.63}, {2037.8, 7345.09}, {2064.43, 7339.8}, {2091.23, 7317.35}, {2065.11, 7301.09}, {2064.85, 7269.49}, {2034.46, 7251.39}, {1980.32, 7262.29}, {1943.52, 7280.15}, {1930.31, 7311.2}, {1926.92, 7344.46}, {1931.6, 7370.88}, {1928.31, 7395.24}, {1982.36, 7402.14}, {1999.15, 7375.6}, {2021.87, 7361.04}, {1990.72, 7352.04}, {2020.56, 7330.12}, {2045.44, 7319.2}, {2031.62, 7291.14}, {2034.3, 7270.23}, {2007.21, 7276.5}, {1986.75, 7311.69}, {1959.11, 7349.32}, {1957.26, 7318.17}, {2013.73, 7302.31}};
		};
		
		class Sosnovka : SpawnVillage {
			scope = public;
			position[] = {2528, 6355};
			locations[] = {{2401.27, 6395.17}, {2411.34, 6362.04}, {2387.68, 6344.58}, {2433.51, 6352.42}, {2449.85, 6371.23}, {2476.78, 6403.94}, {2496.96, 6407.83}, {2505.1, 6432.4}, {2530.25, 6427.47}, {2533, 6448.12}, {2543.57, 6463.76}, {2557.89, 6445.82}, {2569.56, 6466.57}, {2564.76, 6409.02}, {2593.93, 6382.63}, {2600.8, 6345.14}, {2588.55, 6308.96}, {2550.17, 6291.8}, {2555.87, 6266.28}, {2532.63, 6276.37}, {2506.85, 6266.02}, {2507.46, 6293.92}, {2492.65, 6335.05}, {2468.71, 6358.45}, {2489.19, 6372.58}, {2517.32, 6397.83}, {2541.22, 6395.84}, {2557.73, 6371.12}, {2578.82, 6359.72}, {2566.78, 6330.47}, {2553.07, 6325.48}, {2532.36, 6320.18}, {2520.21, 6340.02}, {2545.21, 6361.91}, {2533.7, 6383.04}, {2511.78, 6303.45}};
		};
		
		class Rogovo : SpawnVillage {
			scope = public;
			position[] = {4746, 6769};
			locations[] = {{4798.66, 6616.77}, {4717.43, 6656.69}, {4699.54, 6685.65}, {4741.01, 6710.78}, {4732.42, 6745.64}, {4689.94, 6743.58}, {4644.63, 6748.25}, {4652.11, 6778.48}, {4603.84, 6803.35}, {4641.42, 6808.97}, {4649.22, 6842.36}, {4687.35, 6827.28}, {4702.33, 6794.9}, {4688.64, 6845.01}, {4672.41, 6883.86}, {4717.11, 6866.08}, {4745.69, 6864.84}, {4791.21, 6842.62}, {4823.14, 6807.43}, {4807.79, 6773.69}, {4790.19, 6751.57}, {4763.07, 6766.03}, {4786.46, 6779.47}, {4773.13, 6804.4}, {4749.52, 6790.47}, {4769.53, 6828.87}, {4742.49, 6823.95}, {4796.88, 6812.7}, {4722.48, 6842.01}, {4721.43, 6810.03}, {4731.22, 6768.38}, {4677.72, 6801.64}};
		};
		
		class Pogorevka : SpawnVillage {
			scope = public;
			position[] = {4470, 6426};
			locations[] = {{4362.32, 6403.51}, {4304.2, 6406.33}, {4339.93, 6412.22}, {4337.11, 6498.92}, {4369.86, 6493.32}, {4390.65, 6481.16}, {4389.24, 6492.79}, {4423.99, 6520.34}, {4460.3, 6496.58}, {4473.28, 6473.22}, {4517.53, 6492.07}, {4527.67, 6462.17}, {4622.81, 6389.42}, {4563.53, 6377.44}, {4530.81, 6423.42}, {4501.15, 6406.21}, {4489.57, 6404.61}, {4467.5, 6385.39}, {4442.74, 6405.63}, {4394.77, 6342.02}, {4401, 6399.87}, {4430.09, 6423.2}, {4439.98, 6426.98}, {4445.2, 6417.7}, {4453.6, 6454.98}, {4433.65, 6456.3}, {4471.79, 6433.79}, {4481.14, 6426.94}, {4484.32, 6418.56}, {4506.94, 6434.2}, {4497.97, 6457.29}, {4488.27, 6475.45}, {4508.89, 6453.9}, {4448.74, 6335.33}, {4518.8, 6340.21}, {4534.73, 6378.42}, {4537.86, 6382.07}, {4534.7, 6408.56}, {4539.56, 6412.3}, {4583.45, 6497.52}, {4525.38, 6535.64}, {4498.46, 6488.08}, {4483.57, 6450.76}, {4451.72, 6433.97}, {4455.71, 6424.18}, {4417.87, 6403.63}};
		};
		
		class NovySobor : SpawnVillage {
			scope = public;
			position[] = {7091, 7688};
			locations[] = {{7023.92, 7948.83}, {6926.13, 7968.01}, {6901.37, 7941.98}, {6893.73, 7933.6}, {6897.58, 7922.02}, {6893.96, 7913.34}, {6915.29, 7848.52}, {6959.85, 7860.7}, {6947.89, 7842.98}, {6928.88, 7809.1}, {6924.08, 7803.85}, {6852.24, 7730.31}, {6843.16, 7662.78}, {6858.27, 7615.4}, {6915.52, 7582.6}, {7055.22, 7570.67}, {7076.07, 7586.41}, {7117.72, 7551.53}, {7158.78, 7484.11}, {7203.11, 7478.17}, {7249.98, 7537.49}, {7223.62, 7587.43}, {7218.61, 7604.57}, {7320.73, 7680.79}, {7354.9, 7786.82}, {7352.99, 7794.79}, {7304.66, 7829.98}, {7200.23, 7818.21}, {7187.4, 7819.61}, {7057.62, 8010.88}, {7007.48, 7825.77}, {7027.6, 7771.87}, {7026.86, 7732.29}, {7041.29, 7729.87}, {7083.1, 7734.76}, {7115.16, 7745.17}, {7120.77, 7737.58}, {7147.49, 7745.16}, {7192.37, 7737.03}, {7194.41, 7728.72}, {7205.59, 7726.08}, {7231.42, 7739.66}, {7260.45, 7753.96}, {7237.33, 7714.06}, {7217.94, 7682.19}, {7198.13, 7656.26}, {7211.94, 7641.52}, {7186.75, 7637.99}, {7171.6, 7649.16}, {7126.25, 7642.24}, {7113.31, 7609.87}, {7100.26, 7596.75}, {7045.12, 7639.86}, {7068.24, 7644.12}, {7093.05, 7652.89}, {7088.3, 7658.54}, {7093.67, 7676.47}, {7105.44, 7688.38}, {7112.04, 7693.5}, {7122.27, 7705.12}, {7128.47, 7720.82}, {7123.28, 7696.63}, {7147.99, 7682.43}, {7174.91, 7722.02}, {7202.02, 7687.71}, {7102.74, 7627.73}, {7077.35, 7653.09}, {7038.76, 7681.33}, {7013.83, 7682.92}, {6990.41, 7715.02}, {6986.23, 7723.41}, {6958.23, 7774.58}, {6935.2, 7784.26}, {6932.46, 7763.89}, {6933.86, 7754.78}, {6953.68, 7737.61}, {6953.7, 7702.22}, {6984.27, 7682.58}, {6953.66, 7677.52}, {6925.22, 7668.36}, {6919.46, 7675.93}, {6918.13, 7706.15}, {6921.11, 7728.09}, {6909.47, 7755.26}, {6887.51, 7763.44}, {6856.94, 7786.45}, {6848.86, 7787.47}, {6770.5, 7751.86}, {6812.21, 7687.66}, {6942.58, 7654.9}, {7006.49, 7635.33}};
		};
		
		class Vyshnoye : SpawnVillage {
			scope = public;
			position[] = {6558, 6125};
			locations[] = {{6570.44, 6268.77}, {6557.58, 6229.95}, {6490.92, 6219.25}, {6436.58, 6199.03}, {6437.52, 6175.66}, {6464.32, 6141.73}, {6470.49, 6138.58}, {6480.66, 6158.9}, {6494.05, 6170.67}, {6535.1, 6120.13}, {6515.84, 6109.55}, {6544.03, 6097.73}, {6542.33, 6085.29}, {6561.25, 6033.8}, {6611.01, 6002.27}, {6611.41, 6023.35}, {6601.7, 6045.25}, {6592.09, 6079.54}, {6556.92, 6090.21}};
		};
		
		class MilBase1 : SpawnHamlet {
			scope = public;
			position[] = {4529, 8300};
			types[] = {"ZmbM_PatrolNormal_PautRev", "ZmbM_PatrolNormal_Autumn", "ZmbM_PatrolNormal_Flat", "ZmbM_PatrolNormal_Summer", "", "ZmbM_SoldierNormal"};
			locations[] = {{4534.43, 8277.81}, {4519.42, 8284.22}, {4496.61, 8295.67}, {4475.38, 8317.53}, {4517.85, 8324.58}, {4535.85, 8324.52}, {4556.48, 8337.62}, {4567.7, 8248}, {4582.82, 8236.62}, {4582.76, 8314.98}};
		};
		
		class NWAirfield : SpawnCity {
			scope = public;
			position[] = {4716, 10071};
			radius = 500;
			types[] = {"ZmbM_PatrolNormal_PautRev", "ZmbM_PatrolNormal_Autumn", "ZmbM_PatrolNormal_Flat", "ZmbM_PatrolNormal_Summer", "", "ZmbM_SoldierNormal"};
			locations[] = {{4944.91, 9963.12}, {4929.43, 10027.6}, {4895.79, 10075.1}, {4829.71, 10072.4}, {4830.28, 10106.9}, {4792.44, 10151}, {4765.73, 10177.5}, {4751.15, 10202.7}, {4730.01, 10212.8}, {4712.91, 10205.2}, {4707.37, 10220}, {4713.66, 10225.9}, {4729.44, 10228.8}, {4733.87, 10220.8}, {4749.29, 10226.7}, {4763.58, 10250.8}, {4777.69, 10244.7}, {4774.81, 10228}, {4802.53, 10236.9}, {4820.48, 10239}, {4807.27, 10254.8}, {4795.99, 10277.1}, {4773.71, 10273.2}, {4769.03, 10269.1}, {4753.4, 10263.2}, {4737.25, 10264}, {4732.89, 10291.6}, {4719.21, 10294.3}, {4721.05, 10314}, {4724.52, 10321.6}, {4752.12, 10317.7}, {4774.61, 10327.9}, {4752.41, 10330.4}, {4744.16, 10342.9}, {4724.9, 10340.1}, {4728.85, 10349.7}, {4715.86, 10369.1}, {4707.11, 10360.7}, {4697.06, 10358.6}, {4671.74, 10331.8}, {4676.6, 10394.1}, {4685.36, 10407.6}, {4681.67, 10439.1}, {4688.84, 10451.2}, {4667.82, 10460.9}, {4650.33, 10449.3}, {4615.87, 10340.2}, {4625.45, 10265.1}, {4588.92, 10184.2}, {4646.67, 10143.7}, {4627.65, 10065.6}, {4554.17, 9986.74}, {4528.96, 9935.19}, {4507.56, 9910.64}, {4522.3, 9898.59}, {4538.63, 9875.67}, {4607.48, 9744.17}, {4613.86, 9704.05}, {4617.73, 9691.3}, {4639.2, 9670.36}, {4620.05, 9640.24}, {4595.5, 9603.62}, {4599.64, 9581.84}, {4605.06, 9570.51}, {4633.66, 9582.17}, {4644.14, 9591.92}, {4657.73, 9582.57}, {4672.35, 9597.48}, {4667.17, 9605.38}, {4657.82, 9608.06}, {4692.21, 9597.85}, {4705.37, 9630.55}, {4735.88, 9656.74}, {4734.9, 9696.57}, {4687.52, 9722.2}, {4678.47, 9767.64}};
		};
		
		class NWAFNorth : SpawnCity {
			scope = public;
			position[] = {4304, 10830};
			radius = 400;
			types[] = {"ZmbM_PatrolNormal_PautRev", "ZmbM_PatrolNormal_Autumn", "ZmbM_PatrolNormal_Flat", "ZmbM_PatrolNormal_Summer", "", "ZmbM_SoldierNormal"};
			locations[] = {{4323.03, 10823.7}, {4456.31, 10737.7}, {4544.83, 10631.6}, {4570.57, 10620.6}, {4592.41, 10631.5}, {4607.94, 10611.5}, {4584.81, 10579.6}, {4566.9, 10652.4}, {4612.3, 10667.3}, {4648.7, 10697.2}, {4596.31, 10715.4}, {4544.26, 10721.8}, {4529.89, 10699.5}, {4501.12, 10761.8}, {4496.05, 10763.9}, {4492.12, 10793.1}, {4496.6, 10816.5}, {4487.95, 10831.1}, {4458.6, 10827.6}, {4459.08, 10824.3}, {4543.91, 10903.1}, {4544.3, 10907.9}, {4547.73, 10905.7}, {4371.19, 10828.1}, {4306.78, 10674.3}, {4258.52, 10465}, {4195.41, 10473.6}, {4204.8, 10595}, {4227.5, 10642.3}, {4114.81, 10707.5}, {4109.28, 10725.3}, {4087.91, 10728.6}, {4104.72, 10750.7}, {4098.97, 10752.9}, {4040.64, 10721.5}, {4035.56, 10773.2}, {4071.69, 10780.4}, {4080.42, 10793.4}, {4086.66, 10795.5}, {4137.4, 10781.9}, {4218.14, 10763.7}, {4233.88, 10822.8}, {4260.49, 10856.4}, {4326.91, 10948.4}, {4331.7, 10971.9}, {4308.26, 10980.4}, {4313.87, 10993.3}, {4327.12, 10996.7}, {4270.71, 11006.4}, {4264.23, 11058.7}, {4248.65, 11070.5}, {4238.49, 11074.5}, {4210.39, 11076.6}, {4181.48, 11064.4}, {4195.23, 11039.7}, {4201.23, 11020.8}, {4176.84, 10994.8}, {4159.15, 11015.2}, {4160.7, 11043.6}, {4163.93, 11058.3}, {4152.34, 11079.5}, {4161.22, 11092.7}, {4154.21, 11110.9}, {4157.54, 11138.9}, {4158.8, 11140.7}, {4205.97, 11169}, {4216.16, 11151.1}, {4194.98, 11119.6}, {4136.69, 11120.2}, {4124.75, 11112.2}, {4123.72, 11111.6}, {4114.06, 11095.3}, {4112.41, 11079.9}, {4121.27, 11069.1}, {4124.83, 11057.8}, {4121.85, 11046.1}, {4128.25, 11030.7}, {4105.75, 11017.7}, {4092.79, 11035.5}, {4074.15, 11042.8}, {4082.41, 11047.5}, {4086.97, 11055.2}, {4092.75, 11073}, {4069.32, 11061.1}, {4068.13, 11061}, {4067.44, 11061}, {4063.22, 11077.7}, {4082.46, 11098.4}, {4091.35, 11136.7}, {4119.16, 11173.4}, {4120.98, 11171.7}, {4133.11, 11178.7}, {4138.85, 11156.7}, {4022.61, 11054}, {3981.8, 10952.1}, {3991.01, 10855}, {3951.49, 10794.1}, {4063.96, 10775.3}, {4352.64, 10560.4}, {4451.45, 10540.5}, {4483.08, 10525.9}, {4553.54, 10541.6}};
		};
		
		class Grishino : SpawnTown {
			scope = public;
			position[] = {5988, 10280};
			radius = 180;
			locations[] = {{6027.96, 10263}, {6161.98, 10308.7}, {6154.32, 10335.6}, {6059.76, 10436.8}, {6042.48, 10443.4}, {6006.85, 10362.4}, {5985.71, 10356.5}, {5980.13, 10320.1}, {5950.05, 10326.6}, {5946.7, 10318}, {5958.09, 10304.9}, {5946.73, 10272.8}, {5884.5, 10237.1}, {5879.67, 10197.7}, {5909.92, 10123.8}, {5945.51, 10164.8}, {5959.84, 10138.5}, {5947.84, 10132.6}, {5990.61, 10235.5}, {6047.14, 10306.7}, {6024.71, 10326.6}, {5995.1, 10322.9}, {5995.52, 10336.4}, {5962.1, 10383.5}, {5977.29, 10391.2}, {5933.19, 10412.1}, {5910.03, 10383.9}, {5914.34, 10371.7}, {5894.04, 10327.4}, {5930.59, 10307}};
		};
		
		class GreenMountain : SpawnHamlet {
			scope = public;
			position[] = {3706, 5991};
			locations[] = {{3711.76, 5996.63}, {3716.06, 6003.94}, {3728.65, 6025.37}, {3727.18, 5977.82}, {3713.46, 5968.24}, {3696.5, 5962.96}, {3679.01, 5970.83}, {3672.64, 6003.87}, {3687.23, 5999.04}, {3695.51, 5983.65}, {3701.12, 5982.78}};
		};
		
		class Zelenogorsk : SpawnLargeCity {
			scope = public;
			position[] = {2731, 5206};
			radius = 500;
			locations[] = {{2749.51, 5238.93}, {2756.67, 5244.39}, {2737.44, 5265.83}, {2747.11, 5276.38}, {2758.23, 5287.12}, {2746.23, 5332.74}, {2757.21, 5351.17}, {2773.01, 5362.39}, {2788.82, 5375.67}, {2791.57, 5377.78}, {2812.48, 5398.72}, {2835.72, 5413.61}, {2851.48, 5447.35}, {2842.26, 5482.84}, {2927.95, 5459.52}, {2946.23, 5453.42}, {2966.03, 5467.4}, {3019.01, 5423.82}, {2990.4, 5384.01}, {2964.12, 5395.34}, {2947.41, 5408.75}, {2929.16, 5383.13}, {2907.06, 5284.45}, {2901.12, 5273.68}, {2872.73, 5258.58}, {2809.01, 5252.51}, {2784.62, 5259.42}, {2798.16, 5199.56}, {2803.05, 5145.12}, {2757.92, 5062.42}, {2739.99, 5051.98}, {2711.89, 5068.48}, {2664.73, 5069.72}, {2652.34, 5094.34}, {2604.19, 5082.33}, {2601.09, 5080.41}, {2594.69, 5078.83}, {2570.97, 5070.73}, {2533.82, 5011.71}, {2533.7, 5043.93}, {2545.63, 5051.24}, {2530.62, 5063.45}, {2531.17, 5080.52}, {2489.79, 5075.27}, {2483.34, 5097.03}, {2550.14, 5113.57}, {2554.13, 5111.06}, {2572.12, 5103.87}, {2578.2, 5108.02}, {2596.48, 5128.51}, {2657.32, 5142.92}, {2675.35, 5129.27}, {2682.22, 5129.35}, {2714.55, 5103.89}, {2741.26, 5138.42}, {2725.33, 5159.54}, {2692.41, 5174.15}, {2666.23, 5195.33}, {2669.71, 5210.85}, {2696.99, 5187.84}, {2718.35, 5181.67}, {2721.64, 5184.78}, {2712.47, 5233.4}, {2710.11, 5278.4}, {2713.93, 5285.83}, {2767.45, 5324.96}, {2785.56, 5334.35}, {2788.14, 5329.23}, {2825.96, 5346.14}, {2776.9, 5424.01}, {2775.67, 5440.7}, {2756.47, 5441.14}, {2747.86, 5448.84}, {2741.38, 5447.76}, {2725.82, 5446.51}, {2719.04, 5470.71}, {2670.98, 5504.63}, {2683.26, 5612.75}, {2681.69, 5605.02}, {2693.84, 5589.5}, {2625.99, 5541.16}, {2505.51, 5557.51}, {2494.07, 5547.63}, {2543.56, 5501.24}, {2568.62, 5480.58}, {2667.57, 5443.37}, {2686.98, 5450.66}, {2747.52, 5386.03}, {2774.15, 5314.34}, {2844.35, 5280.26}, {2885.36, 5285.54}, {2964.53, 5361.12}, {2999.08, 5363.3}, {2992.44, 5413.66}, {3017.6, 5452.85}, {2985.8, 5545.33}, {2993.13, 5588.91}, {2954.59, 5574.21}, {2930.76, 5565.04}, {2807.46, 5494.7}, {2768.23, 5354.34}, {2809.9, 5194.34}, {2609.09, 4972.3}, {2578.91, 4877.54}, {2603.64, 4849.56}, {2269.68, 5142.97}, {2255.49, 5147.62}, {2246.08, 5139.71}, {2240.8, 5141.78}, {2270.21, 5243.9}, {2269.17, 5341.52}};
		};
		
		class Drozhino : SpawnHamlet {
			scope = public;
			position[] = {3369, 4928};
			locations[] = {{3368.96, 4924.99}, {3373.87, 4938.21}, {3336.13, 4936.81}, {3298.67, 4939.61}, {3310.76, 4889.94}, {3347.84, 4882.24}, {3401.89, 4899.28}, {3464.33, 4939.91}};
		};
		
		class Kozlovka : SpawnVillage {
			scope = public;
			position[] = {4420, 4643};
			locations[] = {{4422.19, 4670.93}, {4440.06, 4654.86}, {4457.14, 4634.09}, {4482.16, 4612.34}, {4537.37, 4556.25}, {4532.52, 4559.25}, {4521.38, 4602.39}, {4474.72, 4649.01}, {4368.54, 4709.23}, {4357.42, 4668.42}, {4369.96, 4650.47}, {4382.49, 4624.34}, {4375.25, 4603.53}, {4324.83, 4618.4}, {4388.07, 4675.32}, {4549.16, 4633.23}};
		};
		
		class Pulkovo : SpawnHamlet {
			scope = public;
			position[] = {4911, 5611};
			locations[] = {{4935.14, 5608.47}, {4872.1, 5602.87}, {4874.62, 5637.33}, {4876.98, 5642.12}, {4871.63, 5673.15}, {4875.7, 5693.64}};
		};
		
		class Nadezhdino : SpawnVillage {
			scope = public;
			position[] = {5836, 4769};
			radius = 200;
			locations[] = {{5836.38, 4769.28}, {5845.45, 4962.91}, {5830.87, 4922.77}, {5848.56, 4909.76}, {5909.7, 4905.21}, {5896.01, 4878.24}, {5896.94, 4869.82}, {5911.52, 4839.89}, {5880.62, 4853}, {5860.82, 4854.35}, {5879.94, 4828.56}, {5884.8, 4792.75}, {5901.44, 4779.99}, {5898.24, 4749.98}, {5866.73, 4747.6}, {5838.91, 4740.52}, {5830.09, 4715.32}, {5825.25, 4694.03}, {5855.99, 4686.86}, {5864.89, 4666.68}, {5871.04, 4668.74}, {5884.7, 4613.03}, {5850.72, 4571.2}, {5802.19, 4591.75}, {5758.4, 4585.09}, {5758.85, 4587.21}, {5760.61, 4588.6}, {5778.99, 4676.29}, {5793.62, 4743.9}, {5814.09, 4787.43}, {5849.27, 4868.36}, {5858.63, 4895.75}, {5877.15, 4875.96}, {5854.61, 4818.23}};
		};
		
		class Zub : SpawnHamlet {
			scope = public;
			position[] = {6540, 5596};
			locations[] = {{6540.47, 5596.72}, {6554.22, 5587.75}, {6580.79, 5609.28}, {6560.11, 5620.02}, {6555.25, 5622.31}, {6524.79, 5609.29}, {6525.29, 5588.9}, {6527.89, 5585.65}};
		};
		
		class Mogilevka : SpawnVillage {
			scope = public;
			position[] = {7549, 5168};
			radius = 180;
			locations[] = {{7474.22, 5013.39}, {7528.38, 5004.14}, {7551.9, 5075.53}, {7553.4, 5075.23}, {7534.13, 5085.1}, {7558.6, 5114.12}, {7541.12, 5123.6}, {7550.93, 5140.38}, {7540.07, 5146.85}, {7536.18, 5150.48}, {7562.87, 5164.26}, {7581.11, 5182.29}, {7619.8, 5146.39}, {7650.8, 5156.73}, {7644.3, 5174.49}, {7646.38, 5180.19}, {7718.09, 5216.71}, {7706.13, 5237.68}, {7658.34, 5263.33}, {7595.41, 5265.2}, {7586.03, 5261.83}, {7548.45, 5269.9}, {7530.58, 5213.99}, {7509.82, 5188.29}, {7503.83, 5162.11}, {7494.78, 5132.91}, {7490.13, 5133.96}, {7425.61, 5158.87}, {7428.44, 5157.06}, {7431.75, 5155.75}, {7412.27, 5070.14}, {7504.32, 5089.2}, {7499.22, 5102.2}, {7524.34, 5105.14}, {7578.17, 5104.02}, {7592.39, 5120.64}, {7580.75, 5145.59}, {7583.96, 5156.37}, {7595.84, 5167.66}, {7597.27, 5171.82}, {7558.29, 5212.04}, {7445.86, 5309.17}, {7449.03, 5307.92}, {7458.95, 5289.4}, {7461.98, 5279.79}, {7453.8, 5241.01}, {7460.48, 5237.85}, {7524.81, 5191.72}, {7525.78, 5188.42}, {7536.83, 5183.28}, {7537.23, 5177.69}, {7542.17, 5170.58}};
		};
		
		class Bor : SpawnVillage {
			scope = public;
			position[] = {3339, 3940};
			radius = 200;
			locations[] = {{3339.05, 3940.59}, {3326.16, 3937.35}, {3312.22, 3942.04}, {3305.62, 3879.07}, {3373.12, 3862.77}, {3381.12, 3862.32}, {3424.49, 3901.42}, {3465.09, 3794.31}, {3474.53, 3808.95}};
		};
		
		class Pavlovo : SpawnVillage {
			scope = public;
			position[] = {1692, 3842};
			radius = 200;
			locations[] = {{1697.1, 3819.66}, {1696.18, 3810.24}, {1710.57, 3649.83}, {1715.28, 3670.43}, {1677.34, 3722.15}, {1674.04, 3741.89}, {1646.91, 3759.68}, {1656.54, 3793.09}, {1661.39, 3798.79}, {1648.94, 3816.12}, {1653.67, 3833.7}, {1669.56, 3828.89}, {1690.59, 3864.75}, {1708.42, 3892.59}, {1711.76, 3895.95}, {1748.35, 3935.12}, {1728.75, 3995.34}, {1728.32, 4004.82}, {1724.91, 4014.95}, {1692.39, 4036.39}, {1642.63, 4017.92}, {1643.83, 3981.58}, {1654.05, 3961.32}, {1635.25, 3919.67}, {1640.96, 3886.37}, {1652.58, 3865.14}, {1666.21, 3856.85}, {1595.57, 3825.68}, {1598.04, 3813.84}, {1629.64, 3793.03}, {1718.41, 3819.04}, {1721.26, 3818.02}, {1723.64, 3816.45}, {1673.43, 3754.88}};
		};
		
		class MilBase2 : SpawnTown {
			scope = public;
			position[] = {2135, 3347};
			radius = 180;
			types[] = {"ZmbM_PatrolNormal_PautRev", "ZmbM_PatrolNormal_Autumn", "ZmbM_PatrolNormal_Flat", "ZmbM_PatrolNormal_Summer", "", "ZmbM_SoldierNormal"};
			locations[] = {{2129.79, 3347.79}, {2126.8, 3345.21}, {2138.85, 3326.17}, {2178.91, 3295.36}, {2184.16, 3293.88}, {2130, 3366.22}, {2192.52, 3281.64}, {2104.3, 3319.03}, {2209.06, 3261.11}, {2141.51, 3288.01}, {2131.34, 3291.35}, {2081.22, 3293.88}, {2075.59, 3295.39}, {2045.46, 3326.08}, {2104.02, 3365.4}, {2116.19, 3388.65}, {2131.72, 3393.96}, {2138.9, 3395.46}, {2199.56, 3392.78}, {2196.59, 3373.33}, {2195.46, 3365.26}, {2180.17, 3367.26}, {2166.85, 3368.99}, {2225.28, 3384.56}, {2227.62, 3339.56}, {2121.17, 3360.01}, {2139.01, 3310.63}, {2114.15, 3289.89}, {2113.27, 3380.47}, {2153.05, 3344.82}, {2104.5, 3346.12}};
		};
		
		class MyshkinoBase : SpawnCity {
			scope = public;
			position[] = {1126, 7147};
			radius = 180;
			types[] = {"ZmbM_PatrolNormal_PautRev", "ZmbM_PatrolNormal_Autumn", "ZmbM_PatrolNormal_Flat", "ZmbM_PatrolNormal_Summer", "", "ZmbM_SoldierNormal"};
			locations[] = {{1200.87, 7082.72}, {1202.46, 7137.56}, {1188.08, 7251.5}, {1215.79, 7216.36}, {1227.51, 7118.93}, {1166.23, 7068.35}, {1077.77, 7089.64}, {1153.97, 7186.01}, {1152.91, 7117.86}, {1081.5, 7123.72}, {1156.1, 7105.08}, {1123.6, 7107.75}, {1057.52, 7180.69}, {1153.44, 7190.8}, {1159.83, 7251.5}, {1133.19, 7247.24}, {1120.93, 7269.6}, {1099.08, 7244.05}, {1074.57, 7268.01}, {1128.39, 7294.09}, {1054.32, 7279.72}, {1149.71, 7312.73}, {1093.48, 7167.8}, {1120.31, 7129.69}, {1083.01, 7212.62}, {1194.93, 7178.69}, {1068.33, 7115.87}, {1126.18, 7062.68}, {1085.94, 7312.71}, {1052.4, 7228.53}, {1224.42, 7131.16}, {1228.68, 7255.35}, {1163.93, 7043.33}};
		};
		
		class Kamenka : SpawnVillage {
			scope = public;
			position[] = {1912, 2186};
			radius = 250;
			locations[] = {{1871.07, 2127.05}, {1845.76, 2136.94}, {1715.65, 2189.46}, {1667.54, 2219.01}, {1706.65, 2227.78}, {1716.84, 2235.87}, {1753.57, 2217.72}, {1784.72, 2191.61}, {1831.73, 2201.7}, {1883.39, 2238.42}, {1887.51, 2236.61}, {1904.17, 2231.17}, {1911.22, 2233.09}, {1907.58, 2256.08}, {1900.33, 2275.44}, {1932.35, 2267.87}, {1949.01, 2260.96}, {1950.66, 2251.3}, {1933.92, 2216.71}, {1929.97, 2201.98}, {2017.73, 2240.48}, {2034.58, 2224.63}, {2036.83, 2211.73}, {1971.32, 2209.2}, {1955.42, 2338.25}, {1782.04, 2338.69}, {1754.55, 2325.95}, {1799.52, 2256.49}, {1827.8, 2230.71}};
		};
		
		class ChernoWest : SpawnVillage {
			scope = public;
			position[] = {5698, 2523};
			radius = 400;
			locations[] = {{5696.22, 2525.84}, {5692.13, 2527.68}, {5675.8, 2508.27}, {5652.26, 2535.5}, {5651.64, 2549.01}, {5642.52, 2555.33}, {5645.32, 2597.72}, {5616.24, 2604.43}, {5573.42, 2617.06}, {5574.79, 2627.66}, {5604.75, 2632.18}, {5617.88, 2645.38}, {5621.5, 2651.36}, {5590.56, 2687.96}, {5590.96, 2694.32}, {5549.66, 2713.59}, {5535.92, 2693.07}, {5531.37, 2692.1}, {5510.64, 2712.45}, {5458.42, 2710.35}, {5450.17, 2738.08}, {5422.17, 2780.98}, {5369.31, 2770.97}, {5368.23, 2769.12}, {5359.1, 2731.46}, {5413.37, 2650.25}, {5415.81, 2648.58}, {5421.13, 2649.56}, {5446.55, 2666.46}, {5469.94, 2648.85}, {5474.05, 2645.71}, {5513.59, 2621.49}, {5515.05, 2617.69}, {5505.61, 2583.77}, {5504.96, 2581.15}, {5556.53, 2532.16}, {5558.97, 2528.24}, {5596.4, 2485.33}, {5606.58, 2495.38}, {5609.77, 2496.92}, {5614.79, 2500.99}, {5635.4, 2529.97}, {5638.06, 2473.71}, {5635.92, 2469.94}, {5638.34, 2464.42}, {5650.01, 2462.89}, {5654.36, 2461.71}, {5646.98, 2438.29}, {5622.24, 2442.83}, {5655.67, 2427.86}, {5661.72, 2427.03}, {5642.2, 2383.13}, {5642.57, 2380.76}, {5657.92, 2347.19}, {5661.29, 2345.92}, {5686.97, 2317.64}, {5697.57, 2324.28}, {5723.02, 2310.2}, {5721.84, 2306.36}, {5724.13, 2303.71}, {5743.8, 2311.83}, {5766.41, 2340.21}, {5761.56, 2377.73}, {5804.75, 2385.2}, {5788.53, 2422.77}, {5788.42, 2426.19}, {5745.11, 2448.66}, {5730.82, 2448.16}, {5727.67, 2446.85}, {5698.79, 2460.98}, {5687.64, 2461.4}, {5692.83, 2496.48}, {5722.13, 2481.03}, {5735.76, 2488.42}, {5766.52, 2487.78}, {5768.89, 2487.91}, {5770.86, 2488.16}, {5775.17, 2521.31}, {5777.97, 2524.82}, {5812.38, 2491.86}, {5812.38, 2486.18}, {5823.84, 2482.67}, {5838.58, 2486.79}, {5851.05, 2506.59}, {5907.81, 2524.1}, {5911.73, 2523.8}, {5932.08, 2483.85}, {5977.46, 2438.31}, {5921.86, 2503.06}, {5917.02, 2500.93}, {5983.76, 2543.74}, {5985.72, 2545.94}, {5990.17, 2549.68}, {5997.97, 2551.26}, {5953.26, 2574.19}, {5936.13, 2565.07}, {5928.56, 2569.66}, {5929.15, 2577.67}, {5952.39, 2610.17}, {5982.07, 2637.42}, {5977.17, 2675.72}, {5971.69, 2676.52}, {5965.53, 2673.87}, {5937.9, 2660.05}, {5923.18, 2689.85}, {5891.93, 2634.79}, {5886.75, 2630.83}, {5868.5, 2605.33}, {5876.68, 2596.28}, {5881.26, 2597.71}, {5821.59, 2598.45}, {5798.54, 2584.41}, {5773.36, 2585.95}, {5745.46, 2585.2}, {5739.72, 2589.32}, {5726.59, 2591.68}, {5724.73, 2588.01}, {5697.68, 2582.6}, {5692.1, 2590.37}, {5680.73, 2590.56}, {5678.14, 2586.24}, {5675.92, 2574.19}, {5714.75, 2645.07}, {5780.57, 2675.87}, {5852.27, 2671.14}, {5855.41, 2672.48}, {5858.05, 2673.7}, {5908.41, 2771.36}, {5817.41, 2767.36}, {5800.74, 2771.96}, {5779.52, 2738.53}, {5737.24, 2414.85}, {5836.47, 2200.29}, {5853.38, 2199.62}, {5888.62, 2246.87}, {5739.29, 2560.59}, {5738.19, 2540.56}, {5740.93, 2519.4}, {5719.74, 2526.59}, {5716.83, 2512.9}, {5729.72, 2504.82}, {5734.73, 2475.46}, {5754.13, 2466.29}, {5768.95, 2451.72}, {5801.68, 2453.13}, {5832.99, 2440.83}, {5817.37, 2515.52}, {5838.27, 2548.14}, {5844.24, 2576.34}, {5869.39, 2571.17}, {5893.95, 2580.17}, {5935.56, 2601.65}, {5930.49, 2637.38}, {5902.19, 2656.77}, {5931.08, 2696.17}, {5888.49, 2697.29}, {5897.6, 2730.41}, {5953.06, 2750.11}, {5878.77, 2782.56}, {5848.75, 2752.69}, {5806.27, 2710.49}, {5828.15, 2673.26}, {5805.4, 2638}, {5786.98, 2646.24}, {5765.09, 2648.76}, {5743.79, 2614.71}, {5715.95, 2615.46}, {5712.44, 2632.86}, {5698.45, 2668.31}, {5673.98, 2657.94}, {5643.22, 2636.3}, {5627.07, 2632.11}, {5609.79, 2670.76}, {5622.09, 2703.37}, {5584.45, 2729.62}, {5490.17, 2736.56}, {5451.88, 2764.05}, {5429.76, 2762.1}, {5382.31, 2759.82}, {5393.26, 2708.11}, {5402.85, 2707.6}, {5434.56, 2678.74}, {5453.86, 2683.25}, {5474.3, 2671.15}, {5504.65, 2649.27}, {5464.75, 2615.8}, {5470.08, 2595.42}, {5506.65, 2562.4}, {5546.81, 2556.24}, {5589.87, 2557.63}, {5583.98, 2516.48}, {5578.24, 2486.72}, {5579.41, 2424.32}, {5541.17, 2374.34}, {5540.92, 2316.51}, {5521.72, 2300.65}, {5561.97, 2272.79}, {5609.06, 2308.59}, {5634.69, 2314.12}, {5653.55, 2308.38}, {5694.43, 2284.03}, {5725.16, 2361.4}, {5777.59, 2381.93}, {5856.53, 2420.18}, {5886.14, 2451.68}, {5895.72, 2475.82}, {5952.89, 2449.42}, {5955.28, 2451.67}, {5968.39, 2500.8}, {5931.12, 2522.99}, {6006.21, 2598.2}, {6001.77, 2690.22}, {5943.48, 2719.68}, {5885.69, 2712.28}, {5799.41, 2742.01}, {5790.26, 2756.07}, {5754.22, 2765.43}, {5744.87, 2726.65}, {5742.42, 2678.58}, {5727.25, 2627.37}, {5704.31, 2597.07}, {5720.37, 2559.17}, {5666.73, 2557.79}, {5616.42, 2553.1}, {5606.87, 2524.42}, {5587.5, 2477.02}, {5555.62, 2474.29}, {5535.9, 2501.05}, {5580.23, 2576.66}, {5631.64, 2574.92}};
		};
		
		class ChernoCenter : SpawnLargeCity {
			scope = public;
			position[] = {6897, 2597};
			radius = 700;
			locations[] = {{6893.42, 2587.77}, {6894.46, 2584.9}, {6885.37, 2569.57}, {6882.85, 2568.37}, {6874.97, 2572.45}, {6861.02, 2539.16}, {6858.54, 2536.21}, {6834.46, 2517.27}, {6829.25, 2512.5}, {6822.61, 2491.94}, {6821.63, 2487.73}, {6816.88, 2466.18}, {6814.84, 2464.62}, {6811.3, 2465.09}, {6794.04, 2465.24}, {6791.47, 2458.32}, {6774.56, 2461.16}, {6757.94, 2481.39}, {6772.7, 2495.08}, {6775.69, 2503.24}, {6782.8, 2521.57}, {6782.9, 2529.21}, {6786.54, 2546.13}, {6857.97, 2471.21}, {6867.59, 2449.79}, {6868.99, 2448.49}, {6870.74, 2439.63}, {6853.2, 2428.73}, {6864.47, 2401.59}, {6837.06, 2405.37}, {6828.38, 2398.45}, {6824.47, 2393.02}, {6822.21, 2387.69}, {6793.44, 2385.3}, {6772.44, 2379.87}, {6754.48, 2374.46}, {6723.34, 2348.14}, {6719.93, 2347.61}, {6717.4, 2345.42}, {6703.64, 2328.01}, {6681.97, 2329.29}, {6676.88, 2324.5}, {6660.57, 2308.08}, {6659.53, 2306.03}, {6657.09, 2297.76}, {6629.46, 2298.23}, {6612.98, 2285.99}, {6617.84, 2279.42}, {6611.35, 2237.94}, {6611.35, 2237.94}, {6597.28, 2255.35}, {6578.55, 2266}, {6565.13, 2309.49}, {6540.04, 2316.82}, {6530.11, 2315.33}, {6526.73, 2311.95}, {6540.56, 2344.26}, {6542.82, 2353}, {6475.06, 2390.34}, {6457.93, 2386.38}, {6429.91, 2429.1}, {6428.4, 2432.21}, {6426.78, 2438.74}, {6412.67, 2460.94}, {6409.39, 2457.5}, {6424.83, 2498.33}, {6441.74, 2556}, {6439.94, 2559.85}, {6493.26, 2583.17}, {6514.14, 2603.05}, {6519.96, 2605.76}, {6532.58, 2596.46}, {6512.65, 2551.95}, {6512.89, 2545.65}, {6527.13, 2526.21}, {6516.03, 2499.15}, {6574.04, 2514.22}, {6594, 2548.32}, {6593.59, 2567.32}, {6594.17, 2570.04}, {6597.94, 2580.42}, {6617.81, 2596.92}, {6649.72, 2613.02}, {6675.22, 2665.32}, {6704.45, 2687.05}, {6706.54, 2689.66}, {6648.72, 2743.86}, {6616.22, 2716.22}, {6594.9, 2662.86}, {6589.66, 2658.45}, {6576.96, 2742.25}, {6575.64, 2762.85}, {6593.93, 2761.85}, {6600.88, 2766.45}, {6610.95, 2800.24}, {6588.41, 2823.33}, {6573.73, 2825.36}, {6561.13, 2825.48}, {6556.25, 2822.09}, {6541.97, 2813.63}, {6537.05, 2801.79}, {6514.07, 2807.92}, {6487.08, 2780.99}, {6453.76, 2776.98}, {6430.56, 2775}, {6430.58, 2766.16}, {6423.79, 2740.54}, {6419.25, 2746.08}, {6401.34, 2744.03}, {6399.5, 2738.92}, {6377.96, 2740.95}, {6383.77, 2698.09}, {6375.05, 2640.31}, {6404.47, 2689.02}, {6484.1, 2732.36}, {6503.62, 2706.71}, {6513.94, 2687.23}, {6514.84, 2684.19}, {6671.49, 2799.02}, {6656.59, 2840.85}, {6639.9, 2875.82}, {6650.53, 2878.81}, {6662.47, 2905.73}, {6666.21, 2908.75}, {6690.51, 2960.7}, {6693.99, 2969.27}, {6703.38, 2990.66}, {6649.9, 2942.1}, {6608.02, 2934.41}, {6583.27, 2909.74}, {6580.9, 2892.32}, {6581.16, 2883.17}, {6546.32, 2910.26}, {6536.93, 2915.29}, {6524.32, 2911.09}, {6508.64, 2895.64}, {6485.39, 2848.43}, {6487.84, 2839.27}, {6488.17, 2822}, {6550.67, 2692.01}, {6559.81, 2660.79}, {6579.31, 2623.1}, {6654.64, 2552.58}, {6684.82, 2519.98}, {6713.29, 2500.26}, {6734.38, 2501.86}, {6736.72, 2500.47}, {6756.82, 2490.94}, {6759.43, 2435.58}, {6754.62, 2428.46}, {6751.32, 2405.62}, {6721.8, 2406.52}, {6716.81, 2399.37}, {6714.31, 2394.2}, {6713.65, 2391.8}, {6685.55, 2376.24}, {6683.25, 2376.47}, {6679.67, 2374.78}, {6639.29, 2372.57}, {6628.68, 2363.64}, {6596.83, 2357.56}, {6570.13, 2388.19}, {6560.21, 2408.16}, {6580.35, 2420.44}, {6587.86, 2416.39}, {6594.64, 2418.17}, {6612.66, 2409.81}, {6618.67, 2397.1}, {6625.89, 2396.1}, {6692.39, 2358.61}, {6898.73, 2405.22}, {6909.17, 2400.04}, {6924.51, 2428.96}, {6935.49, 2428.15}, {6950.56, 2465.07}, {6950.84, 2467.77}, {6954.32, 2470.03}, {6973.47, 2484.97}, {6976.4, 2486.78}, {6980.89, 2487.55}, {7028.62, 2445.09}, {7028.57, 2442.31}, {7010.43, 2423.94}, {6952.68, 2393.98}, {6953.38, 2388.72}, {6935.02, 2387.48}, {6929.38, 2381.58}, {6920.19, 2371.76}, {6866.54, 2352.38}, {6833.13, 2338.58}, {6778.75, 2342.92}, {6761.52, 2344.8}, {7024.51, 2497.69}, {7035.93, 2514.22}, {7040.11, 2516.13}, {7043.49, 2518.88}, {7087.94, 2564.61}, {7080.43, 2671.06}, {7083.7, 2682.15}, {7084.36, 2699.63}, {7127.64, 2712.76}, {7119.4, 2720.54}, {7102.97, 2716.08}, {7083.77, 2727.22}, {7080.3, 2730.16}, {7071.69, 2757.57}, {7096.57, 2774.53}, {6990.52, 2801.33}, {7017.06, 2793.37}, {6991.56, 2749.93}, {6991.65, 2724.71}, {6998.93, 2702.42}, {6975.83, 2681.25}, {6955.47, 2684.41}, {6921.04, 2684.84}, {6759.82, 2557.61}, {6761.97, 2563.88}, {6747.92, 2573.13}, {6732.48, 2582.08}, {6712.51, 2582.33}, {6707.94, 2589.52}, {6711.22, 2603.66}, {6700.21, 2604.36}, {6681.88, 2589.59}, {6673.96, 2566.76}, {6659.03, 2522.26}, {6661.47, 2486.21}, {6666.94, 2471.66}, {6685.31, 2454.67}, {6701.09, 2455.39}, {6730.06, 2455.35}, {6723.55, 2452.8}, {6706.99, 2437.95}, {6699.14, 2423.43}, {6696.15, 2411.66}, {6733.81, 2406.47}, {6751.21, 2386.24}, {6770.88, 2373.86}, {6789.44, 2370.34}, {6803.8, 2362.01}, {6805.05, 2359.31}, {6755.79, 2339.02}, {6749.99, 2351.22}, {6744.04, 2358.26}, {6739.67, 2339.95}, {6718.63, 2330.73}, {6702.38, 2308.4}, {6692.75, 2286.24}, {6651.69, 2276.99}, {6629.94, 2267.12}, {6625.1, 2314.13}, {6623.82, 2328.95}, {6605.43, 2337.43}, {6587.39, 2316.93}, {6564.52, 2288.73}, {6545.19, 2284.26}, {6535.58, 2270.83}, {6516.77, 2289.09}, {6497.67, 2306.97}, {6470.19, 2301.27}, {6459.41, 2284.38}, {6442.91, 2305.11}, {6449.48, 2346.38}, {6445.6, 2359.01}, {6413.53, 2391.56}, {6434.23, 2396.21}, {6457.62, 2431.61}, {6487.96, 2412.27}, {6499.48, 2425.07}, {6515.4, 2422.53}, {6529.12, 2431.2}, {6564.33, 2427.75}, {6596.58, 2434.08}, {6595.06, 2451.02}, {6559.77, 2492.94}, {6535.97, 2495.53}, {6486.77, 2509.03}, {6480.33, 2529.13}, {6459.11, 2531}, {6463.65, 2567.35}, {6482.47, 2615.41}, {6460.28, 2634.8}, {6432.69, 2614.62}, {6417.89, 2601.74}, {6391.98, 2622.55}, {6419.25, 2662.42}, {6426.67, 2674.49}, {6443.48, 2699.4}, {6445.58, 2724.3}, {6457.71, 2748.65}, {6433.7, 2788.85}, {6402.15, 2793.42}, {6384.93, 2834.74}, {6421.81, 2863.33}, {6434.08, 2915.95}, {6470.71, 2919.65}, {6521.21, 2977}, {6591.42, 2977.79}, {6635.63, 2969.59}, {6680.38, 3000.62}, {6743.53, 3011.05}, {6747.19, 3006.1}, {6792.41, 3109.66}, {6805.44, 3128.83}, {6817.67, 3152.22}, {6827.71, 3171.89}, {6838.79, 3177.04}, {6870.85, 3160.07}, {6859.3, 3143.45}, {6850.65, 3126.09}, {6865.07, 3090.75}, {6874.78, 3071.69}, {6854.39, 3051.59}, {6865.58, 2994.4}, {6762.78, 2951.02}, {6712.3, 2899.2}, {6702.56, 2892.98}, {6681.97, 2862.07}, {6721.86, 2862.09}, {6748.05, 2837.5}, {6770.19, 2802.68}, {6791.6, 2764.06}, {6791.23, 2752.94}, {6764.97, 2757.93}, {6766.72, 2725.95}, {6793.62, 2718.08}, {6796.04, 2712.51}, {6805.4, 2706.69}, {6814.19, 2717.41}, {6832.58, 2722.64}, {6841.89, 2710.52}, {6822.27, 2690.96}, {6841.27, 2675.12}, {6822.63, 2653.86}, {6786.6, 2686.27}, {6752.04, 2695.14}, {6729.21, 2658.2}, {6739.98, 2615.71}, {6797.24, 2605.74}, {6819.81, 2598.58}, {6830.56, 2596.61}, {6845.78, 2583.58}, {6853.34, 2579.3}, {6839.44, 2552.27}, {6846.41, 2546.26}, {6865.79, 2527.18}, {6878.73, 2532.88}, {6894.67, 2539.37}, {6911.2, 2524.07}, {6921.97, 2505.84}, {6926.46, 2481.35}, {6944.94, 2526.82}, {6965.25, 2545.1}, {6985.29, 2544.77}, {7016.82, 2539.42}, {7022.33, 2567.86}, {7009.94, 2611.83}, {7053.68, 2648.64}, {7113.68, 2629.82}, {7126.9, 2572.15}, {7171.47, 2548.36}, {7184.65, 2525.87}, {7099.3, 2538.93}, {7079.13, 2527.09}, {7038.05, 2483.67}, {6969.61, 2454.17}, {6926.88, 2462.08}, {6897.22, 2466.72}, {6892.31, 2500.15}};
		};
		
		class Gorka : SpawnVillage {
			scope = public;
			position[] = {9534, 8813};
			radius = 200;
			locations[] = {{9534.61, 8814.61}, {9522.84, 8829.54}, {9512.1, 8833.03}, {9508.55, 8828.82}, {9485.69, 8838}, {9462.4, 8841.32}, {9448.53, 8839.82}, {9447.68, 8815.59}, {9438.98, 8818.65}, {9375.19, 8823.66}, {9365.36, 8854.76}, {9369.88, 8859.95}, {9396.16, 8918.1}, {9392.77, 8943.33}, {9394.33, 8949.23}, {9377.51, 8932.92}, {9342.52, 8852.94}, {9341.8, 8824.01}, {9361.53, 8817.14}, {9388.81, 8803.1}, {9420, 8725.67}, {9452.13, 8749.62}, {9471.55, 8785.16}, {9475.03, 8801.6}, {9478.63, 8813.06}, {9530.48, 8785.99}, {9562.59, 8801.27}, {9616.42, 8812.28}, {9629.27, 8847.54}, {9621.05, 8847.42}, {9658.44, 8875.6}, {9668.28, 8850.33}, {9679.19, 8848.7}, {9689.35, 8881.54}, {9697.56, 8893.09}, {9674.31, 8949.57}};
		};
		
		class Guglovo : SpawnHamlet {
			scope = public;
			position[] = {8454, 6674};
			radius = 180;
			locations[] = {{8454.11, 6674.21}, {8444.16, 6708.15}, {8423.24, 6729.72}, {8397.25, 6699.19}, {8403.38, 6678.48}, {8430.6, 6658.97}, {8460.3, 6610.45}, {8491.09, 6639.59}, {8523.85, 6650.59}, {8538.04, 6659.67}, {8598.82, 6652.6}, {8517.54, 6680.08}};
		};
		
		class Kumyrna : SpawnHamlet {
			scope = public;
			position[] = {8355, 5989};
			types[] = {"ZmbM_PatrolNormal_PautRev", "ZmbM_PatrolNormal_Autumn", "ZmbM_PatrolNormal_Flat", "ZmbM_PatrolNormal_Summer", "", "ZmbM_SoldierNormal"};
			locations[] = {{8355.63, 5989.07}, {8326.18, 5934.1}, {8380.4, 5963.13}, {8404.9, 5998.1}, {8466.55, 5951.65}, {8353.59, 5995.44}, {8344.36, 6013.67}, {8323.8, 6001.98}, {8316.83, 5982.67}, {8334.33, 5974.58}, {8350.74, 5981.23}, {8378.04, 5969.81}, {8393.24, 5965.65}};
		};
		
		class Pusta : SpawnVillage {
			scope = public;
			position[] = {9154, 3898};
			radius = 300;
			locations[] = {{9156.99, 3872.78}, {9150.84, 3867.69}, {9150.41, 3832.97}, {9145.13, 3792.03}, {9161.57, 3754.88}, {9135.97, 3746.53}, {9118.95, 3798.2}, {9193.94, 3823.73}, {9209.12, 3909.97}, {9217.92, 3922.57}, {9167.69, 3943.29}, {9145.87, 4036.15}, {9133.87, 4090.91}, {9122.43, 4107.03}};
		};
		
		class Prigorodky : SpawnVillage {
			scope = public;
			position[] = {7952, 3348};
			locations[] = {{7820.29, 3524.35}, {7789.43, 3526.46}, {7740.36, 3517.27}, {7712.89, 3475.16}, {7719.68, 3476.54}, {7741.29, 3460.48}, {7840.36, 3490.64}, {7857.7, 3489.59}, {7868.87, 3455.41}, {8017.45, 3377.11}, {8030.93, 3388.01}, {8034, 3391.04}, {8049.38, 3382.33}, {8056.47, 3375.73}, {8056.56, 3374.61}, {8084.05, 3348.87}, {8054.17, 3308.06}, {8014.72, 3293.73}, {7971.04, 3274.57}, {7948.52, 3252.33}, {7944.67, 3238.24}, {8013.39, 3239.06}, {8031.54, 3227.46}, {8116.2, 3223.66}, {8129.19, 3215.62}, {8130.75, 3208.74}, {8127.04, 3176.06}, {8139.84, 3256.2}};
		};
		
		class Staroye : SpawnVillage {
			scope = public;
			position[] = {10171, 5556};
			locations[] = {{10171.2, 5556.25}, {10269.3, 5723.47}, {10286.1, 5752.32}, {10265.9, 5632.34}, {10251.1, 5585.74}, {10269.7, 5584.9}, {10306.8, 5516.17}, {10339, 5498.87}, {10335.4, 5471.63}, {10237.1, 5476.07}, {10147.4, 5421.66}, {10123.6, 5407.6}, {10101.9, 5440.71}, {10108.9, 5460.83}, {10122.4, 5468.15}, {10118.3, 5477.96}, {10119.9, 5517.83}, {10087.1, 5519.23}, {10047.9, 5521.22}, {10037.1, 5534.27}, {10000.1, 5471.31}, {9930.2, 5465.84}, {9897.84, 5459.6}, {9934.58, 5481.07}, {9959.16, 5543.63}, {9974.8, 5539.9}, {9990.51, 5511.95}, {10040.2, 5480.26}, {10097.5, 5505.04}};
		};
		
		class Shakhovka : SpawnHamlet {
			scope = public;
			position[] = {9644, 6569};
			locations[] = {{9644.65, 6569.11}, {9625.9, 6584.98}, {9603.12, 6596.99}, {9558.96, 6610.42}, {9552.34, 6594.08}, {9565.14, 6584.78}, {9575.19, 6573.05}, {9577.35, 6553.06}, {9586.21, 6563.11}, {9617.73, 6536.52}, {9658.24, 6524.5}, {9674.67, 6551.27}, {9703.44, 6555.52}, {9712.93, 6532.78}, {9698.89, 6497.45}, {9639.51, 6484.33}, {9614.06, 6511}, {9598.05, 6552.64}, {9602.2, 6576.49}};
		};
		
		class Dolina : SpawnHamlet {
			scope = public;
			position[] = {11225, 6583};
			locations[] = {{11186.6, 6609.25}, {11151.7, 6596.97}, {11157.5, 6581.45}, {11148.6, 6561.17}, {11144.4, 6563.41}, {11139.5, 6566.26}, {11189.8, 6569.29}, {11203.4, 6571.92}, {11232.9, 6570.53}, {11225.8, 6551.29}, {11239.5, 6507.75}, {11270.9, 6532.9}, {11293.8, 6569.63}, {11315, 6625.25}, {11310.4, 6625.51}, {11301.8, 6614.47}, {11252.6, 6610.46}, {11220.4, 6614.52}, {11183.7, 6581.2}, {11254.7, 6567.8}, {11273.2, 6563.28}};
		};
		
		class Dubrovka : SpawnVillage {
			scope = public;
			position[] = {10468, 9792};
			locations[] = {{10455, 9800.91}, {10515.2, 9744.46}, {10521.4, 9723.16}, {10552.4, 9726.9}, {10528.7, 9684.87}, {10553.3, 9672.19}, {10534.3, 9614.82}, {10554.8, 9629.77}, {10560.3, 9661.86}, {10520.9, 9759.2}, {10460, 9783.25}, {10458.9, 9830.25}, {10426.1, 9838.04}, {10423.2, 9843.43}, {10391.8, 9841.88}, {10383, 9851.38}, {10356.6, 9841.99}, {10316.7, 9832.08}, {10238.8, 9823.37}, {10217, 9811.13}, {10206.1, 9851.38}, {10346.6, 9876.02}, {10451, 9861.29}, {10441.6, 9906.31}, {10427.9, 9930.86}, {10507.4, 9914}, {10553.7, 9882.32}, {10576.9, 9897.12}, {10615.3, 9959.42}, {10618.5, 9978.93}, {10411.2, 9595.5}, {10376.1, 9557.23}, {10350.1, 9553}, {10302.3, 9630.9}, {10286, 9564.07}, {10278.1, 9568.59}};
		};
		
		class Polana : SpawnTown {
			scope = public;
			position[] = {10690, 8060};
			locations[] = {{10702.5, 8068.33}, {10693.3, 8069.22}, {10685.5, 8076.53}, {10685.9, 8088.36}, {10682.4, 8117.78}, {10667.8, 8071.4}, {10662.6, 8049.49}, {10654.3, 8048.66}, {10644.5, 8031.41}, {10671.4, 8012.99}, {10672.8, 8023.48}, {10703.8, 8033.08}, {10738.7, 7994.38}, {10727.5, 7985.39}, {10708.4, 7977.81}, {10687, 7953.33}, {10681.5, 7935.68}, {10663.9, 7924.6}, {10662.7, 7922.14}, {10644, 7954.31}, {10598.9, 7970.38}, {10579.5, 8000.13}, {10605.7, 8053.43}, {10594.8, 8081.06}, {10621.8, 8092.94}, {10637.3, 8141.76}, {10683.8, 8124.62}, {10728.4, 8176.54}, {10764.8, 8152.59}, {10766.7, 8125.83}, {10758.6, 8097.67}, {10802.9, 8109.7}, {10735.4, 8068.51}, {10734.1, 8037.61}, {10795.2, 7998.94}, {10792.2, 7998.24}, {10813.4, 7850.1}, {10772.9, 7855.37}, {10713.5, 7941.41}, {10634, 8009.8}, {10618.4, 8020.98}, {10547.4, 8109.29}, {10559.1, 8121.62}, {10556, 8139.57}};
		};
		
		class Msta : SpawnVillage {
			scope = public;
			position[] = {11297, 5478};
			radius = 200;
			locations[] = {{11297.4, 5478.95}, {11292.7, 5467.72}, {11286.8, 5452.3}, {11247.9, 5431.51}, {11254.3, 5376.71}, {11234.3, 5353.14}, {11187.5, 5380.27}, {11228.9, 5467.44}, {11226.9, 5485.31}, {11253.1, 5478.2}, {11255.1, 5476.08}, {11276.2, 5485.43}, {11340.3, 5508.11}, {11378.9, 5549.63}, {11490.1, 5506.83}, {11485.7, 5506.99}};
		};
		
		class ElektroNorth : SpawnCity {
			scope = public;
			position[] = {10483, 2259};
			radius = 250;
			locations[] = {{10483.1, 2259.64}, {10462.2, 2266.78}, {10463.7, 2280.39}, {10455.2, 2284.84}, {10453.8, 2290.26}, {10464.6, 2298.15}, {10480.9, 2309.98}, {10481.3, 2312.67}, {10495.7, 2321.38}, {10497, 2330.31}, {10496.6, 2339.82}, {10489.8, 2343.47}, {10489.3, 2349.78}, {10503.4, 2351.11}, {10516, 2344}, {10503.9, 2371.57}, {10481.9, 2372.66}, {10470.7, 2375.02}, {10461.2, 2372.54}, {10442.5, 2373.58}, {10438.8, 2370.92}, {10448.8, 2355.52}, {10448.5, 2332.1}, {10445, 2321.08}, {10425.8, 2310.44}, {10402.9, 2317.13}, {10400.8, 2318.72}, {10367.5, 2269.9}, {10386.6, 2260.58}, {10375.6, 2209.77}, {10367.7, 2216.01}, {10362.1, 2227.11}, {10360.5, 2228.95}, {10356.4, 2230.53}, {10343.7, 2251.75}, {10323.4, 2270.38}, {10372.8, 2247.89}, {10384.8, 2237.7}, {10386.2, 2213.26}, {10398.6, 2193.47}, {10423.6, 2207.27}, {10427.9, 2210.3}, {10418.7, 2180.33}, {10442.3, 2184.58}, {10447.2, 2192.59}, {10448.1, 2195.02}, {10476.8, 2196.04}, {10479.2, 2193.89}, {10478.2, 2205.24}, {10479.7, 2215.68}, {10483.4, 2219.44}, {10501.7, 2258.68}, {10517.7, 2262.81}, {10517.4, 2271.45}, {10516.1, 2273.23}, {10541.4, 2228.96}, {10537, 2208.91}, {10523.8, 2200.74}, {10556.1, 2178.71}, {10592, 2169.11}, {10615.9, 2170.63}, {10627.1, 2164.81}, {10594.6, 2122.41}, {10577.4, 2115.92}, {10569.5, 2095.63}, {10565, 2097.27}, {10490.5, 2127.81}, {10478.4, 2088.95}, {10482.8, 2052.09}, {10450.9, 2090.51}, {10439.6, 2094.43}, {10416.3, 2095.64}, {10365.9, 2111.68}, {10352.3, 2115.25}, {10346.2, 2113.09}, {10337.7, 2100.41}, {10326.5, 2121.16}, {10332.2, 2130.17}, {10325.4, 2153.63}, {10343.3, 2178.62}, {10419.9, 2251.77}, {10441.9, 2269.8}, {10445.1, 2270.91}, {10576.5, 2297.27}, {10537.8, 2302.65}, {10548.7, 2333.58}, {10562.7, 2339.53}, {10584.9, 2347.6}, {10597.6, 2356.58}, {10644.8, 2337.5}, {10650.5, 2372.14}, {10634.3, 2399.29}, {10620.2, 2411.78}, {10583.8, 2393.54}, {10540.2, 2394.34}, {10524.8, 2394.54}, {10452.6, 2433.09}, {10415.6, 2407.89}, {10395.8, 2379.28}, {10402.6, 2374.9}, {10411, 2379.66}, {10419, 2344.24}, {10464.4, 2359.56}};
		};
		
		class ElektroSouth : SpawnCity {
			scope = public;
			radius = 320;
			position[] = {10128, 1850};
			locations[] = {{10129.2, 1781.1}, {10131.1, 1771.55}, {10146.6, 1798.11}, {10189.4, 1823.38}, {10176.2, 1841.8}, {10170.5, 1900.28}, {10175.8, 1903.12}, {10263.8, 1890.12}, {10268.8, 1893.3}, {10264.9, 1904.2}, {10326.2, 1907.86}, {10345.5, 1879.58}, {10356.4, 1881.36}, {10398.6, 1863.62}, {10398.8, 1854.18}, {10395, 1833.73}, {10340.8, 1944.65}, {10320, 2009.08}, {10325.1, 2008.8}, {10336.5, 2004.18}, {10266.7, 1994.6}, {10247.4, 2066.91}, {10188.7, 2067.23}, {10180.3, 2048.93}, {10161.4, 2086.69}, {10161.6, 2083.5}, {10073.6, 2058.81}, {10068.2, 2050.47}, {10069.2, 2038.05}, {10043.2, 2081.84}, {10035.9, 2070.69}, {10007.1, 2062.23}, {10010.4, 2030.93}, {10013.8, 2013.56}, {10021.6, 2009.17}, {10021, 1994.02}, {10033.9, 1970.9}, {10047.8, 1951.81}, {10059.2, 1945.24}, {10063.2, 1944.39}, {10081.7, 1955.28}, {10089.6, 1954.53}, {10092.4, 1955.41}, {10134.7, 1956.81}, {10167.9, 1944.02}, {10125.1, 1907.29}, {10115.4, 1869.39}, {10105.3, 1871.67}, {10101.9, 1872.54}, {10086.5, 1890.43}, {10077.6, 1903.72}, {10099.8, 1926.5}, {10090.4, 1936.65}, {10083.2, 1936.69}, {10041.9, 1927.46}, {10037.1, 1921.05}, {10044.4, 1904.57}, {10044.9, 1887.94}, {10043.6, 1884.59}, {10049.3, 1868.75}, {10038.3, 1858.24}, {10035.5, 1850.67}, {10039, 1839.82}, {10039.2, 1837.25}, {10043.4, 1793.55}, {10038.1, 1798.87}, {10017.6, 1810.96}, {10011.1, 1829.99}, {9998.68, 1829.56}, {9996.25, 1829.31}, {9954.33, 1863.73}, {9949.67, 1867.5}, {9940.28, 1865.71}, {9894.15, 1867.17}, {9930.32, 1887.64}, {9945.43, 1887.86}, {9961.86, 1901.23}, {9955.41, 1973.09}, {9956.04, 1996.68}, {9947.78, 2014.38}, {10069, 1971.2}, {10075.9, 1995}, {10077.7, 1999.19}, {10125.3, 1993.02}, {10135.6, 1990.14}, {10165.2, 1994.24}, {10167.7, 1992.7}, {10188, 1995.79}, {10209.4, 1955.89}, {10229, 1858.46}, {10226.4, 1829.35}, {10255.5, 1799.16}, {10288.3, 1789.49}, {10355.7, 1806.27}, {10344.9, 1804.07}, {10352.1, 1734.29}, {10377.1, 1703.12}, {10376.7, 1691.06}, {10374.3, 1687.1}, {10301.6, 1596.75}, {10299.5, 1594.98}};
		};
		
		class ElektroPlant : SpawnVillage {
			scope = public;
			radius = 150;
			position[] = {10444, 2620};
			locations[] = {{10444.4, 2620.53}, {10478.4, 2611.93}, {10456.8, 2579.93}, {10454, 2572.66}, {10443.9, 2567.13}, {10428.3, 2572.77}, {10425.5, 2573.61}, {10415.1, 2592.59}, {10398.1, 2581.05}, {10402.1, 2563.26}, {10408.4, 2545.84}, {10449.8, 2530.46}, {10455.8, 2537.36}, {10474.1, 2550.4}, {10486, 2621.33}, {10490.7, 2621.32}, {10481, 2627.82}, {10444.4, 2650.49}, {10420.2, 2633.44}, {10331.6, 2634.39}, {10335.7, 2594.62}};
		};
		
		class ElektroHarbor : SpawnVillage {
			scope = public;
			position[] = {10822, 2688};
			radius = 280;
			locations[] = {{10820.4, 2687.31}, {10831.4, 2690.18}, {10845.4, 2697.45}, {10834.8, 2721.94}, {10824.3, 2721.68}, {10786, 2720.05}, {10844.5, 2749.41}, {10878.5, 2748.71}, {10899.4, 2813.42}, {10925.6, 2775.7}, {10983.8, 2771.91}, {10988.5, 2753.9}, {11036.4, 2715.41}, {11039.1, 2713.99}, {10958.2, 2721.92}, {10936.5, 2698.19}, {10936, 2681.34}, {10897.5, 2670.94}, {10828.1, 2667.74}, {10802.5, 2664.09}, {10797.4, 2632.46}, {10768.9, 2594.33}, {10781.2, 2593.2}, {10782.4, 2581.29}, {10826.8, 2531.24}, {10836.9, 2506.84}, {10823.7, 2484.63}, {10881.7, 2457.38}, {10831.8, 2572.91}, {10808.6, 2573.4}, {10652.1, 2651.87}, {10579.6, 2705.73}, {10573.4, 2709.1}, {10727.8, 2917.39}, {10795.1, 2928.07}, {10838.9, 2902.49}};
		};
		
		class Kamyshovo : SpawnVillage {
			scope = public;
			position[] = {12074, 3580};
			radius = 250;
			locations[] = {{12074.3, 3576.43}, {12074.7, 3566.45}, {12068.7, 3632.58}, {12073.2, 3694.56}, {12057.5, 3705.73}, {12027.6, 3713.36}, {11995.3, 3809.91}, {11996.2, 3798.31}, {12032.8, 3747.19}, {12061.4, 3746.69}, {12035, 3659.68}, {12035.3, 3618.7}, {12046, 3603.12}, {12031.5, 3577.07}, {11999, 3578.06}, {11966.2, 3548.54}, {11974.6, 3557.69}, {11898.5, 3482}, {11903, 3473.22}, {11948.9, 3470.89}, {11954.8, 3468.75}, {11971.1, 3455.28}, {11987.3, 3464.08}, {12042.8, 3442.85}, {12042.4, 3438.01}, {12050.6, 3432.56}, {11995.2, 3484.66}, {11990.9, 3493.8}, {12033, 3502.94}, {12049.6, 3516.65}, {12055, 3536.13}, {12053.8, 3552.2}, {12059.8, 3549.82}, {12086.5, 3515.89}, {12104.7, 3483.93}, {12129.8, 3502.18}, {12145.1, 3471.83}, {12176.9, 3492.88}, {12178.6, 3502.27}, {12178.9, 3504.45}, {12245.6, 3500.32}, {12250.7, 3520.75}, {12243.5, 3559.49}, {12186.6, 3559}, {12171.6, 3545.61}, {12155.5, 3530.45}, {12140, 3565.5}, {12113.1, 3586.05}, {12070.2, 3598.21}, {11922.1, 3519.47}, {12000.1, 3539.53}, {12036.6, 3460.04}, {12105, 3554.76}, {12229.5, 3510.55}, {12223.2, 3527.64}, {12071.5, 3487.89}, {12035.1, 3488.64}, {12018.7, 3530.98}, {12040.8, 3595.4}, {11965.3, 3499.94}, {12127.1, 3532.63}, {12059, 3657.07}, {11924.1, 3458.34}};
		};
		
		class TulgaEast : SpawnHamlet {
			scope = public;
			position[] = {12825, 4455};
			locations[] = {{12825.4, 4455.61}, {12786.9, 4444.44}, {12815.3, 4501.84}, {12853.1, 4471.61}, {12869.6, 4454.65}, {12882.7, 4440.87}, {12869.7, 4384.97}};
		};
		
		class TulgaWest : SpawnVillage {
			scope = public;
			position[] = {12602, 4383};
			locations[] = {{12524.7, 4329.88}, {12529.2, 4314.23}, {12525, 4345.99}, {12551.7, 4394.33}, {12556.3, 4405.43}, {12572.7, 4406.15}, {12602.2, 4402.71}, {12613.1, 4377}, {12649, 4265.51}, {12653.1, 4273.92}, {12665.4, 4279.79}, {12684.6, 4289.66}, {12707.2, 4379.99}, {12723.8, 4406.21}};
		};
		
		class Solnichniy : SpawnVillage {
			scope = public;
			radius = 300;
			position[] = {13383.2, 6249.04};
			locations[] = {{13387.6, 6249.73}, {13394.7, 6245.7}, {13407.5, 6237.05}, {13387.2, 6212.61}, {13353, 6210.71}, {13329.2, 6184.87}, {13311.2, 6131.72}, {13304.7, 6122.73}, {13295.5, 6118.76}, {13274, 6098.2}, {13287.6, 6098.13}, {13295.7, 6102.65}, {13272.7, 6113.34}, {13364.2, 6159.63}, {13371.9, 6158.77}, {13389.5, 6168.46}, {13414.5, 6149.96}, {13431.6, 6172.08}, {13426.9, 6196.08}, {13414.2, 6199.25}, {13405.6, 6214.33}, {13417.5, 6243.77}, {13413.8, 6259.03}, {13424.1, 6260.59}, {13437.1, 6264.46}, {13450.5, 6279.14}, {13466.2, 6280.39}, {13469.3, 6252.49}, {13446.2, 6244.46}, {13435, 6224.86}, {13426.1, 6217.68}, {13437.2, 6202.13}, {13452.8, 6168.85}, {13423.8, 6131.86}, {13413.3, 6120.59}, {13389.7, 6095.34}, {13400, 6086.51}, {13397.4, 6071.1}, {13390.1, 6056.38}, {13412.6, 6050.9}, {13419, 6032.09}, {13400.6, 5990.74}, {13369, 5993.14}, {13426, 5960.31}, {13443.1, 6100.18}, {13489.7, 6247.66}, {13503.5, 6269}, {13512.1, 6313.44}, {13521.7, 6314.7}, {13484.3, 6344.69}, {13463, 6355.24}, {13524.8, 6350.95}, {13516.5, 6344.01}, {13440.2, 6361.68}, {13417.4, 6375.94}, {13412.7, 6352.04}, {13427.4, 6323.75}, {13421.5, 6290.48}, {13390.9, 6280.06}, {13367.4, 6305.48}, {13338.2, 6331.44}, {13308.5, 6331.8}, {13270.8, 6299.6}, {13276.8, 6284.24}, {13288.1, 6254.03}, {13310.7, 6257.95}, {13350.8, 6253.21}, {13384, 6268.49}, {13362.6, 6231.96}, {13348, 6217.98}, {13340.3, 6229.54}, {13312.7, 6229.23}, {13230.7, 6249.7}, {13211.4, 6284.76}, {13164.3, 6199.89}, {13219, 6227.07}, {13220.2, 6369.4}, {13269.3, 6404.27}, {13346.4, 6385.77}, {13373.8, 6354.88}, {13387.5, 6331.62}, {13405.3, 6408.29}, {13429.2, 6421.44}, {13436.4, 6421}, {13464.7, 6404}, {13501.5, 6407.37}};
		};
		
		class Orlovets : SpawnVillage {
			scope = public;
			position[] = {12180, 7269};
			radius = 200;
			locations[] = {{11990.1, 7248.97}, {12001.9, 7246.74}, {12025.2, 7228.46}, {12043.2, 7244.06}, {12059.4, 7269.13}, {12064.9, 7296.6}, {12083.8, 7324.11}, {12092.4, 7306.86}, {12093.5, 7275.32}, {12085.1, 7241.82}, {12074.3, 7211.82}, {12090.7, 7190.34}, {12099, 7205.57}, {12115.2, 7233.52}, {12103.4, 7249.89}, {12112, 7293.85}, {12126.3, 7312.44}, {12154.5, 7381.57}, {12127.5, 7264.43}, {12165.7, 7261.45}, {12207.6, 7216.71}, {12210.4, 7258.51}, {12203.1, 7280.03}, {12207.3, 7297.46}, {12214.7, 7315.74}, {12238, 7341.25}, {12221.2, 7346.22}, {12222.9, 7405}, {12293.7, 7347.54}, {12315.7, 7339.15}, {12305.7, 7309.23}, {12284.9, 7262.17}};
		};
		
		class Nizhnoye : SpawnVillage {
			scope = public;
			position[] = {12894, 8192};
			radius = 400;
			locations[] = {{12901.5, 8204.79}, {12899.5, 8220.79}, {12877.6, 8231.03}, {12872.6, 8250.73}, {12875, 8276.59}, {12882.5, 8310.21}, {12897.7, 8318.65}, {12912.1, 8346.89}, {12926.3, 8303.88}, {12910.4, 8246.5}, {12923.6, 8187.93}, {12933.7, 8170.77}, {12927.1, 8125.12}, {12944, 8109.18}, {12926.2, 8076.76}, {12886.2, 8085.82}, {12868.2, 8073.61}, {12851.5, 8061.55}, {12832.7, 8045.02}, {12838, 8024.22}, {12919.8, 8014.12}, {12930.4, 8037.49}, {12939.6, 8043.65}, {12956.9, 8002.88}, {12951.7, 8000.44}, {12935, 7996.47}, {12875, 7966.97}, {12769.7, 7990.19}, {12734.5, 8085.97}, {12720.3, 8090.05}, {12696.3, 8199.39}, {12764.1, 8378.07}, {12769.2, 8409.56}, {12787.6, 8427.87}, {12976.9, 8383.96}, {12984.3, 8363.08}, {12975.9, 8296.79}, {12974, 8286.61}, {12981.3, 8278.33}, {12970.1, 8227.42}, {12985.6, 8226.03}, {13000.1, 8199.41}, {13008.9, 8170.1}, {13034.4, 8141.08}, {13052, 8179.64}, {13066.1, 8187.63}, {12970.1, 8210.36}, {12958.4, 8058.33}, {12979.4, 8036.72}, {12998.4, 7997.04}, {12998.9, 7977.58}, {12803.3, 8077.79}, {12592.9, 8201.45}, {12530, 8224.51}, {12532, 8232.43}, {12557.9, 8192.93}, {12584.8, 8197.69}};
		};
		
		class BerezinoSouth : SpawnCity {
			scope = public;
			position[] = {12055, 9284};
			radius = 400;
			locations[] = {{12043.7, 9279.58}, {12010.6, 9259.67}, {11969.7, 9236.31}, {11977.5, 9208.34}, {11996.7, 9181.42}, {12041.7, 9180.75}, {12052, 9164.86}, {12078.2, 9167.77}, {12068.1, 9139.4}, {12054.8, 9123.94}, {12037.5, 9145.46}, {12016.4, 9133.56}, {12017.3, 9145.02}, {11993.8, 9153.84}, {11976.2, 9122.73}, {11956.9, 9105.89}, {11930.9, 9084.16}, {11930.1, 9104.01}, {11934.4, 9129.62}, {11941, 9126.87}, {11950.2, 9130.3}, {11946.9, 9146.75}, {11953.5, 9175.08}, {11938.3, 9187.95}, {11947, 9207.34}, {11922.8, 9225.55}, {11906.2, 9209.25}, {11889.3, 9188.38}, {11878.1, 9199.16}, {11857.4, 9237.86}, {11843, 9211.66}, {11844.8, 9150.36}, {11829.7, 9158.44}, {11769.4, 9211.78}, {11698.7, 9177.09}, {11679.4, 9168.27}, {11715.9, 9133.67}, {11775.8, 9134.16}, {11773.8, 9097.03}, {11757.6, 9060.18}, {11770.5, 9012.04}, {11801.1, 9012.48}, {11818.3, 9021.78}, {11844.8, 9029.22}, {11908.9, 8932.98}, {11919.8, 8917.94}, {11943.5, 8938.23}, {11969.2, 8952.81}, {11941.5, 8986.67}, {11921.9, 9009.83}, {11904, 9023.26}, {11948.1, 9052.1}, {11960.4, 9086.27}, {11978, 9090.04}, {11987.2, 9108.07}, {12010.6, 9114.43}, {12019.3, 9110.01}, {12026.1, 9098.75}, {12027.5, 9077.91}, {12000.5, 9066.09}, {12013.9, 9050.26}, {11993.7, 9031.76}, {11980.2, 9038.01}, {11993.2, 9051.7}, {11962.5, 9022.22}, {11984, 8991.98}, {12001.9, 9003.98}, {12025.6, 9021.08}, {12035, 9034.07}, {12059.5, 9046.1}, {12076, 9041.78}, {12062.1, 9077.95}, {12103.1, 9073.69}, {12114.1, 9102.92}, {12103.9, 9135.16}, {12226, 9162.17}, {12236, 9181}, {12266.3, 9159.6}, {12311.6, 9141.25}, {12317.1, 9130.2}, {12331.3, 9110.04}, {12313.4, 9097.6}, {12295.5, 9112.16}, {12293, 9086.21}, {12289.4, 9082.43}, {12276.1, 9077.75}, {12267.1, 9059.37}, {12303.6, 9058.25}, {12308.4, 9039.86}, {12316.6, 9028.57}, {12323.1, 9028.16}, {12350, 9054.71}, {12361.9, 9059.62}, {12358.9, 9069.76}, {12357.4, 9092.17}, {12377.9, 9102.28}, {12382.8, 9104.23}, {12315.2, 9076.73}, {12272, 9007.99}, {12202.4, 9017.86}, {12172.4, 9025.66}, {12131.3, 9039.7}, {12096.8, 8999.23}, {12079.7, 8963.5}, {12033.1, 8972.9}, {11973.8, 9111.29}, {12007.9, 9165.62}, {12020.7, 9171.37}, {12064.5, 9235.07}, {12079.7, 9307.97}, {12075.2, 9340.26}, {12013.2, 9330.35}, {11970.7, 9271}, {11974.8, 9286.87}, {11959.3, 9304.59}, {11926.6, 9286.04}, {11880.4, 9308.62}, {11893.4, 9330.66}, {11922.7, 9352.38}, {11976.9, 9363.51}, {12036.2, 9376.67}, {12053, 9390.32}, {12052.5, 9403.96}, {12095.9, 9360.42}, {12112.4, 9372.3}, {12139.7, 9351.07}, {12164.3, 9334.13}, {12173.6, 9363.74}, {12136.5, 9394.73}, {12068.3, 9412.25}, {12097.2, 9424.79}, {12133.3, 9415.55}, {12143.3, 9424.43}, {12171.3, 9439.86}, {12157.6, 9461.32}, {12133.6, 9474.72}, {12176.7, 9474.15}, {12209.9, 9450.74}, {12225.3, 9429.11}, {12229.2, 9471.51}, {12184.1, 9492.66}, {12174.8, 9517.8}, {12150.1, 9544.97}, {12166.3, 9566.63}, {12230.5, 9538.2}, {12267.4, 9499.49}, {12257.9, 9473.95}, {12280.8, 9464.56}, {12312.5, 9453.56}, {12314.6, 9486.25}, {12304.9, 9533.26}, {12300.4, 9545.08}, {12332.6, 9509.31}, {12366.9, 9488.27}, {12370.1, 9488.5}, {12371.6, 9489.14}, {12376.9, 9506.35}, {12380.3, 9518.75}, {12380.7, 9519.97}, {12382.9, 9537.68}, {12383.3, 9544.6}, {12374.4, 9556.94}, {12253.6, 9587.75}, {12225.6, 9581.13}, {12215.3, 9544.94}, {12281.2, 9526.2}, {12290.4, 9489.38}};
		};
		
		class BerezinoNorth : SpawnLargeCity {
			scope = public;
			position[] = {12799, 9893};
			radius = 550;
			locations[] = {{12799.7, 9893.13}, {12782.5, 9870.21}, {12749.5, 9842.09}, {12732.6, 9850.38}, {12722.4, 9838.79}, {12732.2, 9822.14}, {12710.6, 9804.78}, {12440.6, 9713.8}, {12417, 9700.81}, {12382.9, 9697.02}, {12344.3, 9733.94}, {12321.9, 9705.76}, {12325.2, 9679.31}, {12351.2, 9650.17}, {12349.4, 9603.3}, {12371.7, 9600.74}, {12391.2, 9540.84}, {12413.6, 9564.97}, {12420.8, 9519.41}, {12434.3, 9521.75}, {12449.9, 9525.49}, {12476.1, 9548.73}, {12488.8, 9532.47}, {12498.4, 9558.19}, {12547, 9524.14}, {12607.8, 9511.54}, {12613.3, 9493.47}, {12626.1, 9483.09}, {12638.9, 9495.57}, {12619.3, 9437.62}, {12639.4, 9446.26}, {12658.8, 9456.97}, {12695.1, 9417.74}, {12699.3, 9417.11}, {12701.2, 9425.26}, {12706.7, 9460.39}, {12702.1, 9473.53}, {12744.6, 9450.6}, {12706.9, 9501.63}, {12671.2, 9527.08}, {12670.1, 9557.92}, {12650, 9569.19}, {12639.2, 9567.67}, {12610.1, 9564.62}, {12576.8, 9597.77}, {12635.1, 9622.6}, {12638, 9644.38}, {12652, 9639.24}, {12651.2, 9617.58}, {12687.9, 9639.35}, {12697.1, 9653.77}, {12719.8, 9629.54}, {12728.9, 9614.89}, {12763.9, 9589.4}, {12742.2, 9604.7}, {12784.4, 9604.86}, {12805.3, 9583.49}, {12819.8, 9597.79}, {12861.3, 9595.34}, {12872.2, 9587.54}, {12892.3, 9557.66}, {12920.8, 9580.58}, {12917.9, 9601.96}, {12897.6, 9616.25}, {12846.4, 9620.83}, {12818.6, 9617.14}, {12791.6, 9627.86}, {12766.6, 9651.74}, {12754.6, 9658.61}, {12733.4, 9675.12}, {12714.8, 9689.61}, {12708.2, 9693.98}, {12659.6, 9686.89}, {12660.5, 9705.98}, {12673.3, 9725.59}, {12758.5, 9722.99}, {12779, 9682.42}, {12811.5, 9704.83}, {12820.6, 9712.88}, {12826, 9694.56}, {12839.9, 9684.49}, {12835.6, 9720.72}, {12810.4, 9749.65}, {12741.6, 9767.87}, {12692.2, 9790.5}, {12674.4, 9830.75}, {12640.9, 9840.76}, {12701.9, 9834.88}, {12710.1, 9851.52}, {12661.7, 9929.77}, {12706.5, 10009.7}, {12679.9, 10012.8}, {12651.8, 10026.2}, {12683.2, 10044.6}, {12702, 10079.6}, {12740.2, 10101.1}, {12767.6, 10142.2}, {12797, 10133.3}, {12823.5, 10136.2}, {12817.3, 10114.9}, {12800.9, 10104.2}, {12815.2, 10070.9}, {12802.4, 10048.1}, {12799.2, 10012.7}, {12854, 9992.93}, {12820.3, 9981.01}, {12797.8, 9973.34}, {12813, 9923.12}, {12825.5, 9897.56}, {12850.5, 9900.47}, {12889.5, 9934.46}, {12890.8, 9937.8}, {12871, 9972.67}, {12897.3, 10023}, {12921, 10036.4}, {12924.5, 10066.7}, {12898.3, 10073.5}, {12859.6, 10097.1}, {12893.9, 10112.7}, {12903.4, 10104}, {12934.7, 10085.1}, {12970.5, 10045.3}, {12977.1, 9997.58}, {12935.5, 9981.63}, {12969, 9928.13}, {13004.4, 9946.39}, {13007.8, 10020.5}, {13010.7, 10048.4}, {12999.2, 10065.7}, {12993, 10084.1}, {12949.4, 10109.7}, {12911.4, 10152.6}, {12883.2, 10145.1}, {12871.7, 10121.1}, {12858.4, 10176.4}, {12823.8, 10171.7}, {12842, 10156.6}, {12901.6, 10185.4}, {12928.8, 10184.5}, {12932.2, 10197.3}, {12955.5, 10189.8}, {12964.8, 10176.1}, {12989.9, 10114.3}, {13031.4, 10055.8}, {13054.9, 10051.1}, {13082.6, 10037.9}, {13088.7, 10030.2}, {13062.3, 10003.9}, {13038.9, 9960.38}, {13090, 9899.06}, {13110.5, 9887.25}, {13113.6, 9885.93}, {12999.3, 9877}, {12978.5, 9824.79}, {12980.5, 9804.83}, {12980.5, 9755.17}, {13039.1, 9686.15}, {12945.1, 9701.61}, {12896.2, 9763.25}, {12832.5, 9837.69}, {12853.3, 9929.33}, {12822.3, 9944.43}, {12723.8, 10190}, {12672, 10273.9}, {12669, 10278.1}, {12682.4, 10364.7}, {12678.7, 10382.1}, {12759.9, 10317.4}, {12851.5, 10207.9}, {12915.1, 10212.3}, {12940.5, 10216.8}, {12986.8, 10222.2}, {13008.9, 10238.3}, {12992.4, 10263.3}, {12996.7, 10289.5}, {13048, 10323.7}, {13091.2, 10348.8}, {13133.8, 10321.5}, {13115, 10286.1}, {13126.9, 10277.4}, {13103, 10265.7}, {13143.5, 10234.4}, {13083.5, 10230.4}, {13075.6, 10235.5}, {13029.7, 10195.1}, {13052.4, 10147.9}, {13070.1, 10096.5}, {12753.6, 9836.42}, {12627.9, 9757.22}, {12451.9, 9740.56}, {12427, 9645.14}, {12489.1, 9593.06}, {12461.3, 9840.46}, {12471.6, 9955.02}, {12541.4, 10143.2}, {12562.8, 10151.4}, {12841.4, 10263.1}, {12907.2, 10278.9}, {12968.9, 10254.3}};
		};
		
		class Khelm : SpawnVillage {
			scope = public;
			position[] = {12304, 10773};
			radius = 250;
			locations[] = {{12319.1, 10751.5}, {12335.3, 10769.9}, {12290.2, 10817.8}, {12280.7, 10844}, {12305, 10842.1}, {12352.6, 10818.1}, {12308.8, 10857.4}, {12279.5, 10883.5}, {12245.4, 10869}, {12226.2, 10846.8}, {12253, 10904.2}, {12257.9, 10928.4}, {12277.2, 10926.8}, {12244.2, 10967.6}, {12268, 10975.9}, {12304, 10999.9}, {12343, 10998.4}, {12351.8, 10971.4}, {12345.8, 10924.6}, {12304.2, 10895.1}, {12265.2, 10785.5}, {12285.9, 10690.8}, {12313.2, 10693.6}, {12342.1, 10678.3}, {12296.9, 10668}, {12284.8, 10661.5}, {12233.3, 10651.8}, {12262.2, 10616}, {12274.1, 10591.1}, {12292.4, 10586.2}, {12321.5, 10602.4}, {12369.4, 10616.2}};
		};
		
		class Gvozdno : SpawnVillage {
			scope = public;
			position[] = {8576, 11943};
			radius = 200;
			locations[] = {{8691.9, 11810.1}, {8718.09, 11870.9}, {8677.92, 11867.9}, {8656.88, 11876}, {8640.29, 11851.2}, {8616.5, 11851.3}, {8626.31, 11884.2}, {8597.35, 11908.3}, {8574.89, 11906}, {8562.09, 11908.5}, {8552.17, 11926.4}, {8577.96, 11935.8}, {8559.23, 11955.1}, {8521.03, 11942.4}, {8520.75, 11965.1}, {8536.63, 11981.6}, {8567.76, 11987.7}, {8576.39, 12028.7}, {8566.44, 12038.8}, {8521.91, 12044.6}, {8512.03, 12071.8}, {8487.42, 12062.3}, {8474.87, 12045.1}, {8451.85, 12042.1}, {8421.29, 12021.1}, {8420.08, 12048.9}, {8478.43, 11982}};
		};
		
		class BlackMountain : SpawnHamlet {
			scope = public;
			position[] = {10256, 11937};
			radius = 250;
			locations[] = {{10272.7, 12056.5}, {10262, 12046.9}, {10250.7, 12042.7}, {10251.3, 12021.1}, {10273.5, 12004.1}, {10309.5, 12053}, {10311.5, 12076.2}, {10257.8, 12091.4}, {10177.4, 12069}, {10158.3, 12058.4}, {10139.6, 12052.9}, {10136.7, 12050.5}, {10201.6, 12016.1}, {10239.1, 12002.9}, {10260.7, 12010.1}, {10272.6, 11971.5}, {10231.3, 11785.2}, {10218.7, 11768.1}, {10232.7, 11750.9}, {10251, 11745.7}, {10241.5, 11736}, {10435.6, 11853.6}, {10437.1, 11867.6}, {10455.5, 11881.3}, {10418, 11969.6}};
		};
		
		class Krasnostav : SpawnTown {
			scope = public;
			position[] = {11089, 12331};
			radius = 400;
			types[] = {"ZmbM_HermitSkinny_Beige", "ZmbM_HermitSkinny_Black", "ZmbM_HermitSkinny_Green", "ZmbM_HermitSkinny_Red", "ZmbM_FarmerFat_Beige", "ZmbM_FarmerFat_Blue", "ZmbM_FarmerFat_Brown", "ZmbM_FarmerFat_Green", "ZmbM_FishermanOld_Blue", "ZmbM_FishermanOld_Green", "ZmbM_FishermanOld_Grey", "ZmbM_FishermanOld_Red", "ZmbM_HunterOld_Autumn", "ZmbM_HunterOld_Spring", "ZmbM_HunterOld_Summer", "ZmbM_HunterOld_Winter", "ZmbM_VillagerOld_Blue", "ZmbM_VillagerOld_Green", "ZmbM_HikerSkinny_Green", "ZmbM_HikerSkinny_Yellow", "ZmbF_HikerSkinny_Blue", "ZmbF_HikerSkinny_Grey", "ZmbF_HikerSkinny_Green", "ZmbF_HikerSkinny_Red", "ZmbF_SurvivorNormal_Blue", "ZmbF_SurvivorNormal_Orange", "ZmbF_SurvivorNormal_Red", "ZmbF_SurvivorNormal_White", "ZmbM_SurvivorDean_Black", "ZmbM_SurvivorDean_Blue", "ZmbM_SurvivorDean_Grey", "ZmbM_PatrolNormal_PautRev", "ZmbM_PatrolNormal_Autumn", "ZmbM_PatrolNormal_Flat", "ZmbM_PatrolNormal_Summer", "", "ZmbM_SoldierNormal"};
			locations[] = {{11090.5, 12333.9}, {11084.6, 12332.8}, {11071.3, 12369.3}, {11040.9, 12362.4}, {11022.8, 12388}, {11014.6, 12420.7}, {11010.1, 12439.9}, {10991.9, 12455.2}, {10983.1, 12402.5}, {10945.5, 12443}, {10930.5, 12400}, {10902.5, 12363.7}, {10875.1, 12338.4}, {10861.6, 12385.9}, {10867.2, 12424.5}, {10830.6, 12427.9}, {10810.6, 12454.9}, {10781.8, 12454.8}, {10777.7, 12433.9}, {10711.9, 12427.5}, {10731.7, 12408.7}, {10769.9, 12484.5}, {10822.8, 12478}, {10842.5, 12452.3}, {10880.8, 12384.1}, {10969.4, 12417}, {11004.5, 12480.2}, {11011.7, 12516.7}, {11043.8, 12520.8}, {11071.7, 12521.8}, {11080.7, 12482.1}, {11085.1, 12461.2}, {11067.4, 12425.7}, {11045.9, 12408.7}, {11080.5, 12377.5}, {11109, 12378.1}, {11111, 12342}, {11131.7, 12340.3}, {11146.5, 12334.1}, {11143.5, 12302.4}, {11129.3, 12291.5}, {11138.5, 12257.7}, {11090.2, 12262.1}, {11068.4, 12265.9}, {11019.7, 12313.8}, {10997.2, 12331.6}, {10963.6, 12322.4}, {11029.1, 12273.4}, {11081.9, 12224.4}, {11122.3, 12218.8}, {11143.9, 12214.6}, {11167.2, 12222.3}, {11179.6, 12227}, {11198.6, 12262.9}, {11156.8, 12273}, {11171.2, 12312.2}, {11175.1, 12316.4}, {11203.6, 12305.9}, {11227.6, 12309.2}, {11226.5, 12278.5}, {11228.8, 12260.9}, {11213.5, 12231.5}, {11211.1, 12208.6}, {11206.4, 12177.6}, {11230, 12177.8}, {11236.8, 12202}, {11238.5, 12226.8}, {11224.6, 12141.1}, {11247.7, 12134.2}, {11209.7, 12107.3}, {11140.3, 12040}, {11125.5, 11987.3}, {11134.2, 11976.8}, {11102.6, 11945.1}, {11094, 11955.7}, {11047.4, 12059.4}, {11046.8, 12061.5}, {11170.8, 12186.6}, {11270.1, 12167.6}, {11279.4, 12178.5}, {11265.7, 12208.2}, {11273, 12260.9}, {11273.5, 12291.5}, {11298.2, 12342.6}, {11235.4, 12358.6}, {11192.1, 12358}, {11170, 12347}, {11159.9, 12351.5}, {11163.5, 12381.4}, {11185.4, 12407.6}, {11185.8, 12445}, {11300.9, 12530.2}, {11320.7, 12541.4}, {11343.3, 12554.8}, {11362.4, 12537.8}, {11378.9, 12530.6}, {11376.8, 12403.9}, {11321, 12292}, {11310.3, 12263}, {11301.8, 12221.6}, {11385.1, 12238.4}, {11414.4, 12236.9}, {11407.8, 12148.9}};
		};
		
		class KrasnostavAir : SpawnVillage {
			scope = public;
			position[] = {11879, 12480};
			radius = 400;
			types[] = {"ZmbM_PatrolNormal_PautRev", "ZmbM_PatrolNormal_Autumn", "ZmbM_PatrolNormal_Flat", "ZmbM_PatrolNormal_Summer", "", "ZmbM_SoldierNormal"};
			locations[] = {{11879.6, 12480}, {11868.5, 12435.4}, {11877.4, 12420.3}, {11843.3, 12410.1}, {11822.2, 12420.4}, {11801.6, 12407.7}, {11802, 12387}, {11856.1, 12356.9}, {11867.1, 12373.3}, {11858.6, 12400.4}, {11805.1, 12466.4}, {11801.5, 12477}, {11856.1, 12498.3}, {11931.2, 12647.9}, {11937.1, 12660.1}, {11956, 12658.3}, {11964.8, 12671.8}, {11945.7, 12690.2}, {12015.7, 12675.3}, {12019, 12665.3}, {12019.6, 12663.3}, {12075.8, 12647.1}, {12135.6, 12659.6}, {12130.3, 12703}, {12166.6, 12626.5}, {12169.4, 12602}, {12144.8, 12595}, {12159.7, 12579.2}, {12176.6, 12583.7}, {12183.9, 12580.4}, {12197, 12583.6}, {12204.3, 12595.1}, {12197.2, 12601.9}, {12212.6, 12571}, {12243.1, 12565.3}, {12251.6, 12577}, {12245.8, 12582.8}, {12240, 12617.9}, {11864.3, 12528.9}, {11642.4, 12459.5}, {11601.9, 12479.8}, {11602.3, 12506.1}, {11576.5, 12493.1}, {11577.8, 12476.6}, {11598.9, 12448.3}, {11581.1, 12430.1}, {11546.4, 12414.8}, {11536.8, 12391.7}, {11547.9, 12385.7}, {11589.2, 12381.9}, {11590.3, 12367.6}, {11677.6, 12280.5}, {11679.6, 12279.3}, {11718.7, 12198.2}, {11719.3, 12170.1}, {11737.2, 12155.8}, {11756.7, 12146}, {11777.5, 12171.9}, {11759.2, 12182.9}, {11760.4, 12206.7}, {11860.2, 12216.4}, {11978.6, 12308.1}, {11980.4, 12313.2}, {11975.6, 12315.2}};
		};
		
		class Olsha : SpawnVillage {
			scope = public;
			position[] = {13306, 12981};
			radius = 280;
			locations[] = {{13361.7, 12880.7}, {13377, 12866.8}, {13371.5, 12851.6}, {13399.5, 12825.4}, {13424.1, 12836.6}, {13372.6, 12820.2}, {13364.4, 12829.1}, {13349.3, 12832.9}, {13343.5, 12859.5}, {13317.9, 12867.4}, {13304.9, 12876.5}, {13303.4, 12903.3}, {13337.1, 12910.8}, {13353.5, 12939.7}, {13369.8, 12921}, {13381.5, 12910.2}, {13302.3, 12993.2}, {13304, 13015.6}, {13287, 13052.5}, {13251.6, 13074.3}, {13244.1, 13101}, {13247.6, 13127}, {13230.2, 13133.3}, {13215.2, 13141.1}, {13203.2, 13151}, {13190.2, 13140.3}, {13149.8, 13163.4}, {13157.4, 13125.3}, {13175.3, 13106}, {13194.1, 13097.7}, {13190.1, 13079.8}, {13192.1, 13053.9}, {13203, 13040.9}, {13226.2, 13054.9}, {13239.2, 13020.5}, {13249.2, 12998}, {13263.5, 12976.2}};
		};
		
		class Vybor : SpawnCity {
			scope = public;
			position[] = {3800, 8870};
			radius = 250;
			locations[] = {{3801.42, 8850.73}, {3812.35, 8829.17}, {3789.36, 8822.96}, {3748.91, 8817.12}, {3758.78, 8838.52}, {3754.43, 8863.21}, {3722.65, 8873.78}, {3722.53, 8890.7}, {3692.39, 8855.16}, {3684.25, 8891.88}, {3669.52, 8908.77}, {3652.62, 8919.17}, {3676.11, 8944.67}, {3639.66, 8940.8}, {3665.79, 8977.72}, {3657.16, 9006.33}, {3643.93, 8988.12}, {3700.01, 8975.87}, {3734.1, 8970.76}, {3740.2, 8938.54}, {3784.41, 8960.94}, {3787.49, 8924.1}, {3804.3, 8890.53}, {3848.18, 8933.23}, {3873.42, 8942.98}, {3896.42, 8962.25}, {3895.64, 8927.22}, {3878.82, 8903.86}, {3889.68, 8867.41}, {3912.77, 8837.67}, {3935.69, 8798.01}, {3902.58, 8787.17}, {3849.26, 8793.04}, {3848.2, 8820.38}, {3746.92, 8758.51}, {3805.22, 8750.15}, {3824.01, 8735.66}, {3786.01, 8714.39}, {3719.18, 8836.33}, {3674.84, 8775.52}, {3753.97, 8906.45}, {3752.1, 9018.26}, {3800.68, 9018.81}, {3826.39, 8999.08}, {3838.22, 9027}, {3889.44, 8997.26}, {3825.93, 9063.03}, {3874.3, 9057.13}, {3894.87, 9029.03}, {3849.03, 9090.23}, {3799.62, 9091.3}, {3767.85, 9068.45}, {3866.69, 8826.05}, {3850.77, 8849.34}, {3809.81, 8865.14}, {3782.46, 8865.08}, {3726.38, 9055.76}, {3612.69, 8847.73}, {3952.23, 8975.08}, {3904.79, 8708.03}, {3867.29, 8868.9}};
		};
		
		class Vybor_Factory : SpawnHamlet {
			scope = public;
			position[] = {4101, 8944};
			locations[] = {{4081.19, 8951.67}, {4070.12, 8946.85}, {4054.8, 8962.9}, {4032.93, 8934.2}, {4016.18, 8943.71}, {4080.69, 8967.12}, {4106.63, 8976.66}, {4163.94, 8983.29}, {4193.88, 8975.43}, {4202.19, 8928.59}, {4162.63, 8940.22}, {4152.19, 8939.77}, {4150.44, 8939.65}, {4138.44, 8907}, {4157.8, 8899}, {4146.34, 8879.59}};
		};
		
		class Svetlojarsk : SpawnLargeCity {
			scope = public;
			position[] = {13945, 13271};
			radius = 400;
			locations[] = {{13931.5, 13233.8}, {13934.1, 13220.6}, {13924.7, 13209.2}, {13913.4, 13199.8}, {13882.4, 13205.4}, {13892.1, 13188.9}, {13887.5, 13175.4}, {13875.1, 13172.1}, {13875, 13134.9}, {13894.8, 13118.4}, {13901.9, 13131.3}, {13892.2, 13148.7}, {13908.8, 13162.1}, {13921.8, 13161.5}, {13914.8, 13170.9}, {13921.1, 13189}, {13934.4, 13189.3}, {13944.5, 13173.9}, {13969.7, 13186.2}, {13979.8, 13175.7}, {13957.1, 13209.8}, {13955.5, 13227.6}, {13956.4, 13241.3}, {13970.7, 13232.3}, {13980.3, 13231.9}, {13991, 13238.6}, {14011.3, 13225.4}, {14034.4, 13234.2}, {14037, 13214.4}, {14040.1, 13206}, {14029.5, 13194.6}, {14032.7, 13182.8}, {14028.2, 13163.7}, {14042.4, 13152.4}, {14066.5, 13151.8}, {14077.2, 13127.2}, {14099.7, 13132.4}, {14091.6, 13156.1}, {14065.7, 13176.3}, {14060.9, 13202.9}, {14007.1, 13149.4}, {14002.5, 13144}, {13996.9, 13148}, {13993, 13153.8}, {13997.1, 13158.9}, {14028.4, 13120.3}, {14050.5, 13121.1}, {14020.1, 13093}, {13999.3, 13107.8}, {13969, 13104.2}, {13958, 13136.2}, {13959.5, 13154.1}, {13961.8, 13166.6}, {13867.8, 13155.8}, {13854.3, 13118}, {13836.7, 13133.6}, {13847.3, 13168.6}, {13829.1, 13171.7}, {13814, 13187.6}, {13809.6, 13198.4}, {13807.8, 13218.5}, {13832.2, 13223.9}, {13846.2, 13231.5}, {13841.6, 13248.3}, {13831, 13270.3}, {13856.2, 13293.3}, {13866.4, 13313}, {13865.8, 13322.4}, {13852.9, 13315.3}, {13891.7, 13309.9}, {13901.2, 13295.7}, {13925.2, 13282.4}, {13954.7, 13290.6}, {13949.5, 13275}, {13948, 13258.4}, {13974.3, 13257.8}, {13860.9, 13182.7}, {13846.4, 13198.7}, {13776.5, 13216.9}, {13768.9, 13268.1}, {13796.4, 13257.4}, {13835.8, 13262.5}, {13722.1, 13259.3}, {13701.7, 13278.6}, {13687.7, 13306.7}, {13609, 13343.1}, {13600.8, 13335.7}, {13561, 13339.5}, {13563.7, 13329.1}, {13572.5, 13315.5}, {13570.4, 13309.9}, {13646.9, 13357}, {13712.7, 13352.3}, {13735.3, 13340.9}, {13763, 13333.1}, {13763.8, 13314.2}, {13796.9, 13313.8}, {13826.5, 13308.8}, {13819.8, 13289.4}, {13814.1, 13273.2}, {13798.2, 13294}, {13775.7, 13359.4}, {13766.3, 13391.8}, {13796.9, 13383.7}, {13832.5, 13367.7}, {13855.4, 13358.5}, {13881.8, 13343}, {13905.6, 13333.7}, {13924.3, 13312}, {13947.5, 13316.9}, {13969.6, 13310.3}, {13989.9, 13317.3}, {14007.7, 13294.1}, {14007.8, 13321.7}, {13992.3, 13332.7}, {13993.1, 13341}, {14014.8, 13349.8}, {13979.1, 13356.8}, {13961.9, 13386.2}, {13956.4, 13402.9}, {13924.4, 13413.3}, {13906.6, 13420.8}, {13901.2, 13424.3}, {13891, 13425.6}, {13888, 13433.1}, {13892.6, 13442.8}, {13886.7, 13445.9}, {13878.6, 13438.7}, {13905.7, 13452.3}, {13910, 13482.6}, {13919.3, 13489.9}, {13920.5, 13502}, {13924.8, 13522}, {13910.6, 13540.2}, {13886.4, 13589.1}, {13865.6, 13629}, {13867.7, 13636.5}, {13867.9, 13643}, {13923.2, 13570.5}, {13935.7, 13536.8}, {13955.6, 13532.8}, {13964.8, 13518.6}, {13978, 13518.5}, {13978.1, 13501.4}, {13978.2, 13498.4}, {13994.2, 13486.9}, {13998.1, 13486.7}, {14079.1, 13465.3}, {14077.8, 13467.1}, {14069.9, 13421.6}, {14041.3, 13428.3}, {14037.2, 13457.9}, {14009.6, 13445.4}, {13989.5, 13447}, {13988.4, 13462.3}, {13981.2, 13472.8}, {13979.3, 13476.3}, {13957.5, 13484}, {13975, 13459.5}, {13973.1, 13432}, {13979.7, 13406.8}, {13961.8, 13420.6}, {13984.7, 13376.3}, {14020.3, 13362.8}, {14025.8, 13364.9}, {14028.5, 13376.9}, {14041.7, 13382.6}, {14026.7, 13335.9}, {14039.2, 13301.3}, {14078.2, 13297.7}, {14075.9, 13280.1}, {14073, 13263.3}, {14081.6, 13253.7}, {14100.4, 13265}, {14102, 13270.6}, {14106, 13285.8}, {14118.6, 13285.3}, {14116.7, 13272.2}, {14121.8, 13253.6}, {14134.2, 13242}, {14113.6, 13303}, {14127.7, 13318.4}, {14142.5, 13340}, {14173.1, 13333.9}, {14178.9, 13333.1}, {14214.7, 13313.3}, {14275.4, 13290.6}, {14302.4, 13312.7}, {14315.1, 13292.9}, {14313.6, 13288.6}, {14167.6, 13315.3}, {14154.3, 13166.6}, {14149.3, 13153.1}, {14153.4, 13142.2}, {14164.9, 13132.7}, {14148.6, 13129.8}, {14136.4, 13142.9}, {14124.9, 13194.2}, {14091.8, 13230.7}, {14111.5, 13180.7}, {14129.6, 13126}, {14110.5, 13103.9}, {14099.5, 13096.4}, {14074.1, 13101.7}, {14063.6, 13079.2}, {14051.2, 12987.2}, {14102.5, 13044}, {14120.4, 13061.6}, {14117.9, 13072.2}, {14118.5, 13077.5}, {14123.3, 13079.6}, {14126.2, 13077.1}, {14127.3, 13058.4}, {14129.7, 13055.5}, {14137.3, 13050.8}, {14160.4, 13068.9}, {14162.2, 13082.2}, {14168.4, 13090.8}, {14160.6, 13103.2}, {14230.3, 13016.3}, {14189.9, 12983.9}, {14164.1, 12987.4}, {14153.3, 12990.9}, {14143.6, 13008}, {14155.2, 13031.1}, {14127.9, 13038.2}, {14046.6, 13085.3}, {14019.5, 13071.3}, {13982.9, 13136.2}, {13959.2, 13189.1}, {13946.7, 13201.2}, {13943.4, 13247.6}, {13914.8, 13328}, {13904.1, 13385.6}, {13872.8, 13398.4}, {13836.9, 13391.4}, {13788.1, 13325.1}, {13845.9, 13277.2}, {13733, 13117.2}, {13768.7, 13046.1}, {14085.8, 13166.7}};
		};
		
		class CernayaPolana : SpawnCity {
			scope = public;
			position[] = {12125, 13748};
			locations[] = {{11989.3, 13795.8}, {12036.6, 13766.7}, {12060.8, 13728.9}, {12087.2, 13751.9}, {12096.3, 13779.6}, {12124.9, 13766.9}, {12135, 13774.2}, {12162.7, 13797.8}, {12176.7, 13755}, {12197.4, 13787.1}, {12193.6, 13837.9}, {12141.9, 13826.7}, {12124, 13831.3}, {12111.7, 13863.8}, {12138.7, 13883.4}, {12105.7, 13905.9}, {12067.5, 13909.1}, {12033.9, 13880.9}, {12001.6, 13892.4}, {11972.2, 13873.8}, {11955.1, 13867.4}, {11940.1, 13857.2}, {11898.3, 13860.6}, {11889.9, 13888.7}, {11856.9, 13880.1}, {11843.1, 13912.6}, {11815.2, 13886.3}, {11804.1, 13871.3}, {11838.6, 13867.4}, {11908.8, 13903.4}, {11943.3, 13916.1}, {11966.8, 13942.4}, {12003.4, 13925.9}, {12163.2, 13422.1}, {12140.6, 13464.8}, {12116.4, 13516.4}, {12106.1, 13543.2}, {12140.7, 13565.4}, {12125.5, 13597.4}, {12158.7, 13619.4}, {12167.1, 13656.4}, {12152, 13683.9}, {12186, 13708.1}, {12176.4, 13733.7}, {12149.8, 13748.5}, {12144.4, 13706.3}, {12127, 13691.1}, {12102.5, 13713.3}, {12069.3, 13712.1}, {12078.6, 13672.9}, {12100.3, 13652.9}, {12103.7, 13630.6}, {12127.3, 13625}, {12197.9, 13819.5}, {12229.6, 13815.2}, {12233.2, 13835}, {12246.9, 13856.4}, {12243.3, 13900.4}, {12207.3, 13922.2}, {12267.7, 13874.2}, {12296.5, 13890.1}, {12306.1, 13875.4}, {12332.5, 13867.8}, {12385.6, 13836.1}, {12380.4, 13813.8}, {12337.1, 13789}, {12279.6, 13791.6}, {12255.7, 13769.8}, {12047.1, 13692.5}, {12076.3, 13683.4}, {12022.4, 13683.9}, {11991.9, 13714.2}, {12004.9, 13752.6}};
		};
		
		class Bashnaya : SpawnHamlet {
			scope = public;
			position[] = {4051, 11659};
			types[] = {"ZmbM_PatrolNormal_PautRev", "ZmbM_PatrolNormal_Autumn", "ZmbM_PatrolNormal_Flat", "ZmbM_PatrolNormal_Summer", "", "ZmbM_SoldierNormal"};
			locations[] = {{4052.45, 11654.4}, {4032.58, 11641.6}, {4013.14, 11656}, {3990.99, 11685.2}, {4022.9, 11700.6}, {4052.55, 11681.8}, {4090.53, 11655.7}, {4095.32, 11650.6}, {4062.78, 11653}, {4049.15, 11616.2}, {4023.11, 11669.3}, {4034.17, 11668.8}, {4051.09, 11673.8}};
		};
		
		class DevilsCastleCamp : SpawnVillage {
			scope = public;
			position[] = {8121.09, 10978.4};
			locations[] = {{8158.63, 11016.7}, {8132.34, 11033.2}, {8110.38, 11031.8}, {8108.15, 11008.6}, {8122.74, 10992.8}, {8115.86, 10983.6}, {8099.21, 10980.2}, {8104.02, 10995}, {8105.84, 10962.8}, {8091.34, 10955.4}, {8094.07, 10940.4}, {8086.59, 10932.3}, {8080.96, 10919.3}, {8079.34, 10904}, {8069.03, 10899}, {8090.24, 10900.4}, {8116.41, 10884.8}, {8126.38, 10913.8}, {8146.72, 10909.2}, {8155.6, 10920.3}, {8169.86, 10933.5}, {8144.37, 10941.2}, {8161.17, 10968.5}};
		};
		
		class KhelmCamp : SpawnVillage {
			scope = public;
			position[] = {11523.9, 10643.3};
			locations[] = {{11608.7, 10634.5}, {11592, 10643.3}, {11581.8, 10667.6}, {11563.9, 10663.5}, {11549.5, 10654.1}, {11559.7, 10641.8}, {11560.9, 10626.6}, {11558, 10616.5}, {11541.9, 10614.6}, {11527.6, 10608}, {11502, 10608.2}, {11483.8, 10601.9}, {11470.8, 10621.3}, {11469.5, 10634.2}, {11450.1, 10633.3}, {11434.7, 10632.9}, {11421.1, 10621.1}, {11406.6, 10623.9}, {11399.5, 10635.6}, {11383.5, 10632.9}, {11366, 10640.9}, {11343.7, 10643.7}, {11347.1, 10655.7}, {11351.6, 10676.6}, {11347.8, 10691.7}, {11370.6, 10686.7}, {11406.5, 10665}, {11428.1, 10653}, {11449.9, 10674.5}, {11467.9, 10678.7}, {11488, 10669.5}, {11508.2, 10675.4}, {11530.6, 10670.9}, {11548.5, 10679.5}};
		};
		
		class NovySoborCamp : SpawnVillage {
			scope = public;
			position[] = {7212.32, 6961.98};
			locations[] = {{7119.61, 6951.41}, {7111.05, 6938.63}, {7117.19, 6924.72}, {7140, 6915.43}, {7167.06, 6912.27}, {7204.48, 6908.18}, {7199.08, 6934.79}, {7174.22, 6955.92}, {7181.55, 6996.55}, {7206.69, 6993.45}, {7212.4, 7033.72}, {7233.89, 7050.74}, {7231.79, 7072.57}, {7240.77, 7047.99}, {7255.88, 7036.51}, {7272.84, 7042.72}, {7285.34, 7047.35}, {7306.2, 7065.92}, {7298.88, 7077.66}, {7269.75, 7076.8}, {7266.36, 7058.5}, {7276.05, 7037.13}, {7266.65, 7020.82}, {7242.28, 7008.77}, {7234.64, 6986.59}, {7224.67, 6988.12}, {7217.79, 6997.22}, {7221.11, 6983.87}, {7207.54, 6976.29}, {7194.95, 6971.02}, {7184.54, 6983.42}, {7221.69, 6966}, {7230.53, 6955.36}, {7213.13, 6953.55}, {7187.29, 6939.87}};
		};
		
		class FactoryA : SpawnVillage {
			scope = public;
			radius = 300;
			position[] = {13110, 6951};
			locations[] = {{13110.5, 6954.15}, {13127.9, 6998.18}, {13124.5, 7007.3}, {13108, 7008.49}, {13101, 7026.77}, {13102, 7062.39}, {13105, 7077.98}, {13109.4, 7090.42}, {13136.1, 7082.64}, {13151.5, 7080.39}, {13158.2, 7091.02}, {13160.9, 7111.99}, {13155.9, 7126.44}, {13191.1, 7164.93}, {13131.2, 7149.35}, {13117.6, 7142.59}, {13106.8, 7158.16}, {13090.3, 7161.25}, {13073.7, 7144.2}, {13088.8, 7107.25}, {13078.5, 7080.43}, {13052.6, 7068.83}, {13061.6, 7043.92}, {13085.5, 7050}, {13075.7, 7018.01}, {13093.9, 6997.47}, {13041.8, 6991.45}, {12976.3, 6975.53}, {12956.1, 6986}, {12942.6, 7003.81}, {12923.8, 6993.34}, {12910.6, 7005.93}, {12905.2, 6977.61}, {12867.9, 6987.59}, {12903.1, 7034.43}, {12953, 7030.86}, {12926.4, 6802.58}, {12935, 6791.18}, {12931.8, 6776.54}, {12939.4, 6767.98}, {12938.8, 6746.86}, {12947.2, 6752.69}, {12988.5, 6775.37}, {13031.4, 6859.64}, {13093.9, 6877.99}, {13116.7, 6818.5}, {13123.3, 6804.82}, {13219.2, 6827.47}, {13187.8, 6903.34}, {13175.7, 6937.3}, {13285.9, 6960.57}, {13232, 6998.02}, {13195.6, 6993.9}, {13201.6, 7023.3}, {13191.7, 7043.96}, {13235.6, 7106.58}, {13111.8, 7185.71}, {13056.3, 7156.92}, {12961.2, 7111.85}};
		};
		
		class Factory_11471_7486 : SpawnHamlet {
			scope = public;
			position[] = {11471, 7486};
			locations[] = {{11488, 7492.51}, {11487.9, 7497.4}, {11489.1, 7503.27}, {11471.5, 7513.21}, {11469.4, 7525.28}, {11472.6, 7551.17}, {11482.1, 7565.41}, {11502.6, 7563.27}, {11452.6, 7564}, {11435.8, 7553.96}, {11442, 7508.29}, {11435.8, 7455.64}, {11441.5, 7444.84}, {11460.2, 7448.08}, {11486.3, 7447.86}, {11497.8, 7466.81}};
		};
		
		class Castle_7421_9105 : SpawnHamlet {
			scope = public;
			position[] = {7421, 9105};
			locations[] = {{7416.13, 9099.21}, {7403.94, 9103.13}, {7397.05, 9116.64}, {7402.83, 9123.87}, {7445.8, 9130.08}, {7443.77, 9104.14}, {7415.79, 9086.6}, {7334.19, 9068.98}, {7341.3, 9067.45}, {7351.07, 9071.84}, {7362.08, 9072.07}, {7367.2, 9101.61}, {7402.5, 9160.76}, {7428.32, 9145.49}};
		};
		
		class Castle_Devils : SpawnVillage {
			scope = public;
			position[] = {6895, 11433};
			radius = 200;
			locations[] = {{6905.83, 11436.8}, {6905.5, 11440.6}, {6889.74, 11455.7}, {6836.62, 11480.7}, {6854.39, 11486.7}, {6882.75, 11484.3}, {6913.59, 11510}, {6850.01, 11560.5}, {6806.46, 11479.9}, {6823.08, 11445.8}, {6858.4, 11434.9}, {6860.9, 11394.5}, {6892.47, 11375.7}, {6898.59, 11377.3}, {6904.9, 11399.7}, {6936.61, 11411.4}, {6954.22, 11438.9}};
		};
		
		class Castle_Rog : SpawnHamlet {
			scope = public;
			position[] = {11252, 4289};
			locations[] = {{11263, 4289.22}, {11266.8, 4300.47}, {11256, 4337.61}, {11254.1, 4334.86}, {11236.8, 4281.89}, {11226.3, 4265.24}, {11236.1, 4258.04}, {11240.5, 4255.86}, {11250.3, 4220.76}};
		};
		
		class BlackForrest092075 : SpawnVillage {
			scope = public;
			position[] = {9204, 7833};
			radius = 300;
			locations[] = {{9204.45, 7833.52}, {9440.28, 7842.83}, {9196.08, 7821.01}, {9199.72, 7812.1}, {9201.05, 7797.82}, {9194.68, 7788.58}, {9192.31, 7774.74}, {9193.91, 7769.45}, {9180.22, 7756.01}, {9168.8, 7753.35}, {9165.56, 7746.89}, {9155.43, 7739.44}, {9142.59, 7733.12}, {9143.73, 7719.42}, {9150.13, 7706.23}, {9143.02, 7694.96}, {9139.6, 7692.03}, {9138.58, 7682.27}, {9141.89, 7658.87}, {9148.48, 7651.84}, {9152.84, 7642.95}, {9160.21, 7631}, {9173.44, 7616.98}, {9170.33, 7600.05}, {9185.6, 7609.25}, {9183.41, 7616.76}, {9174.35, 7626.18}, {9168.41, 7633.54}, {9170.52, 7642.05}, {9171.32, 7646.06}, {9162.97, 7656.09}, {9154.91, 7667.07}, {9151.97, 7674.83}, {9157.91, 7686.86}, {9158.88, 7705.54}, {9164.33, 7711.95}, {9167.87, 7714.34}, {9170.08, 7730.97}, {9172.6, 7743.54}, {9193.42, 7755.87}, {9173.02, 7777.8}, {9174.33, 7782.53}, {9182.45, 7785.94}, {9206.95, 7809.7}, {9207.56, 7815.85}, {9208.61, 7833.81}, {9199.27, 7852.02}, {9198.42, 7868.65}, {9194.08, 7876.28}, {9193.35, 7881.98}, {9187.33, 7888.22}, {9186.9, 7897.87}, {9197.85, 7901.98}, {9207.11, 7906.8}, {9235.86, 7902.82}, {9245.54, 7907.04}, {9249.58, 7907.08}, {9252.19, 7904.22}, {9260.25, 7903.19}, {9268.13, 7907.01}, {9277.42, 7906.17}, {9293.67, 7914.4}, {9302.22, 7912.79}, {9316.25, 7912.32}, {9328.06, 7908.98}, {9331.71, 7907.6}, {9330.3, 7934.13}, {9323.05, 7935.54}, {9309.1, 7939.82}, {9300.77, 7940.11}, {9285.53, 7940.9}, {9274.32, 7933.15}, {9271.26, 7925.67}, {9270.02, 7922.82}, {9261.99, 7916.11}, {9238.12, 7919.95}, {9199.83, 7924.92}, {9191.57, 7923.24}, {9182.01, 7914.84}, {9178.87, 7911.52}};
		};
		
		class Skalisty : SpawnVillage {
			scope = public;
			position[] = {13421, 2802};
			radius = 200;
			locations[] = {{13435, 2785.43}, {13423.3, 2788}, {13418.6, 2798.69}, {13405.6, 2820.57}, {13425.4, 2830.76}, {13446.9, 2815.75}, {13315.3, 2732.78}, {13317, 2721.25}, {13352.3, 2748.04}, {13434.2, 2739.32}};
		};
		
		class ThreeValleys : SpawnVillage {
			scope = public;
			position[] = {12987, 5528};
			radius = 500;
			locations[] = {{12994.6, 5513.5}, {12967.1, 5567.8}, {12931.5, 5588.28}, {12928.5, 5589.51}, {12926.2, 5620.76}, {12904.5, 5638.55}, {12931.9, 5675.26}, {12824.2, 5705.92}, {12727.4, 5658.57}, {12613.2, 5552.2}, {12606.1, 5558.87}, {12586.6, 5570.2}, {12552.1, 5666.16}, {12593.5, 5714.42}, {12626.7, 5739.03}, {12632.1, 5719.23}, {12732.2, 5836.7}, {12990.8, 5965.37}, {13000.3, 5976.97}, {13017.3, 5962.17}, {12946.4, 6016.54}, {13082.2, 5749.36}, {13116.1, 5548.96}, {13136.4, 5460.11}, {13175.2, 5452.41}, {13215.7, 5448.32}, {13227.7, 5417.28}, {13329.2, 5443.1}, {13337.2, 5452.13}, {13357, 5453.26}, {13379.3, 5454.53}, {13388.7, 5435.35}, {13430, 5426.84}, {13427, 5436.19}, {13414, 5452.07}, {13358.1, 5430.51}, {13103, 5275.89}, {13099.3, 5273.67}, {12713.9, 5263.74}, {12712.7, 5264.5}, {12711.8, 5265.05}, {12710.7, 5265.81}};
		};
		
		class FishingSolitude : SpawnHamlet {
			scope = public;
			position[] = {15144.3, 13836.1};
			locations[] = {{15062.1, 13839.9}, {15066.3, 13830.3}, {15085.1, 13833.5}, {15095.1, 13841.6}, {15108.4, 13851.1}, {15101, 13816.7}, {15121, 13801.9}, {15140.4, 13799.7}, {15170, 13789.6}, {15184.1, 13762.9}, {15206.3, 13750.4}, {15200.3, 13828.9}, {15185.2, 13861.8}, {15205.5, 13895}, {15187, 13889.9}, {15169.6, 13882}, {15168.4, 13870.9}, {15154.3, 13859.9}, {15133.8, 13866.1}, {15116.3, 13850.2}};
		};
		
		class GasStation_13390_6598 : SpawnHamlet {
			scope = public;
			position[] = {13390, 6598};
			locations[] = {{13389.2, 6603.11}, {13374.8, 6614.9}, {13362.7, 6616.26}, {13372.3, 6599.27}, {13388, 6625.82}};
		};
		
		class GasStation_1112_2403 : SpawnHamlet {
			scope = public;
			position[] = {1112, 2403};
			locations[] = {{1112.42, 2403.78}, {1080.77, 2369.62}, {1137.29, 2396.08}, {1126.11, 2411.79}, {1146.38, 2443.85}, {1158.6, 2352.59}, {1158.03, 2392.48}};
		};
		
		class GasStation_10748_10805 : SpawnHamlet {
			scope = public;
			position[] = {10748, 10805};
			locations[] = {{10747.3, 10789.3}, {10746.7, 10773.1}, {10719.5, 10807.2}, {10754.1, 10846}, {10787.6, 10849.8}, {10836.3, 10799.1}};
		};
		
		class GasStation_10351_8895 : SpawnXRoad {
			scope = public;
			position[] = {10351, 8895};
			locations[] = {{10260.1, 8895.83}, {10259.9, 8916.5}, {10239.3, 8930.01}, {10320.6, 8952.83}, {10332.5, 8953.63}, {10435.9, 8877.23}, {10446.8, 8881.71}, {10459.3, 8876.01}};
		};
		
		class GasStation_9487_2031 : SpawnHamlet {
			scope = public;
			position[] = {9487, 2031};
			locations[] = {{9504.31, 2017.36}, {9512.77, 2003.38}, {9490.4, 1998.14}, {9476, 1934.46}, {9462.85, 1918.39}, {9464.39, 1892.37}, {9439.18, 1889.33}, {9411.09, 1889.77}, {9402.12, 1882.19}, {9450.16, 1864.56}, {9380.56, 2001.74}, {9343.3, 2016.7}, {9334.16, 2051.95}, {9324.86, 2061.98}, {9308.23, 2043.39}, {9267.31, 2042.1}, {9264.25, 2008.16}, {9391.33, 2059.73}, {9552.39, 1995.15}, {9571.81, 1981.65}, {9694.06, 1996.72}, {9716.15, 2011.3}, {9708.42, 2030.94}, {9630.35, 1853.65}, {9629.3, 1851.63}};
		};
		
		class Solitude_8074_9288 : SpawnHamlet {
			scope = public;
			position[] = {8074, 9288};
			locations[] = {{8105.27, 9299.02}, {8130.53, 9306.27}, {8122.63, 9321.27}, {8075.99, 9292.15}, {8058.73, 9287.08}, {8049.66, 9299.08}, {8103.44, 9328.12}};
		};
		
		class Solitude_6758_5595 : SpawnHamlet {
			scope = public;
			position[] = {6758, 5595};
			locations[] = {{6757.61, 5589.61}, {6769.27, 5590.43}, {6768.5, 5602.72}, {6715.51, 5595.04}, {6768.97, 5554.61}, {6768.76, 5617.55}, {6790.27, 5615.28}, {6792.68, 5595.1}, {6779.57, 5581.71}, {6738.08, 5580.4}, {6725.97, 5596.78}};
		};
		
		class Solitude_6258_3788 : SpawnHamlet {
			scope = public;
			position[] = {6258, 3788};
			locations[] = {{6257.58, 3792.76}, {6231.39, 3788.25}, {6204.95, 3795.95}, {6196.11, 3786.94}, {6228.79, 3762.85}, {6262.82, 3762.92}, {6280.63, 3770.14}, {6313.5, 3763.5}, {6315.84, 3761.23}};
		};
		
		class Solitude_5397_3719 : SpawnHamlet {
			scope = public;
			position[] = {5397, 3719};
			locations[] = {{5433.96, 3778.08}, {5422.32, 3795.78}, {5436.4, 3807.75}, {5453.94, 3828.62}, {5449.65, 3798.53}, {5352.29, 3669.81}, {5307.54, 3731.38}, {5299.61, 3739.57}};
		};
		
		class Solitude_3816_3626 : SpawnHamlet {
			scope = public;
			position[] = {3816, 3626};
			radius = 200;
			locations[] = {{3794.54, 3632.67}, {3789.04, 3636.11}, {3652.19, 3685.05}, {3648.88, 3685.84}, {3890.51, 3585.92}, {3906.38, 3574.03}, {3913.93, 3581.91}, {3974.93, 3582.26}, {3995.92, 3573.12}};
		};
		
		class Solitude_3588_6957 : SpawnHamlet {
			scope = public;
			position[] = {3588, 6957};
			locations[] = {{3588.96, 6957.74}, {3575.66, 6977.95}, {3573.41, 7022.37}, {3568.94, 7018.69}, {3612.42, 6975.61}, {3659.73, 6940.49}, {3641.02, 6926.99}, {3629.4, 6924.45}};
		};
		
		class Solitude_2767_3094 : SpawnHamlet {
			scope = public;
			position[] = {2767.7, 3094};
			locations[] = {{2771.23, 3099.67}, {2790.89, 3118.93}, {2778.22, 3139.65}, {2754.14, 3118.56}, {2734.86, 3093.97}, {2741.08, 3072.34}, {2743.93, 3144.72}};
		};
		
		class Solitude_1745_5088 : SpawnHamlet {
			scope = public;
			position[] = {1745, 5088};
			locations[] = {{1776.07, 5086.41}, {1792.95, 5086.73}, {1812.19, 5078.46}, {1813.01, 5107.93}, {1741.16, 5095.1}, {1728.03, 5074.84}, {1696.76, 5091.99}, {1676.65, 5068.16}, {1665.93, 5125.58}, {1700.44, 5127.27}};
		};
		
		class Village_12870_6227 : SpawnVillage {
			scope = public;
			position[] = {12870, 6227};
			radius = 200;
			locations[] = {{12896.1, 6237.82}, {12897.7, 6248.7}, {12893.1, 6269.42}, {12915.7, 6281.56}, {12928.8, 6273.53}, {12926.4, 6254.82}, {12927.2, 6231.27}, {12951.6, 6260.99}, {12955, 6274.18}, {12975, 6287.69}, {12982.9, 6283.09}, {12994.9, 6271.77}, {13020.4, 6270.93}, {13033.1, 6259.87}, {12973, 6226.58}, {12863.7, 6239.21}, {12867, 6264}, {12845.6, 6237.36}, {12825.3, 6207.86}, {12826.3, 6200.02}, {12776.5, 6198.37}, {12795.1, 6225.1}, {12740.8, 6204.81}, {12729.3, 6164.16}, {12752.5, 6157.44}, {12768.1, 6138.06}, {12779.1, 6148.95}};
		};
		
		class Village_12217_6258 : SpawnHamlet {
			scope = public;
			radius = 200;
			position[] = {12217, 6258};
			locations[] = {{12254.3, 6250.49}, {12241.5, 6281.47}, {12257, 6294.95}, {12226, 6295.95}, {12203.2, 6282.56}, {12181, 6281.72}, {12172.8, 6298.78}, {12155, 6303.41}, {12129.3, 6299.55}, {12103.8, 6294.29}, {12087.2, 6291.97}, {12067.6, 6290.61}, {12071.1, 6274.14}, {12086.4, 6271.27}, {12107.2, 6269.57}, {12131.3, 6266.18}, {12152.6, 6259.73}, {12169.6, 6260.35}, {12184, 6251.53}, {12206.7, 6243.32}, {12237.2, 6238.13}, {12266.4, 6234.7}, {12280.4, 6252.86}, {12297.5, 6256.97}, {12312.4, 6263.05}, {12335.2, 6259.36}, {12353.9, 6251.27}, {12362.1, 6236.08}, {12377.8, 6219.79}, {12406.5, 6234.38}};
		};
		
		class Village_9990_10368 : SpawnHamlet {
			scope = public;
			position[] = {9990, 10368};
			locations[] = {{9990.11, 10368.1}, {9964.18, 10366.8}, {9959.16, 10386.9}, {9956.07, 10394.9}, {9910.64, 10367.4}, {9904.03, 10337.6}, {9902.23, 10412.7}, {9916.31, 10417}, {9954.74, 10426.7}, {10010.3, 10441.2}, {10020.2, 10389.3}, {10069.8, 10374.4}, {10086.6, 10351.8}, {10032, 10349.8}, {9983.14, 10316.8}};
		};
		
		class Village_9668_10430 : SpawnHamlet {
			scope = public;
			position[] = {9668, 10430};
			locations[] = {{9671.56, 10431.6}, {9688.3, 10469.1}, {9664.65, 10460.5}, {9641.66, 10461.3}, {9622.61, 10446.7}, {9630.61, 10431.7}, {9655.02, 10413}, {9659.95, 10408.4}, {9622.62, 10356.1}, {9587.34, 10456.6}, {9731.35, 10395.6}};
		};
		
		class Village_8763_11633 : SpawnHamlet {
			scope = public;
			position[] = {8763, 11633};
			locations[] = {{8764.06, 11621.7}, {8772.47, 11601.6}, {8798.02, 11574.9}, {8761.32, 11568.4}, {8739.11, 11587.3}, {8728.48, 11608.7}, {8732.5, 11623}, {8713.57, 11644.1}, {8732.5, 11657.5}, {8747.94, 11644.9}, {8773.8, 11651.6}, {8803.29, 11653.2}, {8818.41, 11679.4}, {8895.5, 11659.1}, {8865.47, 11647.2}, {8813.68, 11614.1}, {8752.39, 11719}, {8707.5, 11721.4}, {8775.92, 11734.8}};
		};
		
		class Village_8139_11581 : SpawnHamlet {
			scope = public;
			position[] = {8139, 11581};
			radius = 180;
			locations[] = {{8135.27, 11582.6}, {8147.58, 11590.1}, {8180.79, 11593.4}, {8208.98, 11607.7}, {8235.3, 11625.2}, {8137.25, 11633.5}, {8126.39, 11661.5}, {8091.76, 11641.8}, {8084.59, 11602.5}, {8106.02, 11557.3}, {8087.16, 11543.6}, {8082.28, 11514.1}, {8090.87, 11474.8}, {8114.39, 11489.8}, {8133.26, 11512}};
		};
		
		class Village_5832_4002 : SpawnHamlet {
			scope = public;
			position[] = {5832, 4002};
			locations[] = {{5846.03, 3988.01}, {5883.86, 3919.17}, {5864.63, 3927.37}, {5831.75, 3951.16}, {5838.31, 3981.25}, {5839.47, 4020.84}, {5855.05, 4039.9}, {5828.26, 4045.12}, {5783.53, 4072.69}, {5752.67, 4048.83}};
		};
		
		class Village_4434_3952 : SpawnHamlet {
			scope = public;
			position[] = {4434, 3952};
			locations[] = {{4423.16, 3951.62}, {4393.32, 3955.62}, {4363.99, 3959.01}, {4363.05, 3918.22}, {4392.98, 3914.51}, {4443.21, 3896.28}, {4451, 3914.73}, {4465.62, 3959.37}, {4416.05, 3981.83}, {4346.63, 3995.44}, {13540.2, 14160.2}, {13469.1, 14157.6}, {13464.9, 14144.1}, {13482.8, 14213}, {13488.5, 14241.5}};
		};
		
		class Village_13572_14102 : SpawnVillage {
			scope = public;
			position[] = {13572, 14102};
			radius = 250;
			locations[] = {{13504.3, 13989.3}, {13518.4, 14037.5}, {13547.7, 14050.4}, {13536, 14077.7}, {13604.1, 14025.6}, {13591.5, 13987.3}, {13628.1, 14059.7}, {13578.6, 14113.4}, {13594.8, 13923.1}, {13503.1, 13917.3}, {13506, 13889.5}, {13562.9, 14004.3}, {13594.5, 14053.5}, {13603.4, 14009.3}, {13620.5, 14081.5}, {13746.4, 14109.6}, {13728.2, 14086.8}, {13517.7, 14208.7}, {13544.6, 14161.4}, {13572.3, 14147.1}, {13445, 14274.3}, {13487.8, 14238.7}, {13480.6, 14213.1}, {13556.3, 14219}, {13463.4, 14158.6}, {13464.6, 14141.1}, {13553.8, 14171.6}};
		};
		
		class TopolkaCamp : SpawnHamlet {
			scope = public;
			position[] = {10318, 3510.1};
			locations[] = {{10381.5, 3493.34}, {10354.9, 3502.07}, {10359.5, 3465.33}, {10341.8, 3424.12}, {10334.3, 3412.81}, {10357.4, 3477.93}, {10347.6, 3532.13}, {10297.6, 3530.37}, {10273.1, 3534.49}, {10274.5, 3565.02}, {10276, 3517.28}, {10266.7, 3510.44}, {10283.3, 3506.99}, {10274.6, 3477.94}, {10283.7, 3454.33}};
		};
		
		class TopolkaDam : SpawnXRoad {
			scope = public;
			position[] = {10298.2, 3801.74};
			locations[] = {{10336.7, 3797.08}, {10305.7, 3796.02}, {10279, 3777.82}, {10267.3, 3813.81}, {10280.1, 3832.65}, {10250.1, 3825.46}, {10252.6, 3787.45}};
		};
		
		class XRoad_8412_4937 : SpawnXRoad {
			scope = public;
			position[] = {8412, 4937};
			locations[] = {{8412.33, 4935.15}, {8406.07, 4940.1}, {8393.91, 4949.2}, {8422.7, 4970.24}, {8443.34, 4944.43}};
		};
		
		class XRoad_4472_8813 : SpawnXRoad {
			scope = public;
			position[] = {4472, 8813};
			locations[] = {{4476.27, 8809.08}, {4485.48, 8802.43}, {4479.75, 8812.25}, {4471.54, 8830.34}};
		};
		
		class XRoad_10517_7028 : SpawnXRoad {
			scope = public;
			position[] = {10517, 7028};
			locations[] = {{10496.1, 7032.19}, {10495.5, 7026.84}, {10492.7, 7028.27}, {10457.8, 6997.99}, {10559.1, 7027.44}, {10478.8, 7062.06}};
		};
		
		class Mi8_CrashSite1 : SpawnXRoad {
			scope = public;
			position[] = {4048, 2322};
			types[] = {"ZmbM_PatrolNormal_PautRev", "ZmbM_PatrolNormal_Autumn", "ZmbM_PatrolNormal_Flat", "ZmbM_PatrolNormal_Summer", "", "ZmbM_SoldierNormal"};
			radius = 150;
			locations[] = {{4049.54, 2315.09}, {4046.66, 2295.88}, {4036.5, 2308.18}, {4014.74, 2302.93}, {4008.82, 2318.06}, {4022.14, 2332.12}, {4014.38, 2346.55}, {4026.92, 2353.01}, {4036.87, 2363.17}, {4053.38, 2336.63}, {4074.6, 2315.6}, {4081.15, 2301.94}, {4088.93, 2314.95}, {4092.54, 2335.76}, {4107.34, 2343.92}, {4110.55, 2357.89}, {4077.78, 2369.2}, {4064.05, 2382.84}, {4043.33, 2398.66}, {4048.72, 2411.62}, {4061.71, 2413.37}, {4025.25, 2406.54}};
		};
		
		class Mi8_CrashSite2 : SpawnXRoad {
			scope = public;
			position[] = {13466, 11370};
			types[] = {"ZmbM_PatrolNormal_PautRev", "ZmbM_PatrolNormal_Autumn", "ZmbM_PatrolNormal_Flat", "ZmbM_PatrolNormal_Summer", "", "ZmbM_SoldierNormal"};
			radius = 150;
			locations[] = {{13464.2, 11369.9}, {13459.7, 11379.9}, {13452.8, 11395.6}, {13437.9, 11384.6}, {13443.2, 11358.5}, {13453.5, 11346.9}, {13472, 11334.3}, {13479.9, 11344.4}, {13477.4, 11365.6}, {13485.6, 11381.3}, {13501.2, 11382.1}, {13520.1, 11400.2}, {13529, 11389.4}, {13542.3, 11389.4}, {13525.1, 11382}, {13509.1, 11398.1}, {13496.9, 11408.6}, {13481.8, 11413.8}, {13461.3, 11415.6}, {13449, 11424.8}, {13534.2, 11474.5}, {13552.4, 11479.8}, {13552.9, 11461.9}, {13564.2, 11456.6}};
		};
	};
};

class CfgLootSpawns {
	class HouseDefault {
		scope = private;
		lootMax = 6;
		
		class Spawns {
			class default {
				locations[] = {};
			};
		};
	};
	
	class Land_bmp2_wrecked : HouseDefault {
		class Spawns {
			class MilitaryWeapons {
				locations[] = {{"pointAttachments", 1}};
				lootCategory[] = {"Pistols", "Rifles", "Ammo", "Magazines"};
				lootTag[] = {"abandoned"};
			};
			
			class MilitaryClothes {
				locations[] = {{"pointClothes", 2}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Bags"};
				lootTag[] = {"abandoned"};
			};
			
			class MilitaryFirearms {
				locations[] = {{"pointFirearm", 1}};
				lootCategory[] = {"Rifles", "Attachments", "Ammo", "Magazines"};
				lootTag[] = {"abandoned"};
			};
			
			class MilitaryShoes {
				locations[] = {{"pointFootwear", 1}};
				lootCategory[] = {"Feet"};
				lootTag[] = {"abandoned"};
			};
			
			class MilitaryHeadwear {
				locations[] = {{"pointHeadwear", 1}};
				lootCategory[] = {"Headgear"};
				lootTag[] = {"abandoned"};
			};
		};
	};
	
	class Land_BRDM2_wrecked : HouseDefault {
		class Spawns : Spawns {
			class MilitaryAttachments {
				locations[] = {{"pointAttachments", 2}};
				lootCategory[] = {"Attachments", "Ammo", "Magazines"};
				lootTag[] = {"abandoned"};
			};
			
			class MilitaryClothes {
				locations[] = {{"pointClothes", 2}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Bags"};
				lootTag[] = {"abandoned"};
			};
			
			class MilitaryFirearm {
				locations[] = {{"pointFirearm", 1}};
				lootCategory[] = {"Rifles"};
				lootTag[] = {"abandoned"};
			};
			
			class MilitaryShoes {
				locations[] = {{"pointFootwear", 2}};
				lootCategory[] = {"Feet"};
				lootTag[] = {"abandoned"};
			};
			
			class MilitaryHeadwear {
				locations[] = {{"pointHeadwear", 1}};
				lootCategory[] = {"Headgear"};
				lootTag[] = {"abandoned"};
			};
		};
	};
	
	class Land_bvp1T : HouseDefault {
		class Spawns : Spawns {
			class MilitaryAttachments {
				locations[] = {{"pointAttachments", 2}};
				lootCategory[] = {"Attachments", "Ammo", "Magazines"};
				lootTag[] = {"abandoned"};
			};
			
			class MilitaryClothes {
				locations[] = {{"pointClothes", 2}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Bags"};
				lootTag[] = {"abandoned"};
			};
			
			class MilitaryFirearms {
				locations[] = {{"pointFirearm", 1}};
				lootCategory[] = {"Rifles", "Explosives"};
				lootTag[] = {"abandoned"};
			};
			
			class MilitaryShoes {
				locations[] = {{"pointFootwear", 2}};
				lootCategory[] = {"Feet"};
				lootTag[] = {"abandoned"};
			};
			
			class MilitaryHeadwear {
				locations[] = {{"pointHeadwear", 1}};
				lootCategory[] = {"Headgear"};
				lootTag[] = {"abandoned"};
			};
		};
	};
	
	class Land_datsun01T : HouseDefault {
		class Spawns : Spawns {
			class CivilianBags {
				locations[] = {{"pointBag", 1}};
				lootCategory[] = {"Bags"};
				lootTag[] = {"abandoned"};
			};
			
			class Food {
				locations[] = {{"pointCannedFood", 2}};
				lootCategory[] = {"Food"};
				lootTag[] = {"abandoned"};
			};
			
			class Firearms {
				locations[] = {{"pointFirearm", 1}};
				lootCategory[] = {"Rifles", "Ammo", "Magazines", "Pistols"};
				lootTag[] = {"abandoned"};
			};
			
			class CivilianShoes {
				locations[] = {{"pointFootwear", 2}};
				lootCategory[] = {"Feet"};
				lootTag[] = {"abandoned"};
			};
			
			class Toolss {
				locations[] = {{"pointTools", 2}, {"pointMeleeWeapon", 1}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"abandoned"};
			};
			
			class CivilianClothes {
				locations[] = {{"pointTools", 2}};
				lootCategory[] = {"Tops", "Pants", "Headgear"};
				lootTag[] = {"abandoned"};
			};
		};
	};
	
	class Land_datsun02T : HouseDefault {
		class Spawns : Spawns {
			class CivilianSupplies {
				locations[] = {{"pointCargo", 3}};
				lootCategory[] = {"Ammo", "Food", "Tools"};
				lootTag[] = {"abandoned"};
			};
			
			class CivilianClothes {
				locations[] = {{"pointSurrounding", 3}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Feet", "Bags", "Tools"};
				lootTag[] = {"abandoned"};
			};
			
			class InCar {
				locations[] = {{"pointInCar", 3}};
				lootCategory[] = {"Ammo", "Books", "Feet"};
				lootTag[] = {"abandoned"};
			};
		};
	};
	
	class Land_hiluxT : HouseDefault {
		class Spawns : Spawns {
			class CivilianSupplies {
				locations[] = {{"pointCargo", 3}};
				lootCategory[] = {"Food", "Bags", "Tools", "Rifles", "Ammo"};
				lootTag[] = {"abandoned"};
			};
			
			class CivilianClothes {
				locations[] = {{"pointSurrounding", 3}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Feet"};
				lootTag[] = {"abandoned"};
			};
			
			class CivilianHeadwear {
				locations[] = {{"pointOnTop", 2}};
				lootCategory[] = {"Headgear"};
				lootTag[] = {"abandoned"};
			};
		};
	};
	
	class Land_HMMWV_wrecked : HouseDefault {
		class Spawns : Spawns {
			class Firearms {
				locations[] = {{"pointWeapons", 1}};
				lootCategory[] = {"Rifles"};
				lootTag[] = {"abandoned"};
			};
			
			class MilitaryClothes {
				locations[] = {{"pointSurrounding", 2}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Feet"};
				lootTag[] = {"abandoned"};
			};
			
			class SmallItems {
				locations[] = {{"pointOnTop", 2}};
				lootCategory[] = {"Ammo", "Attachments", "Containers", "Explosives"};
				lootTag[] = {"abandoned"};
			};
		};
	};
	
	class Land_Mi8_Crashed : HouseDefault {
		class Spawns : Spawns {
			class SmallItems {
				locations[] = {{"pointInsideObjects", 3}};
				lootCategory[] = {"Magazines", "Ammo", "Attachments", "Containers"};
				lootTag[] = {"Military_east", "Military_east_DEvent"};
			};
			
			class MilitaryClothes {
				locations[] = {{"pointSurrounding", 4}};
				lootCategory[] = {"Tops", "Pants", "Feet", "Bags", "Vests", "Headgear", "Eyewear"};
				lootTag[] = {"Military_east", "Military_east_DEvent"};
			};
		};
	};
	
	class Land_Skodovka_wrecked : HouseDefault {
		class Spawns : Spawns {
			class UnderCar {
				locations[] = {{"pointUnderCar", 3}};
				lootCategory[] = {"Tools", "Food"};
				lootTag[] = {"abandoned"};
			};
			
			class Surrounding {
				locations[] = {{"pointSurrounding", 2}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Tools", "Rifles", "Bags", "Feet"};
				lootTag[] = {"abandoned"};
			};
			
			class OnCar {
				locations[] = {{"pointOnCar", 2}};
				lootCategory[] = {"Food", "Tools", "Ammo", "Pistols"};
				lootTag[] = {"abandoned"};
			};
		};
	};
	
	class Land_T72_Wrecked : HouseDefault {
		class Spawns : Spawns {
			class UnderCar {
				locations[] = {{"pointUnderCar", 3}};
				lootCategory[] = {"Food", "Tools", "Ammo"};
				lootTag[] = {"abandoned"};
			};
			
			class Surrounding {
				locations[] = {{"pointSurrounding", 3}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Tools", "Feet", "Bags"};
				lootTag[] = {"abandoned"};
			};
			
			class OnCar {
				locations[] = {{"pointOnCar", 3}};
				lootCategory[] = {"Pistols", "Ammo", "Magazines", "Headgear", "Tools"};
				lootTag[] = {"abandoned"};
			};
		};
	};
	
	class Land_t72_wrecked_turret : HouseDefault {
		class Spawns : Spawns {
			class OnCar {
				locations[] = {{"pointOnTop", 2}};
				lootCategory[] = {"Ammo", "Magazines", "Attachments", "Tools", "Rifles"};
				lootTag[] = {"abandoned"};
			};
			
			class Surrounding {
				locations[] = {{"pointSurrounding", 2}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Feet", "Tools"};
				lootTag[] = {"abandoned"};
			};
		};
	};
	
	class Land_uaz_wrecked : HouseDefault {
		class Spawns : Spawns {
			class CivilianSupplies {
				locations[] = {{"pointCargo", 3}};
				lootCategory[] = {"Food", "Bags", "Tops", "Pants", "Headgear", "Tools"};
				lootTag[] = {"abandoned"};
			};
			
			class InsideCar {
				locations[] = {{"pointInsideCar", 2}};
				lootCategory[] = {"Tools", "Ammo", "Pistols", "Magazines", "Food"};
				lootTag[] = {"abandoned"};
			};
			
			class OnCar {
				locations[] = {{"pointOnCar", 2}};
				lootCategory[] = {"Books", "Tools"};
				lootTag[] = {"abandoned"};
			};
			
			class Surrounding {
				locations[] = {{"pointSurrounding", 2}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Tools", "Feet"};
				lootTag[] = {"abandoned"};
			};
		};
	};
	
	class Land_ural_wrecked : HouseDefault {
		class Spawns : Spawns {
			class Surrounding {
				locations[] = {{"pointSurrounding", 3}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Medical", "Bags", "Tools", "Food", "Feet"};
				lootTag[] = {"abandoned"};
			};
			
			class InsideCar {
				locations[] = {{"pointInsideCar", 3}};
				lootCategory[] = {"Ammo", "Pistols", "Books"};
				lootTag[] = {"abandoned"};
			};
			
			class OnCar {
				locations[] = {{"pointOnCar", 2}};
				lootCategory[] = {"Books", "Tools", "Food"};
				lootTag[] = {"abandoned"};
			};
		};
	};
	
	class Land_Ikarus_Dayz : HouseDefault {
		class Spawns : Spawns {
			class Wheels {
				locations[] = {{"lootWheels", 1}};
				lootCategory[] = {"VehicleParts"};
				lootTag[] = {"BusWheels"};
			};
			
			class General {
				locations[] = {{"lootFloor", 2}, {"lootDriver", 1}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Tools", "Food", "Books", "Pistols"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_Lada_DayZ : HouseDefault {
		class Spawns : Spawns {
			class Firearm {
				locations[] = {{"PointFirearm", 1}};
				lootCategory[] = {"Rifles", "Pistols", "Ammo", "Magazines"};
				lootTag[] = {"Civilian"};
			};
			
			class Food {
				locations[] = {{"PointCannedFood", 1}, {"PointDrink", 1}};
				lootCategory[] = {"Food"};
				lootTag[] = {"Civilian"};
			};
			
			class Medium_Large {
				locations[] = {{"Medium_Large", 3}};
				lootCategory[] = {"Tops", "Pants", "Tools", "Containers", "Feet", "Headgear"};
				lootTag[] = {"Civilian"};
			};
			
			class Medical {
				locations[] = {{"PointMedical", 1}};
				lootCategory[] = {"Medical"};
			};
			
			class SmallVarious {
				locations[] = {{"PointSmallVarious", 1}};
				lootCategory[] = {"Ammo", "Eyewear", "Tools", "Books", "Food"};
				lootTag[] = {"Civilian", "Office", "Camping", "Maps"};
			};
		};
	};
	
	class Land_Lada_red_DayZ : HouseDefault {
		class Spawns : Spawns {
			class Firearm {
				locations[] = {{"PointFirearm", 1}};
				lootCategory[] = {"Rifles", "Pistols", "Ammo", "Magazines"};
				lootTag[] = {"Civilian"};
			};
			
			class Food {
				locations[] = {{"PointCannedFood", 1}, {"PointDrink", 1}};
				lootCategory[] = {"Food"};
				lootTag[] = {"Civilian"};
			};
			
			class Medium_Large {
				locations[] = {{"Medium_Large", 3}};
				lootCategory[] = {"Tops", "Pants", "Tools", "Containers", "Feet", "Headgear"};
				lootTag[] = {"Civilian"};
			};
			
			class Medical {
				locations[] = {{"PointMedical", 1}};
				lootCategory[] = {"Medical"};
			};
			
			class SmallVarious {
				locations[] = {{"PointSmallVarious", 1}};
				lootCategory[] = {"Ammo", "Eyewear", "Tools", "Books", "Food"};
				lootTag[] = {"Civilian", "Office", "Camping", "Maps"};
			};
		};
	};
	
	class Land_s1203_DayZ : HouseDefault {
		class Spawns : Spawns {
			class Group1 {
				locations[] = {{"lootBack", 2}, {"lootFront", 2}};
				lootCategory[] = {"Tops", "Pants", "Feet", "Headgear", "Tools", "Books", "Food", "Pistols"};
				lootTag[] = {"Civilian"};
			};
			
			class Group2 {
				locations[] = {{"lootDash", 2}};
				lootCategory[] = {"Food"};
				lootTag[] = {"Civilian"};
			};
			
			class Group3 {
				locations[] = {{"lootOutside", 3}};
				lootCategory[] = {"Food", "Books", "Tops", "Pants", "Headgear", "Tools"};
				lootTag[] = {"Civilian"};
			};
			
			class Group4 {
				locations[] = {{"lootUnder", 2}};
				lootCategory[] = {"Tools", "Tops", "Pants", "Headgear"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_s1203_baige_DayZ : Land_s1203_DayZ {};
	
	class Land_Volha_DayZ : HouseDefault {
		class Spawns : Spawns {
			class Car {
				locations[] = {{"lootCar", 2}};
				lootCategory[] = {"Bags", "Tops", "Food", "Ammo", "Pistols"};
				lootTag[] = {"Civilian"};
			};
			
			class Wheels {
				locations[] = {{"lootWheels", 2}};
				lootCategory[] = {"VehicleParts"};
				lootTag[] = {"SedanWheels"};
			};
			
			class Surrounding {
				locations[] = {{"lootSurrounding", 3}};
				lootCategory[] = {"VehicleParts", "Headgear", "Tools", "Feet"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_Volha_grey_DayZ : Land_Volha_DayZ {};
	
	class Land_Volha_police_DayZ : HouseDefault {
		class Spawns : Spawns {
			class Surrounding {
				locations[] = {{"lootSurrounding", 2}};
				lootCategory[] = {"Bags", "Feet", "Explosives"};
				lootTag[] = {"Police"};
			};
			
			class Weapons {
				locations[] = {{"lootWeapons", 1}};
				lootCategory[] = {"Tools", "Pistols", "Rifles"};
				lootTag[] = {"Police"};
			};
			
			class InsideCar {
				locations[] = {{"lootInCar", 2}};
				lootCategory[] = {"Tops", "Pants", "Vests", "Ammo", "Magazines"};
				lootTag[] = {"Police"};
			};
			
			class Wheels {
				locations[] = {{"lootWheels", 2}};
				lootCategory[] = {"VehicleParts"};
				lootTag[] = {"SedanWheels"};
			};
		};
	};
	
	class Land_UH1Y_Wreck : HouseDefault {
		lootMax = 20;
		
		class Spawns : Spawns {
			class Weapons {
				locations[] = {{"LootWeapons", 3}};
				lootCategory[] = {"Explosives"};
				lootTag[] = {"Military_west_DEvent", "Military_west"};
			};
			
			class Clothes {
				locations[] = {{"LootClothes", 3}};
				lootCategory[] = {"Tops", "Headgear", "Pants", "Vests", "Eyewear"};
				lootTag[] = {"Military_west_DEvent", "Military_west"};
			};
			
			class Attachments {
				locations[] = {{"LootAttachments", 3}};
				lootCategory[] = {"Ammo", "Magazines", "Attachments", "Containers"};
				lootTag[] = {"Military_west_DEvent", "Military_west"};
			};
		};
	};
	
	class Land_A_GeneralStore_01 : HouseDefault {
		lootMax = 15;
		
		class Spawns : Spawns {
			class Small {
				locations[] = {{"LootSmall", 5}};
				lootCategory[] = {"Tools", "Food", "Pistols", "Rifles"};
				lootTag[] = {"Camping", "Civilian", "Maps"};
			};
			
			class Medium {
				locations[] = {{"LootMedium", 5}};
				lootCategory[] = {"Tools", "Bags", "Food", "Pistols", "Rifles"};
				lootTag[] = {"Camping", "Civilian"};
			};
		};
	};
	
	class Land_Hlidac_budka : HouseDefault {
		class Spawns : Spawns {
			class ItemsFloor {
				locations[] = {{"LootFloor", 1}};
				lootCategory[] = {"Materials", "Rifles", "Tools", "Ammo", "Pistols", "Books"};
				lootTag[] = {"Civilian", "Maps", "Police"};
			};
			
			class ItemsBox {
				locations[] = {{"LootBox", 1}};
				lootCategory[] = {"Food", "Ammo"};
				lootTag[] = {"Civilian", "Police"};
			};
			
			class ItemsTable {
				locations[] = {{"LootTable", 2}};
				lootCategory[] = {"Pistols", "Ammo", "Food", "Tools", "Rifles", "Books"};
				lootTag[] = {"Civilian", "Maps", "Police"};
			};
		};
	};
	
	class Land_A_GeneralStore_01a : HouseDefault {
		lootMax = 15;
		
		class Spawns : Spawns {
			class Small {
				locations[] = {{"Small", 5}};
				lootCategory[] = {"Tools", "Food", "Pistols", "Rifles"};
				lootTag[] = {"Camping", "Civilian", "Maps"};
			};
			
			class Medium {
				locations[] = {{"Medium", 5}};
				lootCategory[] = {"Tools", "Bags", "Food", "Pistols", "Rifles"};
				lootTag[] = {"Camping", "Civilian"};
			};
		};
	};
	
	class Land_A_Pub_01 : HouseDefault {
		class Spawns : Spawns {
			class BedroomSmall {
				locations[] = {{"BedroomSmall", 3}};
				lootCategory[] = {"Books", "Medical", "Ammo", "Eyewear", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class BedroomMedium {
				locations[] = {{"BedroomMedium", 2}};
				lootCategory[] = {"Bags", "Tools", "Food", "Rifles", "Pistols"};
				lootTag[] = {"Civilian"};
			};
			
			class LivingRoomSmall {
				locations[] = {{"LivingRoomSmall", 4}};
				lootCategory[] = {"Books", "Ammo", "Eyewear", "Food"};
				lootTag[] = {"Civilian", "Maps"};
			};
			
			class LivingRoomMedium {
				locations[] = {{"LivingRoomMedium", 2}};
				lootCategory[] = {"Bags", "Tools", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class PubSmall {
				locations[] = {{"PubSmall", 3}};
				lootCategory[] = {"Tools", "Ammo", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class PubMedium {
				locations[] = {{"PubMedium", 2}};
				lootCategory[] = {"Tools", "Food", "Containers"};
				lootTag[] = {"Civilian"};
			};
			
			class TopCorridors {
				locations[] = {{"TopCorridors", 3}};
				lootCategory[] = {"Food", "Tools"};
				lootTag[] = {"Civilian", "Office"};
			};
			
			class TopRoomSmall {
				locations[] = {{"TopRoomSmall", 3}};
				lootCategory[] = {"Ammo", "Food", "Tools"};
				lootTag[] = {"Civilian", "Office"};
			};
			
			class TopRoomMedium {
				locations[] = {{"TopRoomMedium", 2}};
				lootCategory[] = {"Tools", "Food", "Containers"};
				lootTag[] = {"Civilian", "Office"};
			};
			
			class TopStorageSmall {
				locations[] = {{"TopStorageSmall", 3}};
				lootCategory[] = {"Tools", "Food", "Containers"};
				lootTag[] = {"Civilian", "Office"};
			};
			
			class TopStorageMedium {
				locations[] = {{"TopStorageMedium", 2}};
				lootCategory[] = {"Tools", "Food", "Books", "Rifles", "Containers", "Pistols"};
				lootTag[] = {"Civilian", "Office"};
			};
			
			class Trash {
				locations[] = {{"Trash", 3}};
				lootCategory[] = {"Tools", "Food"};
				lootTag[] = {"Civilian", "Office"};
			};
			
			class Corridor {
				locations[] = {{"Corridor", 2}};
				lootCategory[] = {"Tools", "Food"};
				lootTag[] = {"Civilian", "Office"};
			};
		};
	};
	
	class Land_Barn_Metal : HouseDefault {
		class Spawns : Spawns {
			class Trash {
				locations[] = {{"Trash", 4}};
				lootCategory[] = {"Tools", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class Tools {
				locations[] = {{"Tools", 5}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_Chapel_01 : HouseDefault {
		class Spawns : Spawns {
			class Altar {
				locations[] = {{"pointAltar", 1}};
				lootCategory[] = {"Books", "Food", "Medical"};
				lootTag[] = {"Civilian", "Religious"};
			};
			
			class Small {
				locations[] = {{"pointAlongWall", 1}, {"pointCenter", 1}};
				lootCategory[] = {"Tools", "Ammo", "Medical", "Tools", "Magazines", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class Big {
				locations[] = {{"pointCenter", 1}};
				lootCategory[] = {"Tools", "Rifles", "Pistols", "Food"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_Farm_Cowshed_a : HouseDefault {
		lootMax = 2;
		
		class Spawns : Spawns {
			class Loot {
				locations[] = {{"Loot", 4}};
				lootCategory[] = {"Tops", "Pants", "Rifles", "Bags", "Tools", "Feet", "Headgear", "Food", "Pistols"};
				lootTag[] = {"Civilian", "Farm"};
			};
		};
	};
	
	class Land_Farm_Cowshed_b : HouseDefault {
		lootMax = 2;
		
		class Spawns : Spawns {
			class Loot {
				locations[] = {{"Loot", 3}};
				lootCategory[] = {"Tops", "Pants", "Rifles", "Bags", "Tools", "Feet", "Headgear", "Food", "Pistols"};
				lootTag[] = {"Civilian", "Farm"};
			};
		};
	};
	
	class Land_Farm_Cowshed_c : HouseDefault {
		lootMax = 2;
		
		class Spawns : Spawns {
			class Loot {
				locations[] = {{"Loot", 4}};
				lootCategory[] = {"Tops", "Pants", "Rifles", "Bags", "Tools", "Feet", "Headgear", "Food", "Pistols"};
				lootTag[] = {"Civilian", "Farm"};
			};
		};
	};
	
	class Land_HouseBlock_A1 : HouseDefault {
		class Spawns : Spawns {
			class GroundSmall {
				locations[] = {{"GroundSmall", 4}};
				lootCategory[] = {"Ammo", "Eyewear", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class GroundMedium {
				locations[] = {{"GroundMedium", 2}};
				lootCategory[] = {"Tops", "Pants", "Magazines", "Rifles", "Tools", "Feet", "Headgear", "Pistols"};
				lootTag[] = {"Civilian"};
			};
			
			class Stairs {
				locations[] = {{"Stairs", 3}};
				lootCategory[] = {"Ammo", "Tops", "Pants", "Rifles", "Headgear", "Tools", "Food", "Pistols"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_HouseBlock_A1_1 : HouseDefault {
		class Spawns : Spawns {
			class GroundSmall {
				locations[] = {{"GroundSmall", 5}};
				lootCategory[] = {"Ammo", "Food", "Eyewear", "Tools"};
				lootTag[] = {"Civilian"};
			};
			
			class GroundMedium {
				locations[] = {{"GroundMedium", 2}};
				lootCategory[] = {"Tops", "Pants", "Tools", "Rifles", "Feet", "Headgear", "Pistols"};
				lootTag[] = {"Civilian"};
			};
			
			class Stairs {
				locations[] = {{"Stairs", 3}};
				lootCategory[] = {"Ammo", "Tops", "Pants", "Headgear", "Materials", "Rifles", "Tools", "Feet", "Magazines", "Pistols"};
				lootTag[] = {"Civilian"};
			};
			
			class TopSmall {
				locations[] = {{"TopSmall", 3}};
				lootCategory[] = {"Ammo", "Eyewear", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class TopMedium {
				locations[] = {{"TopMedium", 1}};
				lootCategory[] = {"Tops", "Pants", "Tools", "Rifles", "Feet", "Headgear", "Pistols"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_HouseBlock_A1_2 : HouseDefault {
		class Spawns : Spawns {
			class GroundSmall {
				locations[] = {{"GroundSmall", 4}};
				lootCategory[] = {"Ammo", "Tools", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class GroundMedium {
				locations[] = {{"GroundMedium", 2}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Tools", "Magazines", "Rifles", "Feet", "Pistols"};
				lootTag[] = {"Civilian"};
			};
			
			class TopSmall {
				locations[] = {{"TopSmall", 3}};
				lootCategory[] = {"Ammo", "Eyewear", "Books", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class TopMedium {
				locations[] = {{"TopMedium", 1}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Feet"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_HouseBlock_A2 : HouseDefault {
		class Spawns : Spawns {
			class PubSmall {
				locations[] = {{"PubSmall", 4}};
				lootCategory[] = {"Tools", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class PubMedium {
				locations[] = {{"PubMedium", 2}};
				lootCategory[] = {"Bags", "Tops", "Pants", "Headgear", "Tools", "Food", "Feet", "Tools"};
				lootTag[] = {"Civilian"};
			};
			
			class Hall {
				locations[] = {{"Hall", 3}};
				lootCategory[] = {"Bags", "Tops", "Pants", "Headgear", "Tools", "Ammo", "Feet"};
				lootTag[] = {"Civilian"};
			};
			
			class WorkshopSmall {
				locations[] = {{"WorkshopSmall", 3}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Work", "Civilian"};
			};
			
			class WorkshopMedium {
				locations[] = {{"WorkshopMedium", 2}};
				lootCategory[] = {"Bags", "Tops", "Pants", "Headgear", "Tools", "Feet"};
				lootTag[] = {"Work", "Civilian"};
			};
		};
	};
	
	class Land_HouseBlock_A2_1 : HouseDefault {
		class Spawns : Spawns {
			class Hall {
				locations[] = {{"Hall", 3}};
				lootCategory[] = {"Bags", "Tops", "Pants", "Headgear", "Tools", "Ammo"};
				lootTag[] = {"Work", "Civilian"};
			};
			
			class WorkshopSmall {
				locations[] = {{"WorkshopSmall", 3}};
				lootCategory[] = {"Food", "Tools", "Ammo"};
				lootTag[] = {"Work", "Civilian"};
			};
			
			class WorkshopMedium {
				locations[] = {{"WorkshopMedium", 2}};
				lootCategory[] = {"Bags", "Tops", "Pants", "Tools", "Feet", "Headgear", "Pistols"};
				lootTag[] = {"Work", "Civilian"};
			};
			
			class RoomSmall {
				locations[] = {{"RoomSmall", 2}};
				lootCategory[] = {"Ammo", "Books", "Tools", "Food"};
				lootTag[] = {"Work", "Civilian"};
			};
			
			class RoomMedium {
				locations[] = {{"RoomMedium", 1}};
				lootCategory[] = {"Bags", "Tops", "Pants", "Headgear", "Tools", "Rifles", "Feet", "Pistols"};
				lootTag[] = {"Work", "Civilian"};
			};
			
			class Stairs {
				locations[] = {{"Stairs", 3}};
				lootCategory[] = {"Ammo", "Books", "Tools"};
				lootTag[] = {"Work", "Civilian"};
			};
		};
	};
	
	class Land_HouseBlock_A3 : HouseDefault {
		class Spawns : Spawns {
			class WorkshopSmall {
				locations[] = {{"WorkshopSmall", 3}};
				lootCategory[] = {"Attachments", "Food", "Ammo", "Masks", "Tools", "Containers"};
				lootTag[] = {"Civilian", "Camping"};
			};
			
			class WorkshopMedium {
				locations[] = {{"WorkshopMedium", 2}};
				lootCategory[] = {"Bags", "Tops", "Pants", "Headgear", "Tools", "Feet"};
				lootTag[] = {"Civilian", "Camping"};
			};
		};
	};
	
	class Land_HouseBlock_B1 : HouseDefault {
		class Spawns : Spawns {
			class ShopSmall {
				locations[] = {{"ShopSmall", 3}};
				lootCategory[] = {"Attachments", "Food", "Ammo", "Books", "Materials", "Tools", "Books"};
				lootTag[] = {"Civilian", "Camping", "Maps", "Camping"};
			};
			
			class ShopMedium {
				locations[] = {{"ShopMedium", 2}};
				lootCategory[] = {"Bags", "Tops", "Pants", "Headgear", "Tools", "Food", "Feet", "Pistols"};
				lootTag[] = {"Civilian"};
			};
			
			class Hall1 {
				locations[] = {{"Hall1", 3}};
				lootCategory[] = {"Ammo", "Tools", "Food", "Materials", "Tools"};
				lootTag[] = {"Civilian", "Office"};
			};
			
			class Hall2Medium {
				locations[] = {{"Hall2Medium", 2}};
				lootCategory[] = {"Bags", "Tops", "Pants", "Headgear", "Tools", "Food", "Rifles", "Feet", "Masks"};
				lootTag[] = {"Civilian"};
			};
			
			class Hall2Small {
				locations[] = {{"Hall2Small", 3}};
				lootCategory[] = {"Ammo", "Attachments", "Food", "Materials", "Books", "Tools"};
				lootTag[] = {"Civilian", "Office", "Maps", "Camping"};
			};
			
			class LivingRoomMedium {
				locations[] = {{"LivingRoomMedium", 2}};
				lootCategory[] = {"Bags", "Tops", "Pants", "Headgear", "Tools", "Food", "Rifles", "Pistols"};
				lootTag[] = {"Civilian"};
			};
			
			class LivingRoomSmall {
				locations[] = {{"LivingRoomSmall", 3}};
				lootCategory[] = {"Ammo", "Attachments", "Food", "Materials", "Books", "Tools"};
				lootTag[] = {"Civilian", "Office"};
			};
			
			class TopMedium {
				locations[] = {{"TopMedium", 1}};
				lootCategory[] = {"Bags", "Tops", "Pants", "Headgear", "Tools", "Food", "Rifles", "Pistols"};
				lootTag[] = {"Civilian"};
			};
			
			class TopSmall {
				locations[] = {{"TopSmall", 3}};
				lootCategory[] = {"Ammo", "Attachments", "Materials", "Books"};
				lootTag[] = {"Civilian", "Office"};
			};
		};
	};
	
	class Land_HouseBlock_B2 : HouseDefault {
		class Spawns : Spawns {
			class Hall1Medium {
				locations[] = {{"Hall1Medium", 1}};
				lootCategory[] = {"Bags", "Tops", "Pants", "Headgear", "Tools", "Feet"};
				lootTag[] = {"Civilian"};
			};
			
			class Hall1Small {
				locations[] = {{"Hall1Small", 3}};
				lootCategory[] = {"Attachments", "Food", "Tools", "Materials"};
				lootTag[] = {"Civilian", "Camping"};
			};
			
			class Hall2Medium {
				locations[] = {{"Hall2Medium", 1}};
				lootCategory[] = {"Bags", "Tops", "Pants", "Headgear", "Tools", "Feet"};
				lootTag[] = {"Civilian"};
			};
			
			class Hall2Small {
				locations[] = {{"Hall2Small", 3}};
				lootCategory[] = {"Ammo", "Attachments", "Food", "Medical"};
				lootTag[] = {"Civilian"};
			};
			
			class TopMedium {
				locations[] = {{"TopMedium", 1}};
				lootCategory[] = {"Bags", "Tops", "Pants", "Headgear", "Tools", "Materials", "Magazines", "Rifles", "Pistols"};
				lootTag[] = {"Civilian"};
			};
			
			class TopSmall {
				locations[] = {{"TopSmall", 3}};
				lootCategory[] = {"Ammo", "Food", "Materials"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_HouseBlock_B3 : HouseDefault {
		class Spawns : Spawns {
			class Medium {
				locations[] = {{"Medium", 1}};
				lootCategory[] = {"Bags", "Tools", "Materials", "Magazines", "Rifles", "Pistols"};
				lootTag[] = {"Civilian"};
			};
			
			class Small {
				locations[] = {{"Small", 3}};
				lootCategory[] = {"Ammo", "Food", "Materials", "Books"};
				lootTag[] = {"Civilian", "Maps"};
			};
		};
	};
	
	class Land_HouseBlock_B4 : HouseDefault {
		class Spawns : Spawns {
			class Hall1Medium {
				locations[] = {{"Hall1Medium", 2}};
				lootCategory[] = {"Bags", "Tools", "Tops", "Pants", "Headgear", "Feet"};
				lootTag[] = {"Civilian"};
			};
			
			class Hall1Small {
				locations[] = {{"Hall1Small", 3}};
				lootCategory[] = {"Attachments", "Tools", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class Hall2Medium {
				locations[] = {{"Hall2Medium", 2}};
				lootCategory[] = {"Bags", "Tools", "Materials", "Tops", "Pants", "Headgear", "Feet", "Masks"};
				lootTag[] = {"Civilian"};
			};
			
			class Hall2Small {
				locations[] = {{"Hall2Small", 2}};
				lootCategory[] = {"Food", "Medical", "Ammo", "Attachments", "Materials"};
				lootTag[] = {"Civilian"};
			};
			
			class TopMedium {
				locations[] = {{"TopMedium", 1}};
				lootCategory[] = {"Bags", "Tools", "Materials", "Rifles", "Tops", "Pants", "Headgear", "Pistols"};
				lootTag[] = {"Civilian"};
			};
			
			class TopSmall {
				locations[] = {{"TopSmall", 2}};
				lootCategory[] = {"Ammo", "Food", "Materials"};
				lootTag[] = {"Civilian"};
			};
			
			class RoomMedium {
				locations[] = {{"RoomMedium", 1}};
				lootCategory[] = {"Bags", "Tools", "Materials", "Food", "Tops", "Pants", "Headgear"};
				lootTag[] = {"Civilian"};
			};
			
			class RoomSmall {
				locations[] = {{"RoomSmall", 3}};
				lootCategory[] = {"Materials", "Books", "Food"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_HouseBlock_B5 : HouseDefault {
		class Spawns : Spawns {
			class Medium {
				locations[] = {{"Medium", 1}};
				lootCategory[] = {"Bags", "Tools", "Materials", "Tops", "Pants", "Headgear"};
				lootTag[] = {"Civilian"};
			};
			
			class Small {
				locations[] = {{"Small", 2}};
				lootCategory[] = {"Ammo", "Food", "Materials"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_HouseBlock_B6 : HouseDefault {
		class Spawns : Spawns {
			class Medium {
				locations[] = {{"Medium", 2}};
				lootCategory[] = {"Tools", "Materials", "Food"};
				lootTag[] = {"Kitchen"};
			};
			
			class Small {
				locations[] = {{"Small", 3}};
				lootCategory[] = {"Tools", "Materials"};
				lootTag[] = {"Kitchen"};
			};
		};
	};
	
	class Land_HouseBlock_C2 : HouseDefault {
		class Spawns : Spawns {
			class Hall1Medium {
				locations[] = {{"Hall1Medium", 1}};
				lootCategory[] = {"Bags", "Tools", "Materials", "Tops", "Pants", "Headgear", "Feet"};
				lootTag[] = {"Civilian"};
			};
			
			class Hall1Small {
				locations[] = {{"Hall1Small", 3}};
				lootCategory[] = {"Ammo", "Materials", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class Hall2Medium {
				locations[] = {{"Hall2Medium", 1}};
				lootCategory[] = {"Bags", "Tools", "Materials", "Tops", "Pants", "Headgear", "Feet"};
				lootTag[] = {"Civilian"};
			};
			
			class Hall2Small {
				locations[] = {{"Hall2Small", 2}};
				lootCategory[] = {"Ammo", "Materials", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class Hall3Medium {
				locations[] = {{"Hall3Medium", 1}};
				lootCategory[] = {"Tools", "Materials", "Tops", "Pants", "Headgear", "Feet"};
				lootTag[] = {"Civilian"};
			};
			
			class Hall3Small {
				locations[] = {{"Hall3Small", 2}};
				lootCategory[] = {"Ammo", "Materials", "Tools"};
				lootTag[] = {"Civilian"};
			};
			
			class Room1Medium {
				locations[] = {{"Room1Medium", 1}};
				lootCategory[] = {"Bags", "Tools", "Materials", "Tops", "Pants", "Headgear", "Feet"};
				lootTag[] = {"Civilian"};
			};
			
			class Room1Small {
				locations[] = {{"Room1Small", 3}};
				lootCategory[] = {"Ammo", "Materials", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class Room2Medium {
				locations[] = {{"Room2Medium", 1}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Rifles", "Materials", "Tools", "Pistols"};
				lootTag[] = {"Civilian"};
			};
			
			class Room2Small {
				locations[] = {{"Room2Small", 2}};
				lootCategory[] = {"Food", "Ammo", "Materials", "Tools"};
				lootTag[] = {"Civilian", "Kitchen"};
			};
			
			class Room2Stove {
				locations[] = {{"Room2Stove", 1}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Kitchen"};
			};
			
			class Room2Kitchen {
				locations[] = {{"Room2Kitchen", 2}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Kitchen"};
			};
		};
	};
	
	class Land_HouseBlock_C3 : HouseDefault {
		class Spawns : Spawns {
			class Hall1Medium {
				locations[] = {{"Hall1Medium", 2}};
				lootCategory[] = {"Bags", "Tools", "Materials", "Tops", "Pants", "Headgear"};
				lootTag[] = {"Civilian"};
			};
			
			class Hall1Small {
				locations[] = {{"Hall1Small", 2}};
				lootCategory[] = {"Food", "Ammo", "Materials"};
				lootTag[] = {"Civilian"};
			};
			
			class Hall2Medium {
				locations[] = {{"Hall2Medium", 1}};
				lootCategory[] = {"Bags", "Tools", "Materials", "Tops", "Pants", "Headgear"};
				lootTag[] = {"Civilian"};
			};
			
			class Hall2Small {
				locations[] = {{"Hall2Small", 2}};
				lootCategory[] = {"Food", "Ammo", "Materials"};
				lootTag[] = {"Civilian"};
			};
			
			class Hall3Medium {
				locations[] = {{"Hall3Medium", 1}};
				lootCategory[] = {"Bags", "Tools", "Materials", "Tops", "Pants", "Headgear"};
				lootTag[] = {"Civilian"};
			};
			
			class Hall3Small {
				locations[] = {{"Hall3Small", 2}};
				lootCategory[] = {"Tools", "Ammo", "Materials"};
				lootTag[] = {"Civilian"};
			};
			
			class Room1Medium {
				locations[] = {{"Room1Medium", 1}};
				lootCategory[] = {"Bags", "Materials", "Tops", "Pants", "Headgear", "Feet", "Tools"};
				lootTag[] = {"Civilian"};
			};
			
			class Room1Small {
				locations[] = {{"Room1Small", 2}};
				lootCategory[] = {"Food", "Ammo", "Materials"};
				lootTag[] = {"Civilian"};
			};
			
			class Room2Medium {
				locations[] = {{"Room2Medium", 1}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Rifles", "Materials", "Food", "Masks", "Pistols"};
				lootTag[] = {"Civilian"};
			};
			
			class Room2Small {
				locations[] = {{"Room2Small", 2}};
				lootCategory[] = {"Ammo", "Materials", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class Room2Stove {
				locations[] = {{"Room2Stove", 1}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Kitchen"};
			};
			
			class Room2Kitchen {
				locations[] = {{"Room2Kitchen", 2}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Kitchen"};
			};
		};
	};
	
	class Land_HouseBlock_C4 : HouseDefault {
		class Spawns : Spawns {
			class HallMedium {
				locations[] = {{"HallMedium", 1}};
				lootCategory[] = {"Tools", "Materials", "Tops", "Pants", "Headgear", "Feet"};
				lootTag[] = {"Civilian"};
			};
			
			class HallSmall {
				locations[] = {{"HallSmall", 2}};
				lootCategory[] = {"Ammo", "Materials", "Tools"};
				lootTag[] = {"Civilian"};
			};
			
			class RoomMedium {
				locations[] = {{"RoomMedium", 1}};
				lootCategory[] = {"Books", "Tools", "Materials", "Tops", "Pants", "Headgear"};
				lootTag[] = {"Civilian", "Kitchen"};
			};
			
			class RoomSmall {
				locations[] = {{"RoomSmall", 2}};
				lootCategory[] = {"Ammo", "Tools", "Books"};
				lootTag[] = {"Civilian", "Office"};
			};
			
			class RoomKitchen {
				locations[] = {{"RoomKitchen", 2}};
				lootCategory[] = {"Materials", "Food", "Tools"};
				lootTag[] = {"Civilian", "Kitchen"};
			};
		};
	};
	
	class Land_HouseBlock_C5 : Land_HouseBlock_C4 {
		class Spawns : Spawns {
			class HallMedium {
				locations[] = {{"HallMedium", 1}};
				lootCategory[] = {"Tools", "Materials", "Tops", "Pants", "Feet", "Headgear", "Masks"};
				lootTag[] = {"Civilian"};
			};
			
			class HallSmall {
				locations[] = {{"HallSmall", 2}};
				lootCategory[] = {"Ammo", "Tools", "Materials", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class RoomMedium {
				locations[] = {{"RoomMedium", 1}};
				lootCategory[] = {"Ammo", "Tools", "Materials"};
				lootTag[] = {"Civilian", "Hygiene", "Kitchen"};
			};
			
			class RoomSmall {
				locations[] = {{"RoomSmall", 2}};
				lootCategory[] = {"Ammo", "Food", "Materials"};
				lootTag[] = {"Civilian", "Kitchen"};
			};
		};
	};
	
	class Land_Ind_Pec_01 : HouseDefault {
		class Spawns : Spawns {
			class loot {
				locations[] = {{"loot_p_all", 10}};
				lootCategory[] = {"Ammo", "Tools", "Rifles", "Food", "Pistols"};
				lootTag[] = {"Civilian", "Work"};
			};
		};
	};
	
	class Land_Ind_Pec_03a : HouseDefault {
		class Spawns : Spawns {
			class Hall {
				locations[] = {{"LootHall", 5}};
				lootCategory[] = {"Tools", "Food", "Feet", "Tops", "Pants", "Containers", "Materials"};
				lootTag[] = {"Civilian", "Work"};
			};
			
			class Office {
				locations[] = {{"LootOffice", 2}};
				lootCategory[] = {"Tools", "Food"};
				lootTag[] = {"Office"};
			};
			
			class Office2 {
				locations[] = {{"LootOffice2", 1}};
				lootCategory[] = {"Food", "Feet", "Tops", "Pants"};
				lootTag[] = {"Civilian", "Work"};
			};
			
			class Office3 {
				locations[] = {{"LootOffice3", 2}};
				lootCategory[] = {"Tools", "Food", "Medical"};
				lootTag[] = {"Kitchen"};
			};
		};
	};
	
	class Land_Ind_Garage01 : HouseDefault {
		lootMax = 3;
		
		class Spawns : Spawns {
			class Center {
				locations[] = {{"lootCenter", 2}};
				lootCategory[] = {"Bags", "Tools", "Tops", "Pants", "Headgear", "Feet", "Tools", "VehicleParts"};
				lootTag[] = {"Civilian", "Work", "Wheels"};
			};
			
			class Around {
				locations[] = {{"lootAround", 3}};
				lootCategory[] = {"Ammo", "Books", "Food"};
				lootTag[] = {"Civilian", "Work"};
			};
		};
	};
	
	class Land_Ind_Workshop01_01 : HouseDefault {
		lootMax = 3;
		
		class Spawns : Spawns {
			class Medium {
				locations[] = {{"lootMedium", 8}};
				lootCategory[] = {"Bags", "Tools", "Tops", "Pants", "Headgear"};
				lootTag[] = {"Civilian", "Work", "Farm"};
			};
			
			class Small {
				locations[] = {{"lootSmall", 19}};
				lootCategory[] = {"Ammo", "Food", "Tools"};
				lootTag[] = {"Civilian", "Work", "Farm"};
			};
		};
	};
	
	class Land_Ind_Workshop01_02 : HouseDefault {
		class Spawns : Spawns {
			class Small {
				locations[] = {{"lootAround", 9}};
				lootCategory[] = {"Materials"};
				lootTag[] = {"Work", "Farm"};
			};
			
			class Large {
				locations[] = {{"lootCenter", 6}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Work", "Farm"};
			};
		};
	};
	
	class Land_Ind_Workshop01_03 : HouseDefault {
		lootMax = 4;
		
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"lootFloor", 25}};
				lootCategory[] = {"Materials", "Tops", "Pants", "Headgear", "Feet"};
				lootTag[] = {"Civilian", "Work", "Farm"};
			};
			
			class Tables {
				locations[] = {{"lootTable", 8}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Civilian", "Work", "Farm"};
			};
			
			class Cases {
				locations[] = {{"lootCase", 13}};
				lootCategory[] = {"Tools", "Food"};
				lootTag[] = {"Civilian", "Work", "Farm"};
			};
		};
	};
	
	class Land_Ind_Workshop01_04 : HouseDefault {
		class Spawns : Spawns {
			class Small {
				locations[] = {{"lootSmall", 28}};
				lootCategory[] = {"Materials"};
				lootTag[] = {"Work", "Farm"};
			};
			
			class Large {
				locations[] = {{"lootBig", 31}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Work", "Farm"};
			};
		};
	};
	
	class Land_Ind_Workshop01_L : HouseDefault {
		class Spawns : Spawns {
			class Small {
				locations[] = {{"lootSmall", 31}};
				lootCategory[] = {"Materials"};
				lootTag[] = {"Work", "Farm"};
			};
			
			class Large {
				locations[] = {{"lootBig", 22}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Work", "Farm"};
			};
		};
	};
	
	class Land_Shed_W01 : HouseDefault {
		lootMax = 2;
		
		class Spawns : Spawns {
			class Small {
				locations[] = {{"pointAlongWalls", 1}};
				lootCategory[] = {"Materials"};
				lootTag[] = {"Work", "Forester", "Farm"};
			};
			
			class Large {
				locations[] = {{"pointCenter", 1}};
				lootCategory[] = {"Tools", "Containers"};
				lootTag[] = {"Work", "Forester", "Farm"};
			};
			
			class Outside {
				locations[] = {{"pointOutsideShed", 1}};
				lootCategory[] = {"Tools", "Materials"};
				lootTag[] = {"Work", "Forester"};
			};
		};
	};
	
	class Land_Shed_W02 : HouseDefault {
		lootMax = 2;
		
		class Spawns : Spawns {
			class Small {
				locations[] = {{"pointAlongWalls", 1}};
				lootCategory[] = {"Materials"};
				lootTag[] = {"Work", "Forester", "Farm"};
			};
			
			class Large {
				locations[] = {{"pointCenter", 1}};
				lootCategory[] = {"Tools", "Containers"};
				lootTag[] = {"Work", "Forester", "Farm"};
			};
		};
	};
	
	class Land_Shed_M01 : HouseDefault {
		lootMax = 2;
		
		class Spawns : Spawns {
			class Small {
				locations[] = {{"pointAlongWalls", 1}};
				lootCategory[] = {"Materials"};
				lootTag[] = {"Work", "Forester", "Farm"};
			};
			
			class Large {
				locations[] = {{"pointCenter", 1}};
				lootCategory[] = {"Tools", "Containers"};
				lootTag[] = {"Work", "Forester", "Farm"};
			};
		};
	};
	
	class Land_Shed_M02 : HouseDefault {
		class Spawns : Spawns {
			class Small {
				locations[] = {{"pointAround", 2}};
				lootCategory[] = {"Tools", "Materials"};
				lootTag[] = {"abandoned"};
			};
			
			class Large {
				locations[] = {{"pointUnder", 2}};
				lootCategory[] = {"Rifles", "Tools"};
				lootTag[] = {"abandoned"};
			};
		};
	};
	
	class Land_Shed_M03 : HouseDefault {
		lootMax = 2;
		
		class Spawns : Spawns {
			class Small {
				locations[] = {{"pointAlongWalls", 1}};
				lootCategory[] = {"Materials"};
				lootTag[] = {"Work", "Forester", "Farm"};
			};
			
			class Large {
				locations[] = {{"pointCenter", 1}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Work", "Forester", "Farm"};
			};
		};
	};
	
	class Land_Shed_wooden : HouseDefault {
		lootMax = 2;
		
		class Spawns : Spawns {
			class Medium {
				locations[] = {{"Medium", 1}};
				lootCategory[] = {"Gloves", "Tools", "Tops", "Pants", "Headgear", "Bags"};
				lootTag[] = {"Work", "Forester", "Farm"};
			};
			
			class Small {
				locations[] = {{"Small", 3}};
				lootCategory[] = {"Materials"};
				lootTag[] = {"Work", "Forester", "Farm"};
			};
		};
	};
	
	class Land_kulna : HouseDefault {
		class Spawns : Spawns {
			class Medium {
				locations[] = {{"Medium", 2}};
				lootCategory[] = {"Bags", "Feet", "Tools", "Tops", "Pants", "Headgear", "Feet", "Gloves"};
				lootTag[] = {"Work", "Forester", "Farm"};
			};
			
			class Small {
				locations[] = {{"Small", 2}};
				lootCategory[] = {"Tools", "Materials"};
				lootTag[] = {"Work", "Forester", "Farm"};
			};
			
			class Lopata {
				locations[] = {{"proxyLopata", 1}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Work", "Forester", "Farm"};
			};
		};
	};
	
	class Land_hut06 : HouseDefault {
		lootMax = 2;
		
		class Spawns : Spawns {
			class AlongWalls {
				locations[] = {{"pointAlongWalls", 1}};
				lootCategory[] = {"Materials"};
				lootTag[] = {"Work", "Forester", "Farm"};
			};
			
			class Center {
				locations[] = {{"pointCenter", 1}};
				lootCategory[] = {"Rifles", "Pistols", "Tools", "Materials"};
				lootTag[] = {"Work", "Forester", "Farm"};
			};
		};
	};
	
	class Land_posed : HouseDefault {
		lootMax = 2;
		
		class Spawns : Spawns {
			class Loot {
				locations[] = {{"Loot", 2}};
				lootCategory[] = {"Attachments", "Bags", "Rifles", "Pistols", "Food", "Materials", "Tops", "Pants", "Headgear"};
				lootTag[] = {"Forester", "Hunting"};
			};
		};
	};
	
	class Land_pumpa : HouseDefault {
		class Spawns : Spawns {
			class AroundWell {
				locations[] = {{"pointWell", 1}};
				lootCategory[] = {"Food", "Tools"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_KBud : HouseDefault {
		lootMax = 1;
		
		class Spawns : Spawns {
			class Inside {
				locations[] = {{"pointInside", 1}};
				lootCategory[] = {"Books"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_Budova4_in : HouseDefault {
		class Spawns : Spawns {
			class stove {
				locations[] = {{"pointStove", 1}};
				lootCategory[] = {"Food", "Containers", "Tools"};
				lootTag[] = {"Civilian", "Kitchen"};
			};
			
			class food {
				locations[] = {{"lootFood", 3}};
				lootCategory[] = {"Food", "Tools", "Food"};
				lootTag[] = {"Civilian", "Kitchen"};
			};
			
			class equipment {
				locations[] = {{"lootEquipment", 4}};
				lootCategory[] = {"Books", "Materials", "Tops", "Pants", "Headgear", "Tools"};
				lootTag[] = {"Civilian"};
			};
			
			class weapons {
				locations[] = {{"lootWeapons", 1}};
				lootCategory[] = {"Magazines", "Rifles", "Tools", "Pistols"};
				lootTag[] = {"Civilian"};
			};
			
			class large {
				locations[] = {{"lootLarge", 1}};
				lootCategory[] = {"Bags", "Tools"};
				lootTag[] = {"Civilian", "Forester"};
			};
		};
	};
	
	class Land_Garaz : HouseDefault {
		class Spawns : Spawns {
			class Centers {
				locations[] = {{"lootLeftCenter", 12}, {"lootRightCenter", 14}, {"lootCenterCenter", 15}};
				lootCategory[] = {"Bags", "Tools", "Materials", "Tops", "Pants", "Headgear", "Gloves", "Feet", "VehicleParts"};
				lootTag[] = {"Civilian", "Work", "Forester", "Camping", "Wheels"};
			};
			
			class Arounds {
				locations[] = {{"lootLeftAround", 53}, {"lootRightAround", 52}, {"lootCenterAround", 39}};
				lootCategory[] = {"Attachments", "Tools", "Materials", "Food"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_Tenement_building_Big : HouseDefault {
		lootMax = 40;
		
		class Spawns : Spawns {
			class Bathrooms {
				locations[] = {{"lootBathrooms", 84}};
				lootCategory[] = {"Medical"};
				lootTag[] = {"Hygiene", "Civilian"};
			};
			
			class Kitchens {
				locations[] = {{"lootKitchens", 202}};
				lootCategory[] = {"Tools", "Materials"};
				lootTag[] = {"Hygiene", "Civilian"};
			};
			
			class ClothesAndBackpacks {
				locations[] = {{"lootClothesAndBackpacks", 100}};
				lootCategory[] = {"Bags", "Tents", "Tops", "Pants", "Feet", "Headgear", "Gloves", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class OfficeStuff {
				locations[] = {{"lootOfficeStuff", 90}};
				lootCategory[] = {"Books", "Tools"};
				lootTag[] = {"Office", "Civilian", "Maps"};
			};
			
			class Stoves {
				locations[] = {{"lootStoves", 5}};
				lootCategory[] = {"Tools", "Food"};
				lootTag[] = {"Kitchen"};
			};
			
			class MeleeAndTools {
				locations[] = {{"lootMeleeAndTools", 57}};
				lootCategory[] = {"Materials", "Tools", "Pistols", "Food"};
				lootTag[] = {"Civilian", "Work"};
			};
			
			class InterestingLootMix {
				locations[] = {{"lootRoof", 67}, {"lootBalcons", 22}};
				lootCategory[] = {"Ammo", "Medical", "Tents", "Food", "Bags", "Tools", "Rifles", "Materials", "Pistols"};
				lootTag[] = {"Civilian", "Work"};
			};
		};
	};
	
	class Land_Tenement_building_small : HouseDefault {
		lootMax = 20;
		
		class Spawns : Spawns {
			class BookShelves {
				locations[] = {{"lootBooks", 31}};
				lootCategory[] = {"Books"};
				lootTag[] = {"Civilian", "Maps"};
			};
			
			class Bathrooms {
				locations[] = {{"lootBathrooms", 97}};
				lootCategory[] = {"Medical"};
				lootTag[] = {"Hygiene"};
			};
			
			class Kitchens {
				locations[] = {{"lootKitchens", 71}};
				lootCategory[] = {"Food", "Materials", "Tools"};
				lootTag[] = {"Kitchen"};
			};
			
			class Balcons {
				locations[] = {{"lootBalcons", 38}};
				lootCategory[] = {"Tents", "Tops", "Pants", "Headgear", "Ammo", "Attachments", "Food", "Materials", "Tools"};
				lootTag[] = {"Civilian"};
			};
			
			class CivilianMix {
				locations[] = {{"lootCivilianMix", 151}};
				lootCategory[] = {"Ammo", "Attachments", "Medical", "Tents", "Food", "Bags", "Rifles", "Pistols"};
				lootTag[] = {"Civilian"};
			};
			
			class LastRefuge {
				locations[] = {{"lootRoof", 47}};
				lootCategory[] = {"Ammo", "Attachments", "Food", "Materials", "Tools", "Rifles", "Pistols"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_Shed_Ind02 : HouseDefault {
		class Spawns : Spawns {
			class corners {
				locations[] = {{"lootAround", 2}, {"lootGallery", 2}};
				lootCategory[] = {"Bags", "Materials", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class FloorCenter {
				locations[] = {{"lootCenter", 2}};
				lootCategory[] = {"Tools", "Materials", "VehicleParts"};
				lootTag[] = {"Civilian", "Forester", "Work", "Wheels"};
			};
			
			class Room {
				locations[] = {{"loot1stFloorRoom", 2}};
				lootCategory[] = {"Ammo", "Attachments", "Tops", "Pants", "Headgear", "Food", "Rifles", "Pistols"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_Shed_W4 : HouseDefault {
		lootMax = 4;
		
		class Spawns : Spawns {
			class Around {
				locations[] = {{"lootAround", 2}};
				lootCategory[] = {"Materials"};
				lootTag[] = {"Work", "Forester", "Civilian"};
			};
			
			class Center {
				locations[] = {{"lootCenter", 2}};
				lootCategory[] = {"Tools", "VehicleParts"};
				lootTag[] = {"Work", "Forester", "Civilian", "Wheels"};
			};
		};
	};
	
	class Land_rail_station_big : HouseDefault {
		class Spawns : Spawns {
			class Medium {
				locations[] = {{"Medium", 2}};
				lootCategory[] = {"Tops", "Pants", "Tools", "Containers", "Food", "Bags", "Tools"};
				lootTag[] = {"Civilian"};
			};
			
			class Small {
				locations[] = {{"Small", 4}};
				lootCategory[] = {"Books", "Food", "Tops", "Pants", "Headgear"};
				lootTag[] = {"Civilian", "Maps"};
			};
			
			class OutsideTrash {
				locations[] = {{"OutsideTrash", 3}};
				lootCategory[] = {"Books", "Food", "Tops", "Pants", "Headgear"};
				lootTag[] = {"Civilian", "Maps"};
			};
		};
	};
	
	class Land_wagon_box : HouseDefault {
		class Spawns : Spawns {
			class Inside {
				locations[] = {{"pointInside", 3}};
				lootCategory[] = {"Ammo", "Food", "Tops", "Pants", "Headgear", "Bags", "Tools", "Rifles", "Materials", "Attachments", "Pistols"};
				lootTag[] = {"Civilian", "Maps"};
			};
		};
	};
	
	class Land_loco_742_blue : HouseDefault {
		class Spawns : Spawns {
			class IndustrialMix {
				locations[] = {{"pointOnTop", 2}, {"pointUnder", 2}};
				lootCategory[] = {"Ammo", "Tools", "Books", "Food"};
				lootTag[] = {"Civilian", "Maps"};
			};
		};
	};
	
	class Land_Nav_Boathouse : HouseDefault {
		class Spawns : Spawns {
			class Piers {
				locations[] = {{"pointPiers", 2}, {"pointUnderRoof", 2}};
				lootCategory[] = {"Books", "Tools", "Materials", "Food"};
				lootTag[] = {"Civilian", "Maps"};
			};
		};
	};
	
	class Land_NAV_Lighthouse : HouseDefault {
		class Spawns : Spawns {
			class Bottom {
				locations[] = {{"pointGroundFloor", 1}};
				lootCategory[] = {"Tools", "Materials", "Food"};
				lootTag[] = {"Civilian", "Maps"};
			};
			
			class Top {
				locations[] = {{"pointOutlook", 2}};
				lootCategory[] = {"Rifles", "Pistols", "Attachments", "Food", "Tools", "Materials", "Pistols"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_NAV_Lighthouse2 : HouseDefault {
		class Spawns : Spawns {
			class Bottom {
				locations[] = {{"pointGroundFloor", 2}};
				lootCategory[] = {"Tools", "Food", "Materials"};
				lootTag[] = {"Civilian", "Work"};
			};
			
			class Top {
				locations[] = {{"pointOutlook", 2}};
				lootCategory[] = {"Ammo", "Attachments", "Rifles", "Pistols", "Materials"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_BusStop : HouseDefault {
		class Spawns : Spawns {
			class ground {
				locations[] = {{"pointGround", 2}};
				lootCategory[] = {"Tools", "Books"};
				lootTag[] = {"abandoned"};
			};
		};
	};
	
	class Land_BusStop_Village : HouseDefault {
		class Spawns : Spawns {
			class ground {
				locations[] = {{"pointGround", 2}};
				lootCategory[] = {"Books", "Tools"};
				lootTag[] = {"abandoned"};
			};
		};
	};
	
	class Land_stodola_old_open : HouseDefault {
		class Spawns : Spawns {
			class GroundMedium {
				locations[] = {{"GroundMedium", 2}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Tools", "Materials", "Feet"};
				lootTag[] = {"Farm", "Work"};
			};
			
			class GroundSmall {
				locations[] = {{"GroundSmall", 2}};
				lootCategory[] = {"Food", "Materials", "Tools"};
				lootTag[] = {"Farm", "Work", "Civilian"};
			};
			
			class MidMedium {
				locations[] = {{"MidMedium", 1}};
				lootCategory[] = {"Tools", "Bags", "Tops", "Pants", "Headgear", "Feet", "Gloves"};
				lootTag[] = {"Farm", "Work", "Civilian"};
			};
			
			class MidSmall {
				locations[] = {{"MidSmall", 3}};
				lootCategory[] = {"Food", "Tools", "Materials"};
				lootTag[] = {"Civilian"};
			};
			
			class TopMedium {
				locations[] = {{"TopMedium", 1}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Tools", "Rifles", "Materials", "Feet", "Pistols"};
				lootTag[] = {"Civilian"};
			};
			
			class TopSmall {
				locations[] = {{"TopSmall", 2}};
				lootCategory[] = {"Ammo", "Food", "Tools", "Materials"};
				lootTag[] = {"Civilian", "Farm"};
			};
		};
	};
	
	class Land_stodola_open : HouseDefault {
		class Spawns : Spawns {
			class GroundMedium {
				locations[] = {{"GroundMedium", 2}};
				lootCategory[] = {"Tools", "Tops", "Pants", "Headgear", "Materials", "Feet"};
				lootTag[] = {"Civilian", "Farm"};
			};
			
			class GroundSmall {
				locations[] = {{"GroundSmall", 3}};
				lootCategory[] = {"Tools", "Food", "Materials"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_vez : HouseDefault {
		class Spawns : Spawns {
			class Loot {
				locations[] = {{"Loot", 1}};
				lootCategory[] = {"Tools", "Ammo", "Tops", "Pants", "Headgear", "Bags", "Rifles", "Pistols"};
				lootTag[] = {"abandoned"};
			};
		};
	};
	
	class Land_Vysilac_FM : HouseDefault {
		lootMax = 2;
		
		class Spawns : Spawns {
			class Loot {
				locations[] = {{"Loot", 1}};
				lootCategory[] = {"Tools", "Bags", "Tops", "Pants", "Headgear", "Ammo", "Magazines", "Rifles", "Pistols"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_Tovarna2 : HouseDefault {
		class Spawns : Spawns {
			class Medium {
				locations[] = {{"Medium", 2}};
				lootCategory[] = {"Tools", "Materials"};
				lootTag[] = {"Work"};
			};
			
			class Small {
				locations[] = {{"Small", 3}};
				lootCategory[] = {"Tools", "Food", "Materials"};
				lootTag[] = {"Work", "Civilian"};
			};
			
			class 1Medium {
				locations[] = {{"1Medium", 1}};
				lootCategory[] = {"Tools", "Materials"};
				lootTag[] = {"Work", "Civilian"};
			};
			
			class 1Small {
				locations[] = {{"1Small", 2}};
				lootCategory[] = {"Tools", "Food", "Materials"};
				lootTag[] = {"Work", "Civilian"};
			};
			
			class 2Medium {
				locations[] = {{"2Medium", 2}};
				lootCategory[] = {"Tools", "Materials"};
				lootTag[] = {"Work"};
			};
			
			class 2Small {
				locations[] = {{"2Small", 2}};
				lootCategory[] = {"Tools", "Food", "Materials"};
				lootTag[] = {"Work"};
			};
			
			class TopMedium {
				locations[] = {{"TopMedium", 1}};
				lootCategory[] = {"Tools", "Rifles", "Pistols", "Materials"};
				lootTag[] = {"Work"};
			};
			
			class TopSmall {
				locations[] = {{"TopSmall", 3}};
				lootCategory[] = {"Tools", "Ammo", "Materials"};
				lootTag[] = {"Work"};
			};
		};
	};
	
	class Land_Hangar_2 : HouseDefault {
		class Spawns : Spawns {
			class Medium {
				locations[] = {{"lootCenter", 2}};
				lootCategory[] = {"Tools", "Tops", "Pants", "Headgear", "Bags", "Feet", "Pistols", "VehicleParts"};
				lootTag[] = {"Work", "Civilian", "Wheels"};
			};
			
			class Small {
				locations[] = {{"lootAround", 3}};
				lootCategory[] = {"Ammo", "Food", "Books", "Tools", "Materials"};
				lootTag[] = {"Civilian", "Maps"};
			};
		};
	};
	
	class Land_Misc_DeerStand : HouseDefault {
		lootMax = 3;
		
		class Spawns : Spawns {
			class ground {
				locations[] = {{"pointInside", 2}};
				lootCategory[] = {"Ammo", "Rifles", "Pistols", "Attachments", "Bags", "Magazines", "Tools", "Tops", "Pants", "Headgear", "Gloves", "Feet", "Food"};
				lootTag[] = {"Forester", "Hunting"};
			};
		};
	};
	
	class Land_Misc_FeedShack : HouseDefault {
		lootMax = 2;
		
		class Spawns : Spawns {
			class ground {
				locations[] = {{"pointInside", 1}};
				lootCategory[] = {"Bags", "Materials", "Food", "Feet"};
				lootTag[] = {"Forester", "Hunting"};
			};
		};
	};
	
	class Land_Misc_Greenhouse : HouseDefault {
		class Spawns : Spawns {
			class Greenhouse {
				locations[] = {{"loot_OnFloor", 2}};
				lootCategory[] = {"Tools", "Materials"};
				lootTag[] = {"Abandoned"};
			};
		};
	};
	
	class Land_Misc_NewsStand : HouseDefault {
		class Spawns : Spawns {
			class Inside {
				locations[] = {{"pointInside", 3}};
				lootCategory[] = {"Food", "Books"};
				lootTag[] = {"Farm"};
			};
		};
	};
	
	class Land_Misc_Scaffolding : HouseDefault {
		class Spawns : Spawns {
			class WorkInstruments {
				locations[] = {{"pointScaffold", 2}};
				lootCategory[] = {"Tools", "Gloves", "Feet"};
				lootTag[] = {"Abandoned"};
			};
		};
	};
	
	class Land_Misc_WellPump : HouseDefault {
		lootMax = 2;
		
		class Spawns : Spawns {
			class AroundWell {
				locations[] = {{"loot", 1}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Civilian", "Work"};
			};
		};
	};
	
	class Land_fortified_nest_big : HouseDefault {
		class Spawns : Spawns {
			class AlongWalls {
				locations[] = {{"pointAlongWalls", 3}};
				lootCategory[] = {"Ammo", "Magazines", "Attachments", "Pistols", "Explosives", "Tools"};
				lootTag[] = {"Military_east"};
			};
			
			class Center {
				locations[] = {{"pointCenter", 3}};
				lootCategory[] = {"Ammo", "Magazines", "Tops", "Pants", "Headgear", "Attachments", "Bags", "Rifles", "Explosives", "Containers"};
				lootTag[] = {"Military_east"};
			};
		};
	};
	
	class Land_Mil_ControlTower : HouseDefault {
		class Spawns : Spawns {
			class MilitaryMix {
				locations[] = {{"pointUnderStairs", 1}, {"pointGroundFloor", 2}, {"pointMezanin", 1}, {"pointOnTables", 2}, {"pointControlRoomFloor", 2}, {"pointRoof", 2}, {"point1stFloor", 1}, {"point2ndFloorBalcony", 1}, {"pointOnLockers", 1}};
				lootCategory[] = {"Ammo", "Magazines", "Tops", "Pants", "Headgear", "Attachments", "Food", "Pistols", "Tools", "Containers", "Vests", "Masks"};
				lootTag[] = {"Military_east", "Military_west"};
			};
			
			class MilitaryMixSmall {
				locations[] = {{"pointUnderStairs", 1}, {"pointGroundFloor", 1}, {"pointMezanin", 1}, {"pointOnTables", 2}, {"pointControlRoomFloor", 1}, {"pointRoof", 1}, {"point1stFloor", 2}, {"point2ndFloorBalcony", 1}, {"pointOnLockers", 1}, {"pointShelves", 2}, {"pointHUP", 1}};
				lootCategory[] = {"Ammo", "Magazines", "Attachments", "Food", "Pistols", "Headgear", "Explosives", "Eyewear", "Vests"};
				lootTag[] = {"Military_east", "Military_west"};
			};
			
			class RoofSpawn {
				locations[] = {{"pointRoof", 1}, {"point2ndFloorBalcony", 1}};
				lootCategory[] = {"Ammo", "Magazines", "Attachments"};
				lootTag[] = {"Military_east", "Military_west"};
			};
			
			class Weapons {
				locations[] = {{"proxyWeapons", 2}};
				lootCategory[] = {"Pistols", "Explosives", "Magazines"};
				lootTag[] = {"Military_east", "Military_west"};
			};
			
			class Backpacks {
				locations[] = {{"proxyBackpacks", 1}};
				lootCategory[] = {"Bags"};
				lootTag[] = {"Military_east", "Military_west"};
			};
		};
	};
	
	class Land_Mil_House : HouseDefault {
		class Spawns : Spawns {
			class BigClothes {
				locations[] = {{"lootBigClothes", 23}};
				lootCategory[] = {"Tops", "Pants", "Headgear"};
				lootTag[] = {"abandoned"};
			};
			
			class SmallClothes {
				locations[] = {{"lootSmallClothes", 50}};
				lootCategory[] = {"Food", "Feet", "Tools", "Headgear"};
				lootTag[] = {"abandoned"};
			};
			
			class Books {
				locations[] = {{"lootBookCase", 6}};
				lootCategory[] = {"Books"};
				lootTag[] = {"abandoned"};
			};
			
			class Medical {
				locations[] = {{"lootMedical", 17}};
				lootCategory[] = {"Medical"};
				lootTag[] = {"abandoned"};
			};
			
			class Weapons {
				locations[] = {{"lootWeapons", 21}};
				lootCategory[] = {"Pistols"};
				lootTag[] = {"abandoned"};
			};
			
			class Ammo {
				locations[] = {{"lootAmmoAndAttachments", 25}};
				lootCategory[] = {"Ammo", "Magazines", "Explosives"};
				lootTag[] = {"abandoned"};
			};
			
			class OutsideShed {
				locations[] = {{"lootShed", 20}};
				lootCategory[] = {"Tools", "Materials"};
				lootTag[] = {"abandoned"};
			};
			
			class MilitaryRifles {
				locations[] = {{"lootProxyWeapons", 123}};
				lootCategory[] = {"Rifles"};
				lootTag[] = {"abandoned"};
			};
			
			class MilitaryBackpacks {
				locations[] = {{"lootProxyBackpacks", 66}};
				lootCategory[] = {"Bags"};
				lootTag[] = {"abandoned"};
			};
			
			class MeleeWeapons {
				locations[] = {{"lootProxyMeleeWeapons", 31}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"abandoned"};
			};
		};
	};
	
	class Land_Mil_Barracks : HouseDefault {
		lootMax = 8;
		
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"LootFloor", 2}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Feet", "Containers", "Bags", "Vests", "Masks", "Tools"};
				lootTag[] = {"Military_east", "Military_west"};
			};
			
			class Beds {
				locations[] = {{"LootBeds", 4}};
				lootCategory[] = {"Ammo", "Magazines", "Pistols", "Attachments", "Tops", "Pants", "Headgear", "Pistols", "Rifles", "Vests"};
				lootTag[] = {"Military_east", "Military_west"};
			};
			
			class SmallLoot {
				locations[] = {{"LootCase", 1}, {"LootSmall", 1}};
				lootCategory[] = {"Explosives", "Masks", "Attachments", "Ammo", "Magazines"};
				lootTag[] = {"Military_east", "Military_west"};
			};
		};
	};
	
	class Land_Mil_Barracks_i : HouseDefault {
		lootMax = 8;
		
		class Spawns : Spawns {
			class OnBeds {
				locations[] = {{"pointBunkBeds", 2}};
				lootCategory[] = {"Ammo", "Magazines", "Attachments", "Tents", "Rifles", "Pistols", "Tops", "Pants", "Headgear", "Containers", "Eyewear", "Masks"};
				lootTag[] = {"Military_east", "Military_west"};
			};
			
			class UnderBeds {
				locations[] = {{"pointUnderBunkBeds", 2}};
				lootCategory[] = {"Ammo", "Tops", "Pants", "Headgear", "Pistols", "Vests", "Tools"};
				lootTag[] = {"Military_east", "Military_west"};
			};
			
			class OnLockers {
				locations[] = {{"pointOnLockers", 1}};
				lootCategory[] = {"Containers"};
				lootTag[] = {"Military_west", "Military_east"};
			};
			
			class RoomFloors {
				locations[] = {{"pointRoomFloors", 2}};
				lootCategory[] = {"Feet", "Rifles", "Containers", "Tools"};
				lootTag[] = {"Military_east", "Military_west"};
			};
			
			class HallFloor {
				locations[] = {{"pointHallFloor", 1}};
				lootCategory[] = {"Ammo", "Magazines", "Attachments", "Tents", "Pistols", "Rifles", "Tools"};
				lootTag[] = {"Military_east", "Military_west"};
			};
			
			class Backpack {
				locations[] = {{"proxyBackpacks", 1}};
				lootCategory[] = {"Bags"};
				lootTag[] = {"Military_east", "Military_west"};
			};
			
			class MilitaryRifles {
				locations[] = {{"proxyMilitaryRifles", 2}};
				lootCategory[] = {"Pistols", "Rifles"};
				lootTag[] = {"Military_east", "Military_west"};
			};
		};
	};
	
	class Land_Mil_Barracks_L : HouseDefault {
		lootMax = 8;
		
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"LootFloor", 3}};
				lootCategory[] = {"Tops", "Pants", "Feet", "Headgear", "Containers", "Vests", "Rifles", "Masks"};
				lootTag[] = {"Military_east", "Military_west"};
			};
			
			class Beds {
				locations[] = {{"LootBeds", 2}};
				lootCategory[] = {"Ammo", "Magazines", "Pistols", "Rifles", "Attachments", "Vests"};
				lootTag[] = {"Military_east", "Military_west"};
			};
			
			class Small {
				locations[] = {{"LootSmall", 2}};
				lootCategory[] = {"Explosives", "Ammo", "Magazines", "Pistols", "Attachments"};
				lootTag[] = {"Military_east", "Military_west"};
			};
		};
	};
	
	class Land_Barrack2 : HouseDefault {
		lootMax = 5;
		
		class Spawns : Spawns {
			class Weapons {
				locations[] = {{"pointWeapons", 1}};
				lootCategory[] = {"Rifles"};
				lootTag[] = {"Military_east", "Military_west"};
			};
			
			class Ammo {
				locations[] = {{"pointAmmo", 2}};
				lootCategory[] = {"Ammo", "Magazines", "Attachments", "Explosives", "Containers"};
				lootTag[] = {"Military_east", "Military_west"};
			};
			
			class Clothes {
				locations[] = {{"pointClothes", 2}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Tools"};
				lootTag[] = {"Military_east", "Military_west"};
			};
			
			class ShoesAndBackpacks {
				locations[] = {{"pointShoes", 3}};
				lootCategory[] = {"Feet", "Tents", "Bags"};
				lootTag[] = {"Military_east", "Military_west"};
			};
		};
	};
	
	class Land_Mil_Guardhouse : HouseDefault {
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"LootFloor", 8}};
				lootCategory[] = {"Tools", "Food", "Tops", "Pants", "Headgear"};
				lootTag[] = {"Civilian"};
			};
			
			class Table {
				locations[] = {{"LootTable", 8}};
				lootCategory[] = {"Materials", "Tools", "Pistols", "Ammo"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_SS_hangar : HouseDefault {
		class Spawns : Spawns {
			class All {
				locations[] = {{"pointCorners", 3}, {"pointCenter", 4}};
				lootCategory[] = {"Ammo", "Magazines", "Attachments", "Pistols", "Bags", "Rifles", "Feet", "Explosives", "Containers"};
				lootTag[] = {"Military_east", "Military_west"};
			};
		};
	};
	
	class Land_GuardShed : HouseDefault {
		lootMax = 2;
		
		class Spawns : Spawns {
			class All {
				locations[] = {{"pointAll", 2}};
				lootCategory[] = {"Ammo", "Magazines", "Attachments", "Pistols"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_Ind_SawMill : HouseDefault {
		class Spawns : Spawns {
			class Hall {
				locations[] = {{"LootHall", 3}};
				lootCategory[] = {"Tools", "Materials", "Tops", "Pants", "Headgear"};
				lootTag[] = {"Forester", "Work"};
			};
			
			class Office {
				locations[] = {{"LootOffice", 2}};
				lootCategory[] = {"Tools", "Materials", "Food"};
				lootTag[] = {"Office"};
			};
			
			class High {
				locations[] = {{"LootHigh", 1}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Forester", "Work"};
			};
		};
	};
	
	class Land_Ind_IlluminantTower : HouseDefault {
		lootMax = 2;
		
		class Spawns : Spawns {
			class SnipersPost {
				locations[] = {{"pointSniperPost", 1}};
				lootCategory[] = {"Ammo", "Attachments", "Pistols", "Rifles"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_A_CraneCon : HouseDefault {
		lootMax = 1;
		
		class Spawns : Spawns {
			class SnipersPost {
				locations[] = {{"LootSniperPost", 1}};
				lootCategory[] = {"Ammo", "Attachments", "Rifles", "Pistols"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_A_MunicipalOffice : HouseDefault {
		class Spawns : Spawns {
			class SnipersPost {
				locations[] = {{"pointRoofTower", 1}};
				lootCategory[] = {"Ammo", "Attachments", "Rifles"};
				lootTag[] = {"Abandoned"};
			};
			
			class SurvivalLeftovers {
				locations[] = {{"pointRoof", 1}, {"pointFrontDoor", 1}, {"pointBackDoor", 1}};
				lootCategory[] = {"Food", "Vests", "Materials", "Tools"};
				lootTag[] = {"Abandoned"};
			};
		};
	};
	
	class Land_A_MunicipalOffice2 : HouseDefault {
		lootMax = 20;
		
		class Spawns : Spawns {
			class ClothesAndShoes {
				locations[] = {{"lootClothes", 189}};
				lootCategory[] = {"Vests", "Tops", "Pants", "Headgear", "Feet"};
				lootTag[] = {"Civilian"};
			};
			
			class FoodAndDrinks {
				locations[] = {{"lootFoodAndDrinks", 137}};
				lootCategory[] = {"Food"};
				lootTag[] = {"Civilian"};
			};
			
			class OfficeStuffAndBooks {
				locations[] = {{"lootBooksAndOffice", 111}};
				lootCategory[] = {"Tools", "Books", "Materials"};
				lootTag[] = {"Maps", "Office", "Civilian"};
			};
			
			class Weapons {
				locations[] = {{"lootWeapons", 137}};
				lootCategory[] = {"Rifles", "Pistols"};
				lootTag[] = {"Civilian"};
			};
			
			class AmmoAndAttachments {
				locations[] = {{"lootAmmoAndAttachments", 133}};
				lootCategory[] = {"Ammo", "Attachments"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_A_TVTower_Base : HouseDefault {
		class Spawns : Spawns {
			class SurvivalLeftovers {
				locations[] = {{"pointGroundFloor", 2}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Tools", "Materials", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class LastRefuge {
				locations[] = {{"point1stFloor", 2}, {"point2ndFloor", 2}, {"point3rdFloor", 1}};
				lootCategory[] = {"Ammo", "Medical", "Food", "Tools", "Food", "Rifles", "Pistols"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_Abandoned_Ship_FrontA : HouseDefault {
		lootMax = 8;
		
		class Spawns : Spawns {
			class CivilianLeftovers {
				locations[] = {{"pointUnderDeck", 6}};
				lootCategory[] = {"Bags", "Tops", "Pants", "Headgear", "Materials", "Food", "Feet"};
				lootTag[] = {"Civilian"};
			};
			
			class LastRefuge {
				locations[] = {{"pointLookout", 1}, {"pointOnDeck1", 2}, {"pointOnDeck2", 3}};
				lootCategory[] = {"Ammo", "Medical", "Food", "Tops", "Pants", "Headgear", "Materials", "Tools"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_Abandoned_Ship_FrontB : HouseDefault {
		lootMax = 8;
		
		class Spawns : Spawns {
			class CivilianLeftovers {
				locations[] = {{"pointUnderDeck", 4}};
				lootCategory[] = {"Bags", "Tops", "Pants", "Headgear", "Materials", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class LastRefuge {
				locations[] = {{"pointOnDeck1", 4}, {"pointOnDeck2", 2}};
				lootCategory[] = {"Ammo", "Medical", "Tops", "Pants", "Headgear", "Materials", "Food", "Tools"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_Abandoned_Ship_BackA : HouseDefault {
		lootMax = 8;
		
		class Spawns : Spawns {
			class CivilianLeftovers {
				locations[] = {{"pointUnderDeck", 4}};
				lootCategory[] = {"Bags", "Food", "Tops", "Pants", "Headgear", "Materials", "Feet", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class LastRefuge {
				locations[] = {{"pointOnDeck", 4}};
				lootCategory[] = {"Ammo", "Medical", "Tools", "Tops", "Pants", "Headgear", "Materials", "Food"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_Abandoned_Ship_BackB : HouseDefault {
		lootMax = 8;
		
		class Spawns : Spawns {
			class CivilianLeftovers {
				locations[] = {{"pointUnderDeck1", 1}, {"pointUnderDeck2", 1}};
				lootCategory[] = {"Bags", "Food", "Tops", "Pants", "Headgear", "Materials", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class LastRefuge {
				locations[] = {{"pointOnDeck1", 2}, {"pointOnDeck2", 2}, {"pointAboveDeck1", 1}, {"pointAboveDeck2", 1}};
				lootCategory[] = {"Ammo", "Medical", "Tools", "Tops", "Pants", "Headgear", "Food", "Materials"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_Abandoned_Ship_Castle : HouseDefault {
		lootMax = 8;
		
		class Spawns : Spawns {
			class Clothes {
				locations[] = {{"pointGroundFloorBunkBeds", 4}, {"pointGroundFloorONLockers", 1}, {"pointGrounFloorBedroomsFloor", 2}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Materials", "Bags", "Feet", "Tools"};
				lootTag[] = {"Civilian", "Camping"};
			};
			
			class Foodanditems {
				locations[] = {{"point1stFloor1", 1}, {"point1stFloor2", 3}, {"point1stFloorBalcony", 3}, {"point1stFloorFrontBalcony", 1}};
				lootCategory[] = {"Tools", "Food", "Containers", "Materials", "Food", "Tools"};
				lootTag[] = {"Civilian", "Camping"};
			};
			
			class Weapons {
				locations[] = {{"point1stFloorBalcony", 1}, {"point1stFloorFrontBalcony", 1}, {"point3rdFloorBalcony", 1}, {"pointBridge", 1}, {"pointOutsideBridge", 1}, {"pointOnTopOfBridge", 1}};
				lootCategory[] = {"Ammo", "Attachments", "Rifles", "Pistols"};
				lootTag[] = {"Civilian"};
			};
			
			class ToolsAndNavigation {
				locations[] = {{"pointBridge", 1}, {"pointOutsideBridge", 1}};
				lootCategory[] = {"Books", "Tools", "Materials"};
				lootTag[] = {"Civilian", "Maps"};
			};
		};
	};
	
	class Land_Barn_W_01 : HouseDefault {
		class Spawns : Spawns {
			class FarmMix {
				locations[] = {{"pointGround", 3}};
				lootCategory[] = {"Ammo", "Tools", "Materials", "Food", "Tops", "Pants", "Headgear"};
				lootTag[] = {"Farm", "Work"};
			};
		};
	};
	
	class Land_A_Castle_Bergfrit : HouseDefault {
		class Spawns : Spawns {
			class Survivalist {
				locations[] = {{"Loot_GroundFloor", 1}, {"Loot_Roof", 2}};
				lootCategory[] = {"Feet", "Pistols", "Rifles", "Ammo", "Tools"};
				lootTag[] = {"Civilian", "Historical"};
			};
			
			class Middle {
				locations[] = {{"Loot_StairCase", 1}, {"Loot_1stFloor", 2}};
				lootCategory[] = {"Tools", "Tops", "Pants", "Headgear", "Ammo", "Feet", "Food"};
				lootTag[] = {"Civilian", "Historical"};
			};
		};
	};
	
	class Land_A_Castle_Stairs_A : HouseDefault {
		class Spawns : Spawns {
			class Survivalist {
				locations[] = {{"point1stFloor", 2}, {"point2ndFloor", 1}};
				lootCategory[] = {"Tools", "Ammo", "Feet", "Food", "Rifles", "Pistols"};
				lootTag[] = {"Civilian", "Historical"};
			};
		};
	};
	
	class Land_A_Castle_Gate : HouseDefault {
		class Spawns : Spawns {
			class Survivalist {
				locations[] = {{"pointInside", 2}, {"pointPassage", 1}};
				lootCategory[] = {"Tools", "Tops", "Pants", "Headgear", "Ammo", "Feet", "Rifles", "Pistols", "Food"};
				lootTag[] = {"Civilian", "Historical"};
			};
		};
	};
	
	class Land_Ind_HammerMill : HouseDefault {
		class Spawns : Spawns {
			class Stones {
				locations[] = {{"lootStones", 3}};
				lootCategory[] = {"Materials"};
				lootTag[] = {"Natural"};
			};
		};
	};
	
	class Land_A_FuelStation_Build : HouseDefault {
		class Spawns : Spawns {
			class main {
				locations[] = {{"pointOnCounter", 1}, {"pointInCounter", 1}, {"pointAroundCounter", 2}, {"pointFloor", 3}};
				lootCategory[] = {"Books", "Ammo", "Food", "Headgear", "Eyewear"};
				lootTag[] = {"Maps", "Civilian"};
			};
		};
	};
	
	class Land_A_FuelStation_Shed : HouseDefault {
		class Spawns : Spawns {
			class FuelStation {
				locations[] = {{"pointSupportBases", 3}};
				lootCategory[] = {"Books", "Food"};
				lootTag[] = {"Maps", "Civilian"};
			};
		};
	};
	
	class Land_A_Hospital : HouseDefault {
		lootMax = 30;
		
		class Spawns : Spawns {
			class SmallMed1 {
				locations[] = {{"Loot_SmallMed1", 4}};
				lootCategory[] = {"Medical", "Tops", "Pants", "Headgear", "Vests"};
				lootTag[] = {"Civilian", "Medic"};
			};
			
			class SmallTrash1 {
				locations[] = {{"Loot_SmallTrash1", 3}};
				lootCategory[] = {"Medical"};
				lootTag[] = {"Civilian", "Medic"};
			};
			
			class SmallMed2 {
				locations[] = {{"Loot_SmallMed2", 2}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Medical"};
				lootTag[] = {"Medic"};
			};
			
			class SmallTrash2 {
				locations[] = {{"Loot_SmallTrash1", 2}};
				lootCategory[] = {"Medical"};
				lootTag[] = {"Civilian", "Medic"};
			};
			
			class RoofLoot {
				locations[] = {{"Loot_Roof", 3}};
				lootCategory[] = {"Medical", "Ammo", "Vests", "Food"};
				lootTag[] = {"Civilian", "Medic"};
			};
		};
	};
	
	class Land_A_Office01 : HouseDefault {
		class Spawns : Spawns {
			class Office {
				locations[] = {{"lootOffices", 159}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Office"};
			};
			
			class FoodSupply {
				locations[] = {{"lootFoodStorage", 123}};
				lootCategory[] = {"Food"};
				lootTag[] = {"Civilian"};
			};
			
			class Medical {
				locations[] = {{"lootMedicalStorage", 74}};
				lootCategory[] = {"Medical"};
				lootTag[] = {"Medic"};
			};
			
			class GunsStorageAmmoAttachments {
				locations[] = {{"lootGunsStorageFloor", 16}, {"lootGunsStorage", 78}};
				lootCategory[] = {"Ammo", "Attachments"};
				lootTag[] = {"Civilian"};
			};
			
			class GunsStorageWeaponsRifles {
				locations[] = {{"lootGunsStorage", 78}};
				lootCategory[] = {"Rifles", "Pistols"};
				lootTag[] = {"Civilian"};
			};
			
			class ClothesStorage {
				locations[] = {{"lootClothesStorage", 57}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Bags", "Feet", "Vests"};
				lootTag[] = {"Civilian"};
			};
			
			class UtilityStorage {
				locations[] = {{"lootUtilityStorage", 52}};
				lootCategory[] = {"Tools", "Materials"};
				lootTag[] = {"Civilian", "Camping"};
			};
			
			class CivilianLeftovers {
				locations[] = {{"lootCorridor", 65}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Food", "Vests"};
				lootTag[] = {"Civilian", "Camping"};
			};
			
			class SnipersPost {
				locations[] = {{"lootRoof", 14}};
				lootCategory[] = {"Ammo", "Magazines", "Attachments", "Rifles", "Pistols"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_A_Office02 : HouseDefault {
		class Spawns : Spawns {
			class CivilianLeftovers {
				locations[] = {{"lootCivilianLeftovers", 156}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Bags", "Food", "Vests"};
				lootTag[] = {"Civilian"};
			};
			
			class PublicShelves {
				locations[] = {{"lootCorridor", 65}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Vests", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class GeneralStorage {
				locations[] = {{"lootStorage", 94}};
				lootCategory[] = {"Food", "Feet", "Tools"};
				lootTag[] = {"Civilian"};
			};
			
			class WellHiddenLoot {
				locations[] = {{"lootGood", 63}};
				lootCategory[] = {"Ammo", "Attachments", "Magazines", "Medical", "Food", "Rifles", "Pistols"};
				lootTag[] = {"Civilian"};
			};
			
			class Offices {
				locations[] = {{"lootOffices", 68}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Office"};
			};
			
			class Wardrobes {
				locations[] = {{"lootOfficesWardrobes", 10}};
				lootCategory[] = {"Feet", "Bags", "Tops", "Pants", "Headgear"};
				lootTag[] = {"Civilian"};
			};
			
			class Barricades {
				locations[] = {{"lootStaircase", 17}};
				lootCategory[] = {"Tools", "Materials"};
				lootTag[] = {"Civilian"};
			};
			
			class BarricadesAfterFight {
				locations[] = {{"lootBarricade", 24}};
				lootCategory[] = {"Ammo", "Tools", "Tops", "Pants", "Headgear", "Rifles", "Pistols"};
				lootTag[] = {"Civilian"};
			};
			
			class LastRefuge {
				locations[] = {{"loot3rdFloor", 72}};
				lootCategory[] = {"Ammo", "Medical", "Materials", "Tops", "Pants", "Headgear", "Tools", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class SodaMachine {
				locations[] = {{"lootSodaMachine", 12}};
				lootCategory[] = {"Food"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_A_Stationhouse : HouseDefault {
		lootMax = 15;
		
		class Spawns : Spawns {
			class SmallItems {
				locations[] = {{"LootSmall1stFloor", 1}, {"LootSmall2ndFloor", 1}};
				lootCategory[] = {"Materials", "Gloves"};
				lootTag[] = {"Firefighters", "Work"};
			};
			
			class Shelfs {
				locations[] = {{"LootShelfs1stFloor", 1}, {"LootShelfs3rdFloor", 1}};
				lootCategory[] = {"Tools", "Containers", "Masks", "Headgear"};
				lootTag[] = {"Firefighters"};
			};
			
			class FirestationFloor {
				locations[] = {{"LootFloor", 5}};
				lootCategory[] = {"Tops", "Pants", "Feet", "Headgear", "Masks", "Containers"};
				lootTag[] = {"Firefighters"};
			};
			
			class Tools {
				locations[] = {{"LootFirefightersTool", 4}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Firefighters"};
			};
			
			class RoofTower {
				locations[] = {{"LootRoofTower", 1}};
				lootCategory[] = {"Pistols", "Rifles"};
				lootTag[] = {"Civilian"};
			};
			
			class Roof {
				locations[] = {{"LootRoof", 1}};
				lootCategory[] = {"Ammo", "Attachments", "Gloves"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_BusStation_building : HouseDefault {
		class Spawns : Spawns {
			class PublicItems {
				locations[] = {{"pointSmallVarious", 2}, {"pointDrink", 4}, {"pointCannedFood", 4}};
				lootCategory[] = {"Food", "Books"};
				lootTag[] = {"Office", "Civilian"};
			};
		};
	};
	
	class Land_BusStation_wall_bench : HouseDefault {
		lootMax = 2;
		
		class Spawns : Spawns {
			class OutsideTrash {
				locations[] = {{"lootOnBench", 1}, {"lootUnderBench", 1}};
				lootCategory[] = {"Food", "Tools"};
				lootTag[] = {"Civilian", "Kitchen"};
			};
		};
	};
	
	class Land_HouseB_Tenement_DayZ : HouseDefault {
		class Spawns : Spawns {
			class SodaMachine {
				locations[] = {{"pointSodaMachine", 2}};
				lootCategory[] = {"Food"};
				lootTag[] = {"Civilian", "Kitchen"};
			};
			
			class reception {
				locations[] = {{"pointReceptionDesk", 1}, {"pointReceptionFloor", 1}, {"pointReceptionShelf", 1}};
				lootCategory[] = {"Ammo", "Tools", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class CivilianLeftovers {
				locations[] = {{"pointFloor", 3}, {"pointTables", 2}, {"pointChairs", 1}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Bags", "Feet", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class MilitaryLeftovers {
				locations[] = {{"pointRoof", 4}};
				lootCategory[] = {"Ammo", "Attachments", "Medical", "Tops", "Pants", "Headgear", "Feet", "Bags", "Rifles", "Pistols"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_HouseV_1I1 : HouseDefault {
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"lootFloor", 12}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Bags", "Containers", "Tools", "Masks"};
				lootTag[] = {"Civilian", "Camping"};
			};
			
			class OnSomething {
				locations[] = {{"lootShelves", 12}};
				lootCategory[] = {"Food", "Books", "Medical", "Eyewear", "Tools", "Masks"};
				lootTag[] = {"Civilian", "Maps", "Kitchen"};
			};
			
			class Weapons {
				locations[] = {{"lootWeapons", 5}};
				lootCategory[] = {"Ammo", "Pistols", "Rifles", "Attachments", "Magazines"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_HouseV_1I2 : HouseDefault {
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"lootFloor", 12}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Feet", "Tools", "Bags"};
				lootTag[] = {"Civilian"};
			};
			
			class OnSomething {
				locations[] = {{"lootShelves", 4}};
				lootCategory[] = {"Food", "Books", "Eyewear", "Medical", "Tools", "Masks"};
				lootTag[] = {"Civilian", "Maps", "Kitchen"};
			};
			
			class Weapons {
				locations[] = {{"lootWeapons", 3}};
				lootCategory[] = {"Ammo", "Pistols", "Rifles", "Attachments", "Magazines"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_HouseV_1I3 : HouseDefault {
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"LootFloor", 4}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Feet", "Rifles", "Tools", "Materials", "Containers", "Bags"};
				lootTag[] = {"Civilian", "Kitchen"};
			};
			
			class Shelves {
				locations[] = {{"LootShelves", 2}};
				lootCategory[] = {"Pistols", "Food", "Ammo", "Books", "Attachments", "Eyewear", "Tools", "Masks"};
				lootTag[] = {"Civilian", "Maps", "Kitchen"};
			};
		};
	};
	
	class Land_HouseV_1I4 : HouseDefault {
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"lootFloor", 15}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Feet", "Rifles", "Tools", "Materials", "Containers", "Bags", "Masks"};
				lootTag[] = {"Civilian", "Kitchen"};
			};
			
			class OnSomething {
				locations[] = {{"lootShelves", 5}};
				lootCategory[] = {"Food", "Books", "Pistols", "Ammo", "Attachments", "Eyewear", "Tools"};
				lootTag[] = {"Civilian", "Maps", "Kitchen"};
			};
		};
	};
	
	class Land_HouseV_1L1 : HouseDefault {
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"lootFloor", 15}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Bags", "Containers", "Tools", "Rifles"};
				lootTag[] = {"Civilian"};
			};
			
			class OnSomething {
				locations[] = {{"lootShelves", 15}};
				lootCategory[] = {"Medical", "Ammo", "Eyewear", "Books", "Food", "Tools", "Pistols", "Masks"};
				lootTag[] = {"Civilian", "Maps", "Kitchen"};
			};
		};
	};
	
	class Land_HouseV_1L2 : HouseDefault {
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"lootFloor", 14}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Bags", "Containers", "Tools", "Rifles"};
				lootTag[] = {"Civilian"};
			};
			
			class OnSomething {
				locations[] = {{"lootShelves", 16}};
				lootCategory[] = {"Food", "Magazines", "Ammo", "Tools", "Pistols", "Masks"};
				lootTag[] = {"Civilian", "Kitchen"};
			};
		};
	};
	
	class Land_HouseV_1T : HouseDefault {
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"lootFloor", 40}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Bags", "Tools", "Containers", "Rifles"};
				lootTag[] = {"Civilian", "Camping"};
			};
			
			class OnSomething {
				locations[] = {{"lootShelves", 33}};
				lootCategory[] = {"Medical", "Magazines", "Attachments", "Ammo", "Books", "Food", "Eyewear", "Tools", "Pistols", "Masks"};
				lootTag[] = {"Civilian", "Maps", "Kitchen"};
			};
		};
	};
	
	class Land_HouseV_2I : HouseDefault {
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"lootFloor", 46}};
				lootCategory[] = {"Tops", "Pants", "Feet", "Headgear", "Bags", "Tools", "Food", "Containers", "Rifles"};
				lootTag[] = {"Civilian"};
			};
			
			class OnSomething {
				locations[] = {{"lootShelves", 57}};
				lootCategory[] = {"Ammo", "Magazines", "Food", "Eyewear", "Pistols", "Tools", "Attachments", "Books", "Medical", "Masks"};
				lootTag[] = {"Civilian", "Kitchen", "Maps"};
			};
		};
	};
	
	class Land_HouseV_2L : HouseDefault {
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"lootFloor", 39}};
				lootCategory[] = {"Tops", "Pants", "Feet", "Headgear", "Bags", "Tools", "Food", "Containers", "Rifles"};
				lootTag[] = {"Civilian"};
			};
			
			class OnSomething {
				locations[] = {{"lootShelves", 12}};
				lootCategory[] = {"Ammo", "Magazines", "Food", "Eyewear", "Pistols", "Tools", "Attachments", "Books", "Medical", "Masks"};
				lootTag[] = {"Civilian", "Maps", "Kitchen"};
			};
		};
	};
	
	class Land_houseV_2T1 : HouseDefault {
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"lootFloor", 48}};
				lootCategory[] = {"Rifles", "Tops", "Pants", "Bags", "Headgear", "Feet", "Tools", "Containers"};
				lootTag[] = {"Civilian"};
			};
			
			class OnSomething {
				locations[] = {{"lootShelves", 15}};
				lootCategory[] = {"Ammo", "Magazines", "Pistols", "Attachments", "Food", "Books", "Tools", "Eyewear", "Medical", "Masks"};
				lootTag[] = {"Civilian", "Maps", "Kitchen"};
			};
		};
	};
	
	class Land_houseV_2T2 : HouseDefault {
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"lootFloor", 1}};
				lootCategory[] = {"Bags", "Tops", "Pants", "Feet", "Headgear", "Tools", "Rifles"};
				lootTag[] = {"Civilian"};
			};
			
			class OnSomething {
				locations[] = {{"lootShelves", 2}};
				lootCategory[] = {"Pistols", "Magazines", "Ammo", "Attachments", "Books", "Food", "Medical", "Eyewear", "Tools", "Masks"};
				lootTag[] = {"Civilian", "Kitchen", "Maps"};
			};
		};
	};
	
	class Land_HouseV_3I1 : HouseDefault {
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"lootFloor", 28}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Bags", "Feet", "Tools"};
				lootTag[] = {"Civilian"};
			};
			
			class OnSomething {
				locations[] = {{"lootShelves", 10}};
				lootCategory[] = {"Ammo", "Medical", "Food", "Eyewear", "Masks"};
				lootTag[] = {"Civilian"};
			};
			
			class Weapons {
				locations[] = {{"lootWeapons", 5}};
				lootCategory[] = {"Pistols", "Rifles", "Ammo", "Attachments", "Magazines"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_HouseV_3I2 : HouseDefault {
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"lootFloor", 41}};
				lootCategory[] = {"Tops", "Pants", "Feet", "Tools", "Masks"};
				lootTag[] = {"Civilian"};
			};
			
			class OnSomething {
				locations[] = {{"lootShelves", 13}};
				lootCategory[] = {"Food", "Eyewear", "Headgear", "Masks"};
				lootTag[] = {"Civilian"};
			};
			
			class Weapons {
				locations[] = {{"lootWeapons", 5}};
				lootCategory[] = {"Pistols", "Rifles", "Ammo", "Attachments", "Magazines"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_HouseV_3I3 : HouseDefault {
		class Spawns : Spawns {
			class Small {
				locations[] = {{"lootSmall", 15}};
				lootCategory[] = {"Food", "Eyewear"};
				lootTag[] = {"Civilian"};
			};
			
			class Medium {
				locations[] = {{"lootMedium", 9}};
				lootCategory[] = {"Tops", "Pants", "Feet", "Tools", "Bags", "Masks"};
				lootTag[] = {"Civilian"};
			};
			
			class Firearm {
				locations[] = {{"lootWeapons", 5}};
				lootCategory[] = {"Pistols", "Rifles", "Ammo", "Attachments", "Magazines"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_HouseV_3I4 : HouseDefault {
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"lootFloor", 27}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Tools", "Feet", "Masks"};
				lootTag[] = {"Civilian"};
			};
			
			class OnSomething {
				locations[] = {{"lootShelves", 16}};
				lootCategory[] = {"Eyewear", "Food", "Masks"};
				lootTag[] = {"Civilian"};
			};
			
			class Weapons {
				locations[] = {{"lootWeapons", 4}};
				lootCategory[] = {"Pistols", "Rifles", "Ammo", "Attachments", "Magazines"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_HouseV2_01A : HouseDefault {
		class Spawns : Spawns {
			class Food {
				locations[] = {{"pointRoomTable", 1}, {"pointRoomGround", 2}};
				lootCategory[] = {"Food", "Tools"};
				lootTag[] = {"Civilian", "Kitchen"};
			};
			
			class Clothing {
				locations[] = {{"pointRoomWardrobe", 1}, {"pointRoomGround", 1}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Feet", "Masks"};
				lootTag[] = {"Civilian", "Kitchen"};
			};
			
			class Books {
				locations[] = {{"pointOnBookShelves", 2}};
				lootCategory[] = {"Books"};
				lootTag[] = {"Civilian"};
			};
			
			class CivilianMix {
				locations[] = {{"pointRoomGround", 1}, {"pointHallGround", 1}, {"pointStaircaseGround", 1}};
				lootCategory[] = {"Bags", "Feet", "Materials", "Tools", "Food"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_HouseV2_01B : HouseDefault {
		class Spawns : Spawns {
			class Books {
				locations[] = {{"pointShelf", 2}};
				lootCategory[] = {"Books"};
				lootTag[] = {"Civilian"};
			};
			
			class Clothing {
				locations[] = {{"pointOnWardrobe", 1}, {"pointOnBed", 2}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Masks"};
				lootTag[] = {"Civilian"};
			};
			
			class Shoes {
				locations[] = {{"pointAroundBed", 1}};
				lootCategory[] = {"Feet"};
				lootTag[] = {"Civilian"};
			};
			
			class food {
				locations[] = {{"pointOnTable", 2}, {"pointTvTable", 1}};
				lootCategory[] = {"Food"};
				lootTag[] = {"Civilian"};
			};
			
			class civilianMix {
				locations[] = {{"pointInChairs", 1}, {"pointStairCase", 2}, {"point1stFloorGround", 3}};
				lootCategory[] = {"Bags", "Materials", "Tools", "Food", "Rifles", "Pistols", "Containers"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_HouseV2_02_Interier : HouseDefault {
		class Spawns : Spawns {
			class CivilianMix {
				locations[] = {{"pointFloor", 3}};
				lootCategory[] = {"Bags", "Feet", "Materials", "Tools", "Rifles", "Containers", "Pistols"};
				lootTag[] = {"Civilian"};
			};
			
			class Stove {
				locations[] = {{"pointStove", 1}};
				lootCategory[] = {"Food", "Tools"};
				lootTag[] = {"Kitchen"};
			};
			
			class Table {
				locations[] = {{"pointTable", 2}};
				lootCategory[] = {"Food"};
				lootTag[] = {"Civilian"};
			};
			
			class Clothing {
				locations[] = {{"pointWardrobes", 2}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Masks"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_HouseV2_03 : HouseDefault {
		class Spawns : Spawns {
			class OfficeStuff {
				locations[] = {{"pointOnTables", 2}, {"pointOnChairs", 1}, {"pointOfficeFloor", 2}, {"pointOnBoxes", 1}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Office"};
			};
			
			class Books {
				locations[] = {{"pointOnBookShelves", 2}};
				lootCategory[] = {"Books"};
				lootTag[] = {"Maps", "Civilian"};
			};
			
			class clothing {
				locations[] = {{"pointWardrobe", 2}, {"pointInLockers", 1}, {"pointOnLockers", 1}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Feet", "Masks"};
				lootTag[] = {"Civilian"};
			};
			
			class FactoryItems {
				locations[] = {{"pointProductionhallFloor", 4}, {"pointOnMachines", 2}};
				lootCategory[] = {"Ammo", "Tools", "Headgear", "Containers"};
				lootTag[] = {"Civilian", "Camping"};
			};
			
			class SurvivorItems {
				locations[] = {{"point2ndFloor", 2}};
				lootCategory[] = {"Tools", "Ammo", "Pistols", "Rifles", "Tools"};
				lootTag[] = {"Civilian", "Camping"};
			};
		};
	};
	
	class Land_HouseV2_03B : HouseDefault {
		class Spawns : Spawns {
			class Clothing {
				locations[] = {{"pointWardrobe", 1}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Feet", "Masks"};
				lootTag[] = {"Civilian"};
			};
			
			class OfficeStuff {
				locations[] = {{"pointOnTable", 2}, {"pointUnderTable", 1}, {"pointArroundTable", 2}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Office"};
			};
			
			class Books {
				locations[] = {{"pointOnBookShelves", 1}, {"pointArroundBookShelves", 1}};
				lootCategory[] = {"Books"};
				lootTag[] = {"Maps", "Civilian"};
			};
			
			class OfficeFloor {
				locations[] = {{"pointOfficeFloor", 2}};
				lootCategory[] = {"Tools", "Materials", "Food", "Books", "Materials"};
				lootTag[] = {"Office", "Civilian"};
			};
			
			class Supplies {
				locations[] = {{"pointHallShelves", 2}};
				lootCategory[] = {"Ammo", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class CivilianMix {
				locations[] = {{"pointHallFloor", 1}, {"pointPiano", 1}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Masks"};
				lootTag[] = {"Civilian"};
			};
			
			class Melee {
				locations[] = {{"proxyMelee", 2}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Civilian"};
			};
			
			class Rifles {
				locations[] = {{"proxyWeapons", 1}};
				lootCategory[] = {"Magazines", "Rifles"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_HouseV2_04_interier : HouseDefault {
		class Spawns : Spawns {
			class Stove {
				locations[] = {{"pointStove", 1}};
				lootCategory[] = {"Food", "Tools"};
				lootTag[] = {"Kitchen"};
			};
			
			class Kitchen {
				locations[] = {{"pointFridge", 1}, {"pointRoomFloor", 2}, {"pointKitchenTable", 2}};
				lootCategory[] = {"Food"};
				lootTag[] = {"Civilian"};
			};
			
			class OfficeStuff {
				locations[] = {{"pointWorkDesk", 1}};
				lootCategory[] = {"Tools", "Ammo"};
				lootTag[] = {"Civilian", "Office"};
			};
			
			class CivilianMix {
				locations[] = {{"pointChair", 1}, {"pointHallFloor", 1}};
				lootCategory[] = {"Tools", "Tops", "Pants", "Headgear", "Food", "Rifles", "Pistols", "Masks"};
				lootTag[] = {"Civilian"};
			};
			
			class ToolsMix {
				locations[] = {{"pointHallTable", 1}, {"pointHallFloor", 1}, {"pointStaircase", 1}};
				lootCategory[] = {"Ammo", "Tools", "Materials", "Rifles", "Pistols"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_HouseV2_05 : HouseDefault {
		class Spawns : Spawns {
			class Stove {
				locations[] = {{"pointStove", 1}};
				lootCategory[] = {"Food", "Tools"};
				lootTag[] = {"Kitchen"};
			};
			
			class Kitchen {
				locations[] = {{"pointFridge", 1}, {"pointKitchenTable", 2}, {"pointKitchenShelves", 3}};
				lootCategory[] = {"Food"};
				lootTag[] = {"Kitchen"};
			};
			
			class Clothing {
				locations[] = {{"pointWardrobe", 1}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Feet", "Masks"};
				lootTag[] = {"Civilian"};
			};
			
			class ToolsMix {
				locations[] = {{"pointHallShelves", 1}};
				lootCategory[] = {"Ammo", "Tools", "Materials", "Rifles", "Pistols"};
				lootTag[] = {"Civilian"};
			};
			
			class Books {
				locations[] = {{"pointLivingRoomShelves", 1}};
				lootCategory[] = {"Books"};
				lootTag[] = {"Civilian", "Maps"};
			};
		};
	};
	
	class Land_Church_02 : HouseDefault {
		class Spawns : Spawns {
			class CivilianLeftovers {
				locations[] = {{"pointEntrance", 2}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Bags", "Feet", "Food"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_Church_02a : HouseDefault {
		lootMax = 4;
		
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"LootFloor", 3}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Feet", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class Book {
				locations[] = {{"LootBook", 1}};
				lootCategory[] = {"Books"};
				lootTag[] = {"Religious"};
			};
		};
	};
	
	class Land_Church_03 : HouseDefault {
		class Spawns : Spawns {
			class CivilianLeftovers {
				locations[] = {{"pointFloorCorners", 3}, {"pointCripts", 2}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Feet", "Bags", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class Altar {
				locations[] = {{"pointAltar", 2}};
				lootCategory[] = {"Books"};
				lootTag[] = {"Religious"};
			};
		};
	};
	
	class Land_Church_05R : HouseDefault {
		class Spawns : Spawns {
			class CivilianLeftovers {
				locations[] = {{"pointTrashInRubble", 2}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Books"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_Rail_warehouse : HouseDefault {
		class Spawns : Spawns {
			class SmallItems {
				locations[] = {{"pointShelves", 2}, {"pointBoxes", 2}, {"pointOnWorkPlanks", 1}, {"pointUnderWorkingPlanks", 1}};
				lootCategory[] = {"Tools", "Ammo", "Materials", "Headgear"};
				lootTag[] = {"Civilian", "Work"};
			};
			
			class BigItems {
				locations[] = {{"pointFloor", 1}, {"pointUnderWorkingPlanks", 1}};
				lootCategory[] = {"Tools", "Feet", "Headgear"};
				lootTag[] = {"Civilian", "Work"};
			};
		};
	};
	
	class Land_Misc_StreetBooth_fastfood : HouseDefault {
		class Spawns : Spawns {
			class SurvivalLeftovers {
				locations[] = {{"lootRoof", 19}};
				lootCategory[] = {"Ammo", "Materials", "Pistols", "Rifles", "Tools", "Food", "Pistols"};
				lootTag[] = {"Civilian"};
			};
			
			class FoodStorage {
				locations[] = {{"lootFoodStorage", 4}};
				lootCategory[] = {"Food", "Tools"};
				lootTag[] = {"Civilian", "Office"};
			};
		};
	};
	
	class Land_Misc_StreetBooth_grocery : Land_Misc_StreetBooth_fastfood {
		class Spawns : Spawns {
			class SurvivalLeftovers {
				locations[] = {{"lootGrocery", 55}};
				lootCategory[] = {"Materials", "Ammo", "Food", "Pistols"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_Misc_StreetBooth_news : HouseDefault {
		class Spawns : Spawns {
			class SurvivalLeftovers {
				locations[] = {{"lootRoof", 2}};
				lootCategory[] = {"Ammo", "Pistols", "Tools"};
				lootTag[] = {"Civilian"};
			};
			
			class FoodStorage {
				locations[] = {{"lootFoodStorage", 3}};
				lootCategory[] = {"Food", "Materials", "Tools"};
				lootTag[] = {"Civilian", "Camping", "Office"};
			};
		};
	};
	
	class Land_Ind_Stack_Big : HouseDefault {
		class Spawns : Spawns {
			class CivilianLeftovers {
				locations[] = {{"point1stFloor", 2}, {"pointBehindEngine", 1}, {"pointGroundLadder", 1}};
				lootCategory[] = {"Food", "Bags", "Tops", "Pants", "Headgear", "Feet", "Materials", "Food"};
				lootTag[] = {"Civilian"};
			};
			
			class LastRefuge {
				locations[] = {{"point2ndFloor", 2}};
				lootCategory[] = {"Ammo", "Pistols", "Rifles", "Magazines", "Tools", "Medical", "Materials", "Food"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_telek1 : HouseDefault {
		class Spawns : Spawns {
			class SniperLoot {
				locations[] = {{"pointTower", 2}};
				lootCategory[] = {"Ammo", "Attachments", "Magazines", "Rifles"};
				lootTag[] = {"abandoned"};
			};
		};
	};
	
	class Land_Camp : HouseDefault {
		class Spawns : Spawns {
			class AlongWalls {
				locations[] = {{"LootAlongWalls", 1}};
				lootCategory[] = {"Ammo", "Magazines", "Attachments", "Medical", "Food"};
				lootTag[] = {"Military_east"};
			};
			
			class Center {
				locations[] = {{"LootCenter", 2}};
				lootCategory[] = {"Ammo", "Magazines", "Attachments", "Food", "Rifles", "Explosives", "Containers", "Tools"};
				lootTag[] = {"Military_east"};
			};
		};
	};
	
	class Land_Mash : HouseDefault {
		class Spawns : Spawns {
			class AlongWalls {
				locations[] = {{"LootAlongWalls", 1}};
				lootCategory[] = {"Ammo", "Magazines", "Attachments", "Medical", "Food"};
				lootTag[] = {"Military_east"};
			};
			
			class Center {
				locations[] = {{"LootCenter", 2}};
				lootCategory[] = {"Ammo", "Magazines", "Attachments", "Tops", "Pants", "Headgear", "Food", "Rifles", "Explosives", "Masks", "Tools"};
				lootTag[] = {"Military_east"};
			};
		};
	};
	
	class Land_Pristresek_mensi : HouseDefault {
		class Spawns : Spawns {
			class OnBarricades {
				locations[] = {{"lootBarricade", 1}};
				lootCategory[] = {"Ammo", "Magazines", "Attachments", "Food", "Explosives", "Containers", "Tools"};
				lootTag[] = {"Military_east"};
			};
			
			class OnBox {
				locations[] = {{"lootBox", 2}};
				lootCategory[] = {"Rifles", "Ammo", "Magazines", "Attachments", "Headgear"};
				lootTag[] = {"Military_east"};
			};
		};
	};
	
	class Land_CampEast : HouseDefault {
		lootMax = 4;
		
		class Spawns : Spawns {
			class AlongWalls {
				locations[] = {{"LootAlongWalls", 2}};
				lootCategory[] = {"Ammo", "Magazines", "Attachments", "Pistols", "Explosives", "Containers"};
				lootTag[] = {"Military_east", "Military_west"};
			};
			
			class Center {
				locations[] = {{"LootCenter", 2}};
				lootCategory[] = {"Ammo", "Magazines", "Attachments", "Tops", "Pants", "Headgear", "Feet", "Bags", "Rifles", "Vests", "Tools"};
				lootTag[] = {"Military_east", "Military_west"};
			};
		};
	};
	
	class Land_tent_east : HouseDefault {
		lootMax = 4;
		
		class Spawns : Spawns {
			class AlongWalls {
				locations[] = {{"LootAlongWalls", 2}};
				lootCategory[] = {"Ammo", "Magazines", "Attachments", "Pistols"};
				lootTag[] = {"Military_east", "Military_west"};
			};
			
			class Center {
				locations[] = {{"LootCenter", 2}};
				lootCategory[] = {"Ammo", "Magazines", "Attachments", "Tops", "Pants", "Headgear", "Feet", "Bags", "Rifles", "Explosives"};
				lootTag[] = {"Military_east", "Military_west"};
			};
		};
	};
	
	class Land_Fort_Watchtower : HouseDefault {
		class Spawns : Spawns {
			class AlongWalls {
				locations[] = {{"pointAlongWalls", 2}, {"point1stFloorHandrail", 2}, {"pointBarriers", 2}};
				lootCategory[] = {"Ammo", "Magazines", "Attachments", "Food", "Pistols", "Masks", "Pistols"};
				lootTag[] = {"Military_east", "Civilian"};
			};
			
			class Center {
				locations[] = {{"pointCenter", 2}, {"point1stFloor", 2}};
				lootCategory[] = {"Ammo", "Magazines", "Attachments", "Tops", "Pants", "Headgear", "Feet", "Bags", "Food", "Rifles", "Explosives", "Containers", "Vests", "Pistols"};
				lootTag[] = {"Military_east"};
			};
		};
	};
	
	class Land_Police_Station : HouseDefault {
		lootMax = 30;
		
		class Spawns : Spawns {
			class Cell1stFloor {
				locations[] = {{"LootCell1stFloor", 2}};
				lootCategory[] = {"Tops", "Pants", "Vests", "Headgear", "Feet", "Tools", "Pistols"};
				lootTag[] = {"Police"};
			};
			
			class Office1stFloor {
				locations[] = {{"LootOffice1stFloor", 1}};
				lootCategory[] = {"Tools", "Books", "Food"};
				lootTag[] = {"Office", "Maps"};
			};
			
			class OfficeFloor1stFloor {
				locations[] = {{"LootOfficeFloor1stFloor", 1}};
				lootCategory[] = {"Books", "Tools"};
				lootTag[] = {"Maps", "Police"};
			};
			
			class Weapons1stFloor {
				locations[] = {{"LootWeapons1stFloor", 1}};
				lootCategory[] = {"Rifles", "Pistols", "Ammo", "Attachments", "Food"};
				lootTag[] = {"Police"};
			};
			
			class LivingRoom1stFloor {
				locations[] = {{"LootLivingRoom1stFloor", 1}};
				lootCategory[] = {"Bags", "Tops", "Pants", "Vests", "Headgear", "Feet", "Food"};
				lootTag[] = {"Police"};
			};
			
			class Corridor {
				locations[] = {{"LootCorridor", 1}};
				lootCategory[] = {"Tops", "Pants", "Vests", "Headgear", "Feet"};
				lootTag[] = {"Police"};
			};
			
			class Room12ndFloor {
				locations[] = {{"LootRoom12ndFloor", 2}};
				lootCategory[] = {"Rifles", "Pistols", "Ammo", "Attachments", "Food", "Headgear", "Feet", "Magazines"};
				lootTag[] = {"Police"};
			};
			
			class Offices2ndFloor {
				locations[] = {{"LootOffices2ndFloor", 1}};
				lootCategory[] = {"Tools", "Books", "Food"};
				lootTag[] = {"Office", "Maps"};
			};
			
			class LargeBigRoom {
				locations[] = {{"LootLargeBigRoom", 3}};
				lootCategory[] = {"Rifles", "Pistols", "Ammo", "Attachments", "Food", "Headgear", "Feet", "Magazines", "Tops", "Pants", "Vests"};
				lootTag[] = {"Police"};
			};
			
			class SmallBigRoom {
				locations[] = {{"LootSmallBigRoom", 3}};
				lootCategory[] = {"Explosives", "Tools"};
				lootTag[] = {"Police"};
			};
			
			class Roof {
				locations[] = {{"LootRoof", 3}};
				lootCategory[] = {"Explosives", "Rifles", "Pistols", "Ammo", "Magazines"};
				lootTag[] = {"Police"};
			};
		};
	};
	
	class Land_A_BuildingWIP : HouseDefault {
		class Spawns : Spawns {
			class SniperLoot {
				locations[] = {{"lootEdges", 88}, {"loot4thFloorGroundNextToEdge", 34}};
				lootCategory[] = {"Ammo", "Magazines", "Attachments", "Rifles", "Pistols"};
				lootTag[] = {"Civilian"};
			};
			
			class Food {
				locations[] = {{"lootWorkPlanks", 112}};
				lootCategory[] = {"Food", "Tools"};
				lootTag[] = {"Civilian", "Kitchen", "Camping"};
			};
			
			class Trash {
				locations[] = {{"lootFloors", 292}};
				lootCategory[] = {"Pistols", "Rifles", "Tools"};
				lootTag[] = {"Civilian", "Work"};
			};
			
			class Weapons {
				locations[] = {{"lootWorkPlanks", 112}};
				lootCategory[] = {"Ammo", "Rifles", "Pistols", "Magazines"};
				lootTag[] = {"Civilian"};
			};
			
			class Clothes {
				locations[] = {{"lootOnBricks", 145}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Bags", "Tools"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_Health_care_center : HouseDefault {
		lootMax = 15;
		
		class Spawns : Spawns {
			class LobbySmall {
				locations[] = {{"Loot_LobbySmall", 2}};
				lootCategory[] = {"Medical", "Food", "Tools"};
				lootTag[] = {"Medic"};
			};
			
			class LobbyMedium {
				locations[] = {{"Loot_LobbyMedium", 1}, {"Loot_Room2Medium", 1}, {"Loot_HallMedium", 1}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Tools"};
				lootTag[] = {"Medic"};
			};
			
			class HallSmall {
				locations[] = {{"Loot_HallSmall", 2}};
				lootCategory[] = {"Medical", "Food", "Tools"};
				lootTag[] = {"Medic"};
			};
			
			class Racks {
				locations[] = {{"Loot_Racks", 2}, {"Loot_Room1Small", 1}, {"Loot_Room2Small", 2}};
				lootCategory[] = {"Medical", "Food"};
				lootTag[] = {"Medic"};
			};
			
			class Room3Small {
				locations[] = {{"Loot_Room3Small", 1}, {"Loot_Room5Small", 2}};
				lootCategory[] = {"Medical", "Tools"};
				lootTag[] = {"Medic"};
			};
			
			class Room3Sink {
				locations[] = {{"Loot_Room3Sink", 1}};
				lootCategory[] = {"Medical"};
				lootTag[] = {"Medic"};
			};
			
			class Room3Medium {
				locations[] = {{"Loot_Room3Medium", 1}};
				lootCategory[] = {"Tops", "Pants", "Headgear"};
				lootTag[] = {"Medic"};
			};
			
			class Room4Small {
				locations[] = {{"Loot_Room4Small", 2}};
				lootCategory[] = {"Medical"};
				lootTag[] = {"Medic"};
			};
			
			class Room5Medium {
				locations[] = {{"Loot_Room5Medium", 1}};
				lootCategory[] = {"Tops", "Pants", "Headgear"};
				lootTag[] = {"Medic"};
			};
			
			class Outside {
				locations[] = {{"Loot_Outside", 1}};
				lootCategory[] = {"Medical", "Tools"};
				lootTag[] = {"Medic"};
			};
		};
	};
	
	class Land_Village_pub : HouseDefault {
		class Spawns : Spawns {
			class Food {
				locations[] = {{"lootFood", 101}};
				lootCategory[] = {"Food"};
				lootTag[] = {"Civilian"};
			};
			
			class Clothes {
				locations[] = {{"lootClothes", 43}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Bags"};
				lootTag[] = {"Civilian", "Hunting"};
			};
			
			class Shoes {
				locations[] = {{"lootShoes", 43}};
				lootCategory[] = {"Feet"};
				lootTag[] = {"Civilian"};
			};
			
			class ToolsSmall {
				locations[] = {{"lootSmallTools", 10}};
				lootCategory[] = {"Tools", "Gloves", "Materials"};
				lootTag[] = {"Civilian", "Office"};
			};
			
			class BigTools {
				locations[] = {{"lootBigTools", 27}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Civilian"};
			};
			
			class CivilianAmmoAndAttachments {
				locations[] = {{"lootAmmoAndAttachments", 43}};
				lootCategory[] = {"Ammo", "Attachments", "Books"};
				lootTag[] = {"Civilian", "Maps"};
			};
			
			class Firearms {
				locations[] = {{"lootFirearms", 15}};
				lootCategory[] = {"Rifles", "Pistols"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_A_Crane_02a : HouseDefault {
		class Spawns : Spawns {
			class CraneBase {
				locations[] = {{"loot_All", 1}};
				lootCategory[] = {"Food", "Tools", "Ammo", "Headgear", "Rifles"};
				lootTag[] = {"abandoned"};
			};
		};
	};
	
	class Land_A_Crane_02b : HouseDefault {
		class Spawns : Spawns {
			class CraneBase {
				locations[] = {{"loot_All", 2}};
				lootCategory[] = {"Food", "Tools", "Ammo", "Magazines", "Attachments", "Headgear", "Rifles"};
				lootTag[] = {"abandoned"};
			};
		};
	};
	
	class Land_fortified_nest_small : HouseDefault {
		class Spawns : Spawns {
			class Inside {
				locations[] = {{"loot_p_center", 1}};
				lootCategory[] = {"Ammo", "Magazines", "Attachments", "Tops", "Pants", "Headgear", "Feet", "Pistols", "Bags", "Food", "Rifles", "Explosives", "Containers"};
				lootTag[] = {"Military_east"};
			};
		};
	};
	
	class Land_Ind_Expedice_1 : HouseDefault {
		class Spawns : Spawns {
			class Roof {
				locations[] = {{"LootRoof", 2}};
				lootCategory[] = {"Tools", "Headgear", "Gloves"};
				lootTag[] = {"Civilian", "Work"};
			};
			
			class Weapons {
				locations[] = {{"LootWeapons", 2}};
				lootCategory[] = {"Ammo", "Rifles", "Attachments", "Pistols"};
				lootTag[] = {"Civilian", "Work"};
			};
			
			class HallBig {
				locations[] = {{"LootHallBig", 1}};
				lootCategory[] = {"Containers", "Tools", "Materials"};
				lootTag[] = {"Civilian", "Work"};
			};
			
			class HallSmall {
				locations[] = {{"LootHallSmall", 1}};
				lootCategory[] = {"Food", "Gloves", "Headgear"};
				lootTag[] = {"Civilian", "Work"};
			};
		};
	};
	
	class Land_Ind_Expedice_2 : HouseDefault {
		class Spawns : Spawns {
			class all_center {
				locations[] = {{"loot_p_center", 2}};
				lootCategory[] = {"Ammo", "Food", "Tools", "Headgear", "Rifles", "Materials"};
				lootTag[] = {"abandoned"};
			};
		};
	};
	
	class Land_Ind_Expedice_3 : HouseDefault {
		class Spawns : Spawns {
			class small_loot {
				locations[] = {{"loot_p_small", 2}};
				lootCategory[] = {"Ammo", "Food", "Tools", "Ammo", "Headgear", "Materials"};
				lootTag[] = {"abandoned"};
			};
			
			class big_loot {
				locations[] = {{"loot_p_big", 2}};
				lootCategory[] = {"Ammo", "Food", "Tools", "Rifles", "Materials"};
				lootTag[] = {"abandoned"};
			};
		};
	};
	
	class Land_Ind_GarageOffice : HouseDefault {
		class Spawns : Spawns {
			class BigParts {
				locations[] = {{"LootBigParts", 1}};
				lootCategory[] = {"VehicleParts"};
				lootTag[] = {"Wheels"};
			};
			
			class Bath {
				locations[] = {{"LootBath", 1}};
				lootCategory[] = {"Medical"};
				lootTag[] = {"Hygiene"};
			};
			
			class Office {
				locations[] = {{"LootOffice", 1}};
				lootCategory[] = {"Tools", "Food"};
				lootTag[] = {"Office", "Civilian"};
			};
			
			class Clothes {
				locations[] = {{"LootCases1stFloor", 1}, {"LootCases2ndFloor", 1}, {"LootFloor2ndFloor", 1}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Feet"};
				lootTag[] = {"Civilian", "Work"};
			};
		};
	};
	
	class Land_Ind_GarageRow : HouseDefault {
		class Spawns : Spawns {
			class SmallLoot {
				locations[] = {{"lootShelves", 3}, {"lootRoof", 3}, {"lootRoofWall", 3}};
				lootCategory[] = {"Ammo", "Tools", "Food", "Gloves", "Headgear", "Feet", "Pants"};
				lootTag[] = {"Civilian", "Work"};
			};
			
			class BigLoot {
				locations[] = {{"lootCenter", 3}};
				lootCategory[] = {"Tools", "Magazines", "VehicleParts"};
				lootTag[] = {"Civilian", "Work", "Wheels"};
			};
		};
	};
	
	class Land_KrasnoAir_Control : HouseDefault {
		lootMax = 15;
		
		class Spawns : Spawns {
			class ToolsBig {
				locations[] = {{"lootToolsBig", 13}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Work"};
			};
			
			class ToolsSmall {
				locations[] = {{"lootToolsSmall", 21}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Civilian"};
			};
			
			class PicnicTables {
				locations[] = {{"lootPicknick", 153}};
				lootCategory[] = {"Food", "Tools"};
				lootTag[] = {"Civilian", "Kitchen"};
			};
			
			class Office {
				locations[] = {{"lootOffice", 193}};
				lootCategory[] = {"Food", "Pistols", "Books", "Tools", "Magazines"};
				lootTag[] = {"Civilian", "Office"};
			};
			
			class Bathroom {
				locations[] = {{"lootBathroom", 31}};
				lootCategory[] = {"Medical", "Tools", "Materials"};
				lootTag[] = {"Civilian", "Medic"};
			};
			
			class Clothes {
				locations[] = {{"lootClothes", 155}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Materials", "Tools"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_KrasnoAir_Hangars : HouseDefault {
		class Spawns : Spawns {
			class Floor_loot {
				locations[] = {{"pointFloor", 5}};
				lootCategory[] = {"Tools", "Materials", "Rifles", "Pistols", "Magazines", "Ammo", "Bags", "Tops", "Pants", "Headgear", "Materials"};
				lootTag[] = {"Civilian", "Police", "Office"};
			};
		};
	};
	
	class Land_BoatSmall_1 : HouseDefault {
		class Spawns : Spawns {
			class FishingClothes {
				locations[] = {{"LootClothes", 3}};
				lootCategory[] = {"Tops", "Pants", "Feet", "Headgear"};
				lootTag[] = {"Fishing"};
			};
			
			class FishingEquipment {
				locations[] = {{"LootTools", 3}};
				lootCategory[] = {"Materials", "Tools"};
				lootTag[] = {"Fishing"};
			};
		};
	};
	
	class Land_BoatSmall_2a : HouseDefault {
		class Spawns : Spawns {
			class FishingClothes {
				locations[] = {{"LootClothes", 3}};
				lootCategory[] = {"Tops", "Pants", "Feet", "Headgear"};
				lootTag[] = {"Fishing"};
			};
			
			class FishingEquipment {
				locations[] = {{"LootTools", 3}};
				lootCategory[] = {"Materials", "Tools"};
				lootTag[] = {"Fishing"};
			};
		};
	};
	
	class Land_BoatSmall_2b : HouseDefault {
		class Spawns : Spawns {
			class FishingClothes {
				locations[] = {{"LootClothes", 3}};
				lootCategory[] = {"Tops", "Pants", "Feet", "Headgear"};
				lootTag[] = {"Fishing"};
			};
			
			class FishingEquipment {
				locations[] = {{"LootTools", 3}};
				lootCategory[] = {"Materials", "Tools"};
				lootTag[] = {"Fishing"};
			};
		};
	};
	
	class Land_Prison_LargeWall : HouseDefault {
		lootMax = 8;
		
		class Spawns : Spawns {
			class PrisonEquipment {
				locations[] = {{"lootFloor", 10}};
				lootCategory[] = {"Pistols", "Rifles", "Tools", "Materials", "Explosives", "Tops", "Pants", "Headgear"};
				lootTag[] = {"Police", "Prison"};
			};
		};
	};
	
	class Land_Prison_MainCastle_EXT : HouseDefault {
		lootMax = 25;
		
		class Spawns : Spawns {
			class PrisonersGear {
				locations[] = {{"lootCells", 657}, {"lootHalls", 210}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Tools", "Materials"};
				lootTag[] = {"Prison"};
			};
			
			class HygienInCells {
				locations[] = {{"lootHygiene", 76}};
				lootCategory[] = {"Tools", "Materials", "Medical"};
				lootTag[] = {"Prison", "Hygiene"};
			};
			
			class GuardsGear {
				locations[] = {{"lootGuardsQuarters", 126}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Tools"};
				lootTag[] = {"Police", "Prison"};
			};
			
			class Storage {
				locations[] = {{"lootStorage", 158}};
				lootCategory[] = {"Food"};
				lootTag[] = {"Civilian"};
			};
			
			class SpecialGear {
				locations[] = {{"lootSamotka", 4}, {"lootTowerBalcony1", 6}, {"lootTowerTopFloor", 20}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Rifles", "Pistols", "Magazines", "Ammo", "Attachments", "Explosives", "Vests", "Masks"};
				lootTag[] = {"Police", "Military_east"};
			};
		};
	};
	
	class Land_Prison_SideBuilding_EXT : HouseDefault {
		lootMax = 20;
		
		class Spawns : Spawns {
			class BigToolsStorage {
				locations[] = {{"lootBigStorage", 109}};
				lootCategory[] = {"Materials", "Tools"};
				lootTag[] = {"Work", "Civilian"};
			};
			
			class SmallToolsStorage {
				locations[] = {{"lootSmallStorage", 211}};
				lootCategory[] = {"Materials", "Tools"};
				lootTag[] = {"Civilian"};
			};
			
			class FoodStorage {
				locations[] = {{"lootFood", 109}};
				lootCategory[] = {"Food"};
				lootTag[] = {"Civilian"};
			};
			
			class PoliceGearClothes {
				locations[] = {{"lootPoliceClothes", 178}};
				lootCategory[] = {"Tops", "Pants", "Headgear"};
				lootTag[] = {"Police", "Prison"};
			};
			
			class PoliceGearTools {
				locations[] = {{"lootPoliceEquipment", 177}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Rifles", "Pistols", "Magazines", "Ammo", "Attachments", "Explosives"};
				lootTag[] = {"Police", "Military_east", "Prison"};
			};
			
			class Offices {
				locations[] = {{"lootOffice", 112}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Office", "Police"};
			};
			
			class Toilet {
				locations[] = {{"lootToilet", 12}};
				lootCategory[] = {"Medical"};
				lootTag[] = {"Civilian", "Medic"};
			};
		};
	};
	
	class Land_Ind_Coltan_Main_EP1 : HouseDefault {
		class Spawns : Spawns {
			class ToolsBig {
				locations[] = {{"pointRoomsFloor", 2}, {"pointRoof", 2}, {"pointStaircase", 2}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Work"};
			};
		};
	};
	
	class Land_CampHouse_white : HouseDefault {
		class Spawns : Spawns {
			class Food {
				locations[] = {{"lootFood", 44}};
				lootCategory[] = {"Food", "Tools"};
				lootTag[] = {"Civilian", "Kitchen"};
			};
			
			class Clothes {
				locations[] = {{"lootClothes", 29}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Bags", "Feet"};
				lootTag[] = {"Civilian", "Kitchen"};
			};
			
			class Others {
				locations[] = {{"lootTools", 38}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Camping", "Forester"};
			};
		};
	};
	
	class Land_CampHouse_brown : HouseDefault {
		class Spawns : Spawns {
			class Food {
				locations[] = {{"lootFood", 21}};
				lootCategory[] = {"Food", "Tools"};
				lootTag[] = {"Civilian", "Kitchen"};
			};
			
			class Clothes {
				locations[] = {{"lootClothes", 66}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Bags", "Feet"};
				lootTag[] = {"Civilian", "Kitchen"};
			};
			
			class Others {
				locations[] = {{"lootTools", 27}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Camping", "Forester"};
			};
		};
	};
	
	class Land_CampHouse_red : HouseDefault {
		class Spawns : Spawns {
			class Food {
				locations[] = {{"lootFood", 2}};
				lootCategory[] = {"Food", "Tools"};
				lootTag[] = {"Civilian", "Kitchen"};
			};
			
			class Clothes {
				locations[] = {{"lootClothes", 3}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Bags", "Feet"};
				lootTag[] = {"Civilian", "Kitchen"};
			};
			
			class Others {
				locations[] = {{"lootTools", 5}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Camping", "Forester"};
			};
		};
	};
	
	class Land_sunshade : HouseDefault {
		class Spawns : Spawns {
			class Cans {
				locations[] = {{"pointCans", 1}};
				lootCategory[] = {"Food"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_Village_store : HouseDefault {
		lootMax = 10;
		
		class Spawns : Spawns {
			class InShop {
				locations[] = {{"lootShop", 143}};
				lootCategory[] = {"Food", "Materials"};
				lootTag[] = {"Civilian", "Camping", "Farm"};
			};
			
			class Storage {
				locations[] = {{"lootStorage", 146}};
				lootCategory[] = {"Food", "Materials"};
				lootTag[] = {"Civilian", "Camping", "Farm"};
			};
			
			class Tools {
				locations[] = {{"lootBackEntranceFloor", 11}};
				lootCategory[] = {"Tools", "Materials"};
				lootTag[] = {"Civilian", "Camping", "Farm", "Forester"};
			};
		};
	};
	
	class Land_school_building : HouseDefault {
		lootMax = 20;
		
		class Spawns : Spawns {
			class Books {
				locations[] = {{"lootBooks", 205}};
				lootCategory[] = {"Books"};
				lootTag[] = {"Civilian"};
			};
			
			class SchoolTools {
				locations[] = {{"lootSchoolTools", 235}};
				lootCategory[] = {"Tools", "Materials"};
				lootTag[] = {"Office"};
			};
			
			class Food {
				locations[] = {{"lootFood", 369}};
				lootCategory[] = {"Food"};
				lootTag[] = {"Civilian"};
			};
			
			class BagsAndClothes {
				locations[] = {{"lootClothes", 423}};
				lootCategory[] = {"Bags", "Tops", "Pants", "Headgear", "Feet"};
				lootTag[] = {"Civilian", "School"};
			};
			
			class SportEquip {
				locations[] = {{"lootSportsGear", 81}};
				lootCategory[] = {"Pants", "Headgear", "Tops", "Feet"};
				lootTag[] = {"School"};
			};
			
			class SurvivalEquip {
				locations[] = {{"lootSurvivalGear", 264}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Feet", "Food", "Rifles", "Pistols", "Materials", "Attachments", "Ammo", "Tools", "Magazines"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_repair_center : HouseDefault {
		lootMax = 4;
		
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"LootFloor", 5}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Tools", "Materials"};
				lootTag[] = {"Civilian", "Work"};
			};
			
			class Shelf {
				locations[] = {{"LootShelf", 3}};
				lootCategory[] = {"Food", "Tools", "Materials"};
				lootTag[] = {"Civilian", "work"};
			};
		};
	};
	
	class Land_Shed_W03 : HouseDefault {
		lootMax = 2;
		
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"LootFloor", 5}};
				lootCategory[] = {"Tools", "Materials", "Containers"};
				lootTag[] = {"Work", "Forester", "Farm"};
			};
		};
	};
	
	class Land_Misc_WaterStation : HouseDefault {
		lootMax = 2;
		
		class Spawns : Spawns {
			class Cases {
				locations[] = {{"LootCase", 2}};
				lootCategory[] = {"Tools", "Food", "Materials"};
				lootTag[] = {"Civilian", "Work"};
			};
		};
	};
	
	class Land_PowLines_Transformer2 : HouseDefault {
		lootMax = 1;
		
		class Spawns : Spawns {
			class Box {
				locations[] = {{"LootBox", 1}};
				lootCategory[] = {"Materials"};
				lootTag[] = {"Work"};
			};
		};
	};
	
	class Land_HouseBlock_D1 : HouseDefault {
		lootMax = 8;
		
		class Spawns : Spawns {
			class Hall {
				locations[] = {{"LootHallDown", 2}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Feet"};
				lootTag[] = {"Civilian"};
			};
			
			class Kitchen {
				locations[] = {{"LootKitchenDown", 2}};
				lootCategory[] = {"Tools", "Materials", "Food"};
				lootTag[] = {"Kitchen"};
			};
			
			class Bathroom {
				locations[] = {{"LootBathDown", 1}};
				lootCategory[] = {"Medical"};
				lootTag[] = {"Hygiene", "Civilian"};
			};
			
			class Stairs {
				locations[] = {{"LootStairs", 1}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Feet"};
				lootTag[] = {"Civilian"};
			};
			
			class Hall2floor {
				locations[] = {{"LootHall2Floor", 1}};
				lootCategory[] = {"Feet", "Tools"};
				lootTag[] = {"Civilian"};
			};
			
			class Room2Floor {
				locations[] = {{"LootRoom2Floor", 1}};
				lootCategory[] = {"Bags"};
				lootTag[] = {"Civilian"};
			};
			
			class Room2 {
				locations[] = {{"LootRoom2", 1}};
				lootCategory[] = {"Books", "Tools", "Eyewear", "Food"};
				lootTag[] = {"Civilian", "Maps"};
			};
		};
	};
	
	class Land_Ind_SiloVelke_01 : HouseDefault {
		class Spawns : Spawns {
			class Balcony {
				locations[] = {{"LootBalcony", 1}};
				lootCategory[] = {"Materials", "Tops", "Pants", "Headgear", "Feet"};
				lootTag[] = {"Work"};
			};
			
			class CaseSmall {
				locations[] = {{"LootCaseSmall", 1}};
				lootCategory[] = {"Materials"};
				lootTag[] = {"Work"};
			};
			
			class Floor {
				locations[] = {{"LootFloor1stRoom", 1}, {"LootFloor2ndRoom", 1}};
				lootCategory[] = {"Materials", "Tops", "Pants", "Headgear", "Feet"};
				lootTag[] = {"Work"};
			};
			
			class Roof {
				locations[] = {{"LootRoof", 1}};
				lootCategory[] = {"Tools", "Materials"};
				lootTag[] = {"Work"};
			};
			
			class Roofroom {
				locations[] = {{"LootRoofRoom", 1}};
				lootCategory[] = {"Rifles", "Pistols", "Attachments", "Ammo", "Magazines"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_V3S_wreck : HouseDefault {
		class Spawns : Spawns {
			class Wheels {
				locations[] = {{"lootWheels", 1}};
				lootCategory[] = {"VehicleParts"};
				lootTag[] = {"V3SWheels"};
			};
			
			class Inside {
				locations[] = {{"lootCargo", 1}, {"lootCabin", 1}};
				lootCategory[] = {"Food"};
				lootTag[] = {"Civilian"};
			};
			
			class Outside {
				locations[] = {{"lootAround", 1}};
				lootCategory[] = {"Tools"};
			};
		};
	};
	
	class Land_Gunrack1 : HouseDefault {
		lootMax = 1;
		
		class Spawns : Spawns {
			class Weapons {
				locations[] = {{"LootWeapons", 1}};
				lootCategory[] = {"Pistols", "Rifles"};
				lootTag[] = {"Civilian"};
			};
		};
	};
	
	class Land_Ind_Mlyn_03 : HouseDefault {
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"LootFloor", 2}};
				lootCategory[] = {"Materials", "Tops", "Pants", "Headgear", "Feet", "Tools"};
				lootTag[] = {"Civilian", "Work"};
			};
			
			class Roof {
				locations[] = {{"LootRoof", 2}};
				lootCategory[] = {"Tools"};
				lootTag[] = {"Work"};
			};
			
			class Top {
				locations[] = {{"LootTop", 1}};
				lootCategory[] = {"Pistols", "Attachments", "Ammo", "Tools"};
				lootTag[] = {"Civilian"};
			};
			
			class Case {
				locations[] = {{"LootCase", 1}};
				lootCategory[] = {"Tools", "Food"};
				lootTag[] = {"Civilian", "Work"};
			};
		};
	};
	
	class Land_Ind_Pec_03b : HouseDefault {
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"LootFloor", 2}};
				lootCategory[] = {"Materials", "Tops", "Pants", "Headgear", "Feet", "Tools"};
				lootTag[] = {"Civilian", "Work"};
			};
			
			class Roof {
				locations[] = {{"LootRoof", 2}};
				lootCategory[] = {"Tools", "Pistols", "Ammo"};
				lootTag[] = {"Civilian", "Work"};
			};
			
			class Toilet {
				locations[] = {{"LootToilet", 1}};
				lootCategory[] = {"Medical"};
				lootTag[] = {"Hygiene"};
			};
			
			class Case {
				locations[] = {{"LootCase", 1}, {"LootRoom", 1}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Food"};
				lootTag[] = {"Civilian", "Work"};
			};
		};
	};
	
	class Land_Ind_Quarry : HouseDefault {
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"LootFloor", 2}};
				lootCategory[] = {"Materials", "Tops", "Pants", "Headgear", "Feet", "Tools"};
				lootTag[] = {"Civilian", "Work"};
			};
			
			class Roof {
				locations[] = {{"LootRoof", 2}};
				lootCategory[] = {"Tools", "Ammo", "Bags", "Tops", "Pants", "Headgear", "Feet", "Food"};
				lootTag[] = {"Civilian", "Work"};
			};
			
			class Stairs {
				locations[] = {{"LootStairs", 2}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Bags"};
				lootTag[] = {"Civilian", "Work"};
			};
		};
	};
	
	class Land_Church_01 : HouseDefault {
		lootMax = 3;
		
		class Spawns : Spawns {
			class Outside {
				locations[] = {{"LootOutside", 1}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Feet"};
				lootTag[] = {"Civilian"};
			};
			
			class Inside {
				locations[] = {{"LootInside", 1}};
				lootCategory[] = {"Books", "Feet", "Bags", "Tops", "Pants"};
				lootTag[] = {"Civilian"};
			};
			
			class Bible {
				locations[] = {{"LootBible", 1}};
				lootCategory[] = {"Books"};
				lootTag[] = {"Religious"};
			};
		};
	};
	
	class Land_Misc_PowerStation : HouseDefault {
		lootMax = 3;
		
		class Spawns : Spawns {
			class Small {
				locations[] = {{"LootSmall", 1}};
				lootCategory[] = {"Food"};
			};
			
			class Floor {
				locations[] = {{"LootFloor", 2}};
				lootCategory[] = {"Materials", "Tops", "Pants", "Headgear", "Feet", "Tools"};
				lootTag[] = {"Civilian", "Work"};
			};
		};
	};
	
	class Land_Ind_Mlyn_02 : HouseDefault {
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"LootFloor", 2}};
				lootCategory[] = {"Materials", "Tops", "Pants", "Headgear", "Feet", "Tools"};
				lootTag[] = {"Work"};
			};
			
			class Small {
				locations[] = {{"LootSmall", 1}};
				lootCategory[] = {"Tools", "Materials"};
				lootTag[] = {"Work"};
			};
		};
	};
	
	class Land_KitchenRoom : HouseDefault {
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"LootFloor", 4}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Food", "Containers", "Vests", "Masks", "Tools"};
				lootTag[] = {"Military_east", "Military_west", "Kitchen"};
			};
			
			class Roof {
				locations[] = {{"LootRoof", 2}};
				lootCategory[] = {"Ammo", "Magazines", "Attachments", "Pistols", "Rifles"};
				lootTag[] = {"Military_east", "Military_west"};
			};
		};
	};
	
	class Land_SecretBase_HQ : HouseDefault {
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"LootFloor1stFloor", 1}, {"LootFloor2ndFloor", 1}, {"LootCellar", 1}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Containers", "Vests", "Masks", "Tools", "Bags"};
				lootTag[] = {"Military_east", "Military_west"};
			};
			
			class Roof {
				locations[] = {{"LootRoof", 2}};
				lootCategory[] = {"Ammo", "Magazines", "Attachments", "Pistols", "Vests", "Masks", "Bags"};
				lootTag[] = {"Military_east", "Military_west"};
			};
			
			class MiniRoom {
				locations[] = {{"LootMiniRoom", 1}};
				lootCategory[] = {"Rifles", "Ammo"};
				lootTag[] = {"Military_east", "Military_west"};
			};
		};
	};
	
	class Land_SecretBase_Radar : HouseDefault {
		lootMax = 10;
		
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"LootFloor1st", 3}, {"LootFloor2nd", 3}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Containers", "Vests", "Masks", "Tools", "Bags"};
				lootTag[] = {"Military_east", "Military_west"};
			};
			
			class Roof {
				locations[] = {{"LootRoof", 3}};
				lootCategory[] = {"Rifles", "Ammo", "Magazines", "Attachments", "Pistols", "Vests", "Masks", "Containers", "Bags"};
				lootTag[] = {"Military_east", "Military_west"};
			};
			
			class Furniture {
				locations[] = {{"LootFurniture2nd", 1}};
				lootCategory[] = {"Rifles", "Ammo", "Attachments", "Pistols", "Food"};
				lootTag[] = {"Military_east", "Military_west"};
			};
		};
	};
	
	class Land_SecretBase_Bunker2 : HouseDefault {
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"LootFloor", 2}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Containers", "Vests", "Masks", "Tools", "Bags"};
				lootTag[] = {"Military_east", "Military_west"};
			};
			
			class Small {
				locations[] = {{"LootSmall", 1}};
				lootCategory[] = {"Ammo", "Magazines", "Attachments", "Food"};
				lootTag[] = {"Military_east", "Military_west"};
			};
			
			class Case {
				locations[] = {{"LootCase", 3}};
				lootCategory[] = {"Rifles", "Ammo", "Attachments", "Pistols", "Containers"};
				lootTag[] = {"Military_east", "Military_west"};
			};
		};
	};
	
	class Land_RadarPlatform_20m : HouseDefault {
		lootMax = 3;
		
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"LootFloor", 3}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Containers", "Vests", "Masks", "Tools", "Bags", "Rifles", "Ammo", "Attachments"};
				lootTag[] = {"Military_east", "Military_west"};
			};
		};
	};
	
	class Land_Base_cooler : HouseDefault {
		lootMax = 2;
		
		class Spawns : Spawns {
			class Roof {
				locations[] = {{"LootRoof", 2}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Containers", "Vests", "Masks", "Tools", "Bags", "Rifles", "Ammo", "Attachments"};
				lootTag[] = {"Military_east", "Military_west"};
			};
		};
	};
	
	class Land_G_house : HouseDefault {
		lootMax = 2;
		
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"LootFloor", 2}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Containers", "Vests", "Masks", "Tools", "Bags", "Rifles", "Ammo", "Attachments"};
				lootTag[] = {"Military_east", "Military_west"};
			};
		};
	};
	
	class Land_Mil_GuardTower : HouseDefault {
		lootMax = 2;
		
		class Spawns : Spawns {
			class Roof {
				locations[] = {{"LootFloor", 5}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Containers", "Vests", "Masks", "Tools", "Bags", "Rifles", "Ammo", "Attachments"};
				lootTag[] = {"Military_east", "Military_west"};
			};
		};
	};
	
	class Land_Misc_Cargo1Ao : HouseDefault {
		lootMax = 2;
		
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"LootFloor", 6}};
				lootCategory[] = {"Tops", "Pants", "Headgear", "Feet", "Tools", "Materials", "Containers"};
				lootTag[] = {"Civilian", "Work"};
			};
		};
	};
	
	class Land_Misc_Cargo1Bo : Land_Misc_Cargo1Ao {};
	
	class Land_Misc_Cargo1Mof : HouseDefault {
		lootMax = 1;
		
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"LootFloor", 6}};
				lootCategory[] = {"Tops", "Pants", "Feet", "Headgear", "Tents", "Tools", "Explosives", "Pistols", "Rifles", "Ammo", "Magazines", "Attachments"};
				lootTag[] = {"Military_east", "Military_west"};
			};
		};
	};
	
	class Land_Misc_Cargo1Moh : Land_Misc_Cargo1Mof {};
	
	class Land_misc_caravan_metal_green : HouseDefault {
		lootMax = 2;
		
		class Spawns : Spawns {
			class Floor {
				locations[] = {{"LootFloor", 6}};
				lootCategory[] = {"Tops", "Pants", "Feet", "Headgear", "Tools", "Materials", "Containers", "Bags"};
				lootTag[] = {"Civilian", "Work"};
			};
		};
	};
	
	class Land_misc_caravan_metal_rust : Land_misc_caravan_metal_green {};
	
	class Land_misc_caravan_wood_brown : Land_misc_caravan_metal_green {};
	
	class Land_misc_caravan_wood_green : Land_misc_caravan_metal_green {};
};

class cfgSpawnContainers {
	class default {
		objects[] = {};
	};
	
	class spawnitemcan : default {
		objects[] = {"FoodCanned", "Food_Rice", "Drink_SodaZlutaKlasik", "Drink_SodaZlutaKolaloka", "Drink_SodaZlutaMalinovka"};
	};
	
	class spawnWeapon : default {
		objects[] = {"Rifle", "MeleeItemBase"};
	};
	
	class spawnItemSmall : default {
		objects[] = {"RifleMagazine", "Consumable_Battery9V", "AmmunitionItemBase", "Ammo_556", "Ammo_762", "BottleBase", "Medical_DisinfectantSpray", "Medical_Bandage", "Medical_Painkiller", "Medical_Morphine", "Medical_Epinephrine", "MiscItem_Matchbox", "Food_PowderedMilk", "Medical_SalineBag", "Medical_StartKit", "Medical_TransfusionKit", "Medical_BandageDressing", "Medical_Antibiotics", "Medical_BloodBag_IV", "Medical_BloodBag_Empty", "Medical_BloodTest_Kit", "Medical_InjectionVial", "Medical_Syringe", "Medical_SyringeClear", "Medical_SyringeBlood", "Consumable_Paper", "Consumable_DuctTape", "AttachmentBase", "Consumable_Battery9V", "MapBase", "CookerBase", "CookerwareBase", "GasCanisterBase", "AttachmentBase", "ToolBase", "ContainerBase", "Consumable_Firewood", "Consumable_Stone", "Compass", "EyewearBase", "EmptySodaBase", "TrashItem_TinCan"};
	};
	
	class spawnItemSmall2 : spawnItemSmall {
		objects[] = {"RifleMagazine", "Consumable_Battery9V", "AmmunitionItemBase", "Ammo_556", "Ammo_762", "BottleBase", "Medical_DisinfectantSpray", "Medical_Bandage", "Medical_Painkiller", "Medical_Morphine", "Medical_Epinephrine", "MiscItem_Matchbox", "Food_PowderedMilk", "Medical_SalineBag", "Medical_StartKit", "Medical_TransfusionKit", "Medical_BandageDressing", "Medical_Antibiotics", "Medical_BloodBag_IV", "Medical_BloodBag_Empty", "Medical_BloodTest_Kit", "Medical_InjectionVial", "Medical_Syringe", "Medical_SyringeClear", "Medical_SyringeBlood", "Consumable_Paper", "Consumable_DuctTape", "AttachmentBase", "Consumable_Battery9V", "MapBase", "CookerBase", "CookerwareBase", "GasCanisterBase", "AttachmentBase", "ToolBase", "ContainerBase", "Consumable_Firewood", "Consumable_Stone", "Compass", "EyewearBase", "EmptySodaBase", "TrashItem_TinCan"};
	};
	
	class spawnItemMedium : default {
		objects[] = {"HeadgearBase", "GasMaskBase", "TopwearBase", "VestBase", "BottomwearBase", "FootwearBase", "ContainerBase", "CookerBase", "CookerwareBase", "GasCanisterBase", "AttachmentBase", "ToolBase", "ContainerBase", "Consumable_Firewood", "Consumable_Stone", "Compass"};
	};
	
	class spawnItemLarge : default {
		objects[] = {"BagBase", "HeadgearBase", "GasMaskBase", "TopwearBase", "VestBase", "BottomwearBase", "FootwearBase", "VestBase", "ContainerBase"};
	};
	
	class spawnItemExtraLarge : default {
		objects[] = {"MeleeItemBase"};
	};
	
	class spawnItemClothing : default {
		objects[] = {"HeadgearBase", "GasMaskBase", "TopwearBase", "VestBase", "BottomwearBase"};
	};
	
	class spawnBoxFood : default {
		objects[] = {"BoxCerealBase", "BottleBase", "Medical_DisinfectantSpray", "FoodCanned", "Food_Rice"};
	};
	
	class spawnItemBook : default {
		objects[] = {"ItemBook", "ItemMap"};
	};
};

class CfgServerSpawn {
	items[] = {{"Map_ChernarusSW", 8, 16}, {"Map_ChernarusNW", 8, 16}, {"Map_ChernarusSE", 8, 16}, {"Map_ChernarusNE", 8, 16}, {"Map_ChernarusW", 4, 8}, {"Map_ChernarusE", 4, 8}, {"Map_ChernarusS", 4, 8}, {"Map_ChernarusN", 4, 8}, {M4A1, 2, 4}, {SKS, 4, 8}, {FNX45, 5, 15}, {1911, 3, 6}, {"1911_engraved", 1, 2}, {"mkii", 4, 4}, {CZ75, 5, 10}, {"magnum", 2, 4}, {"ShotgunIzh43", 10, 20}, {"b95", 8, 16}, {"Ruger1022", 6, 12}, {"Mosin9130", 6, 12}, {"Crossbow", 6, 12}, {AK101, 1, 5}, {AKM, 1, 5}, {"cz527", 10, 20}, {MP5K, 5, 10}, {"PM73Rak", 5, 10}, {"1911_Engraved", 1, 3}, {"LongHorn", 10, 20}, {"P1", 10, 20}, {"ij70", 1, 20}, {"Optics_Binoculars", 20, 50}, {"M_CZ75_15Rnd", 3, 6}, {"M_1911_7Rnd", 3, 6}, {"M_22_mkii_10Rnd", 4, 4}, {"M_12ga_Pellets_Snaploader", 5, 10}, {"M_STANAG_30Rnd_Coupled", 1, 3}, {"M_STANAG_30Rnd", 2, 4}, {"M_CMAG_10Rnd", 4, 6}, {"M_CMAG_10Rnd_Green", 4, 6}, {"M_CMAG_20Rnd", 3, 5}, {"M_CMAG_20Rnd_Green", 3, 5}, {"M_CMAG_30Rnd", 2, 4}, {"M_CMAG_30Rnd_Green", 2, 4}, {"M_CMAG_40Rnd", 1, 2}, {"M_CMAG_40Rnd_Green", 1, 2}, {"M_22_Ruger_10Rnd", 5, 10}, {"M_22_Ruger_30Rnd", 3, 6}, {"M_FNX45_15Rnd", 4, 12}, {"Container_AmmoBox300Rnd", 8, 16}, {"CLIP_762x39_10Rnd", 5, 10}, {"Ammo_45FMJ", 10, 20}, {"Ammo_762", 10, 20}, {"Ammo_357", 10, 20}, {"Ammo_380", 10, 20}, {"Ammo_12ga_Pellets", 10, 20}, {"Ammo_22", 10, 20}, {"Ammo_9mm", 10, 20}, {"Ammo_762x39", 10, 20}, {"Ammo_556", 10, 20}, {"Arrows_Bolts", 10, 20}, {"Arrows_Composite", 10, 20}, {"Grenade", 10, 20}, {"FlashGrenade", 10, 20}, {"Ammo_45acp_25rnd", 5, 10}, {"Ammo_357_20Rnd", 5, 10}, {"Ammo_380_35rnd", 5, 10}, {"Ammo_00buck_10rnd", 10, 20}, {"Ammo_762_20Rnd", 5, 10}, {"Ammo_22_50Rnd", 5, 10}, {"Ammo_9mm_25rnd", 5, 10}, {"Ammo_762x39_20Rnd", 5, 10}, {"Ammo_556_20Rnd", 5, 10}, {"M_12ga_Pellets_Snaploader", 5, 10}, {"CLIP_762_Snaploader", 5, 10}, {"M_357_Speedloader", 1, 2}, {"Att_Light_Universal", 4, 4}, {"Att_Light_TLR", 4, 4}, {"Att_Bipod_Atlas", 4, 4}, {"Att_Compensator_Mosin", 4, 4}, {"ChestHolster", 4, 4}, {"Att_Bayonet_Mosin", 4, 4}, {"Att_Bayonet_SKS", 4, 4}, {"Att_Bayonet_M9A1", 4, 4}, {"CombatKnife", 4, 8}, {"Att_Buttstock_M4OE", 4, 4}, {"Att_Buttstock_M4MP", 4, 4}, {"Att_Buttstock_M4MP_Green", 4, 4}, {"Att_Buttstock_M4CQB", 4, 4}, {"Att_Buttstock_AK_Wood", 4, 4}, {"Att_Buttstock_AK_Folding_Black", 4, 4}, {"Att_Handguard_AK_Rail_Black", 4, 4}, {"Att_Handguard_M4Plastic", 4, 4}, {"Att_Handguard_M4RIS", 4, 4}, {"Att_Handguard_M4MP", 4, 4}, {"Att_Handguard_M4MP_Green", 4, 4}, {"Att_Optic_PUScope", 1, 3}, {"Att_Optic_M4CarryHandle", 4, 4}, {"Att_Optic_BUIS", 1, 3}, {"Att_Optic_ACOG", 1, 3}, {"Att_Optic_M68", 1, 3}, {"Att_Optic_M4T3NRDS", 1, 3}, {"Att_Optic_FNP45_MRD", 1, 3}, {"Att_Optic_Longrange", 1, 2}, {"Att_Optic_PSO1", 1, 2}, {"Att_Optic_Redpoint", 3, 10}, {"BaseballCap_Blue", 5, 10}, {"BaseballCap_Beige", 5, 10}, {"BaseballCap_Black", 5, 10}, {"BaseballCap_Olive", 5, 10}, {"BaseballCap_Pink", 5, 10}, {"BaseballCap_Red", 5, 10}, {"BaseballCap_Camo", 5, 10}, {"BaseballCap_CMMG_Black", 5, 10}, {"BaseballCap_CMMG_Pink", 5, 10}, {"MotoHelmet_Black", 2, 5}, {"MotoHelmetDark_Black", 2, 5}, {"MotoHelmet_Grey", 2, 5}, {"MotoHelmetDark_Grey", 2, 5}, {"MotoHelmet_Blue", 2, 5}, {"MotoHelmetDark_Blue", 2, 5}, {"MotoHelmet_Green", 2, 5}, {"MotoHelmetDark_Green", 2, 5}, {"MotoHelmet_Green2", 2, 5}, {"MotoHelmetDark_Green2", 2, 5}, {"MotoHelmet_Red", 2, 5}, {"MotoHelmetDark_Red", 2, 5}, {"MotoHelmet_White", 2, 5}, {"MotoHelmetDark_White", 2, 5}, {"MotoHelmet_Lime", 2, 5}, {"MotoHelmetDark_Lime", 2, 5}, {"BeanieHatBeige", 5, 10}, {"BeanieHatBlack", 5, 10}, {"BeanieHatBlue", 5, 10}, {"BeanieHatBrown", 5, 10}, {"BeanieHatGreen", 5, 10}, {"BeanieHatGrey", 5, 10}, {"BeanieHatPink", 5, 10}, {"BeanieHatRed", 5, 10}, {"Ushanka_Black", 5, 10}, {"Ushanka_Blue", 5, 10}, {"Ushanka_Green", 5, 10}, {"BallisticHelmet_Green", 1, 2}, {"BallisticHelmet_Black", 2, 4}, {"BallisticHelmet_UN", 2, 5}, {"PilotHelmet_ZSh3", 1, 3}, {"Bandana_Black", 5, 10}, {"Bandana_Blue", 5, 10}, {"Bandana_Green", 5, 10}, {"Bandana_Red", 5, 10}, {"Bandana_Yellow", 5, 10}, {"Bandana_redpattern", 1, 5}, {"Bandana_blackpattern", 1, 5}, {"Bandana_polkapattern", 1, 5}, {"Bandana_greenpattern", 1, 5}, {"Bandana_camopattern", 1, 5}, {"RadarCap_Black", 5, 10}, {"RadarCap_Blue", 5, 10}, {"RadarCap_Brown", 5, 10}, {"RadarCap_Green", 5, 10}, {"RadarCap_Red", 5, 10}, {"ZmijovkaCap_Black", 5, 10}, {"ZmijovkaCap_Blue", 5, 10}, {"ZmijovkaCap_Brown", 5, 10}, {"ZmijovkaCap_Green", 5, 10}, {"ZmijovkaCap_Red", 5, 10}, {"ConstructionHelmet_Blue", 5, 10}, {"ConstructionHelmet_Green2", 5, 10}, {"ConstructionHelmet_Orange", 5, 10}, {"ConstructionHelmet_Red", 5, 10}, {"ConstructionHelmet_White", 5, 10}, {"ConstructionHelmet_Yellow", 5, 10}, {"ConstructionHelmet_Lime", 5, 10}, {"BoonieHat_black", 5, 10}, {"BoonieHat_Blue", 5, 10}, {"BoonieHat_DPM", 5, 10}, {"BoonieHat_flecktran", 5, 10}, {"BoonieHat_dubok", 5, 10}, {"BoonieHat_olive", 5, 10}, {"BoonieHat_orange", 5, 10}, {"BoonieHat_red", 5, 10}, {"BoonieHat_Tan", 5, 10}, {"BoonieHat_NavyBlue", 1, 5}, {"MilitaryBeret", 5, 10}, {"MilitaryBeretUN", 5, 10}, {"MilitaryBeretNZ", 5, 10}, {"MilitaryBeretChDKZ", 5, 10}, {"MilitaryBeretCDF", 5, 10}, {"FlatCap_Black", 5, 10}, {"FlatCap_Blue", 5, 10}, {"FlatCap_Red", 5, 10}, {"FlatCap_Grey", 5, 10}, {"FlatCap_Brown", 5, 10}, {"FlatCap_Check_Brown", 5, 10}, {"FlatCap_Check_Grey", 5, 10}, {"FlatCap_Check_Black", 5, 10}, {"CowboyHat_Brown", 1, 5}, {"CowboyHat_black", 1, 5}, {"CowboyHat_darkBrown", 1, 5}, {"CowboyHat_green", 1, 5}, {"PoliceCap", 1, 5}, {"PilotkaCap", 1, 5}, {"TankerHelmet", 1, 5}, {"GasMask", 1, 3}, {"DallasMask", 1, 2}, {"HoxtonMask", 1, 2}, {"WolfMask", 1, 2}, {"NioshFaceMask", 1, 2}, {"BalaclavaMask_Beige", 5, 10}, {"BalaclavaMask_Blue", 5, 10}, {"BalaclavaMask_Pink", 5, 10}, {"BalaclavaMask_White", 5, 2}, {"BalaclavaMask_Black", 3, 8}, {"BalaclavaMask_Green", 3, 8}, {"BalaclavaMask_Blackskull", 1, 2}, {"RocketAviators", 3, 6}, {"Glasses_Designer", 5, 15}, {"Glasses_ThickFrames", 5, 15}, {"Glasses_ThinFrames", 5, 15}, {"TShirtBeige", 5, 10}, {"TShirtBlack", 5, 10}, {"TShirtBlue", 5, 10}, {"TShirtGreen", 5, 10}, {"TShirtOrangeWhiteStripes", 5, 10}, {"TShirtRed", 5, 10}, {"TShirtRedBlackStripes", 5, 10}, {"TShirtWhite", 5, 10}, {"TShirtGrey", 5, 10}, {"Shirt_CheckBlue", 2, 5}, {"Shirt_CheckBlueBright", 2, 5}, {"Shirt_CheckGreen", 2, 5}, {"Shirt_CheckRed", 2, 5}, {"Shirt_CheckWhite", 2, 5}, {"Shirt_PlaneBlack", 2, 5}, {"TacticalShirtGrey", 1, 4}, {"TacticalShirtBlack", 1, 4}, {"TacticalShirtOlive", 1, 4}, {"TacticalShirtTan", 1, 4}, {"Raincoat_Orange", 2, 5}, {"Raincoat_Yellow", 2, 5}, {"Raincoat_Green", 2, 5}, {"Hoodie_Blue", 2, 5}, {"Hoodie_Black", 2, 5}, {"Hoodie_Brown", 2, 5}, {"Hoodie_Green", 2, 5}, {"Hoodie_Grey", 2, 5}, {"Hoodie_Red", 2, 5}, {"WoolCoat_Black", 2, 10}, {"WoolCoat_Red", 2, 10}, {"WoolCoat_Blue", 2, 10}, {"WoolCoat_Green", 2, 10}, {"WoolCoat_Beige", 2, 10}, {"WoolCoat_Check_Red", 2, 10}, {"WoolCoat_Check_Black", 2, 10}, {"WoolCoat_Check_Grey", 2, 10}, {"WoolCoat_Check_Brown", 2, 10}, {"WoolCoat_Check_Blue", 2, 10}, {"BubbleGoose_Blue", 2, 5}, {"BubbleGoose_Green", 2, 5}, {"BubbleGoose_Orange", 2, 5}, {"BubbleGoose_Red", 2, 5}, {"Gorka_up_summer", 2, 5}, {"Gorka_up_flat", 2, 5}, {"Gorka_up_autumn", 2, 5}, {"Gorka_up_PautRev", 2, 5}, {"TrackSuit_Jacket_Black", 2, 5}, {"TrackSuit_Jacket_Blue", 2, 5}, {"TrackSuit_Jacket_Green", 2, 5}, {"TrackSuit_Jacket_LightBlue", 2, 5}, {"TrackSuit_Jacket_Red", 2, 5}, {"PoliceJacket", 2, 5}, {"PoliceJacket_orel", 2, 5}, {"ParamedicJacketBlue", 2, 5}, {"ParamedicJacketCrimson", 2, 5}, {"PoliceVest", 4, 8}, {"PressVest_Blue", 2, 5}, {"PressVest_LightBlue", 2, 5}, {"UKAssVest_Black", 1, 2}, {"UKAssVest_Camo", 1, 2}, {"UKAssVest_Khaki", 1, 2}, {"UKAssVest_Olive", 1, 2}, {"HighCapacityVest_Black", 1, 2}, {"HighCapacityVest_Olive", 1, 2}, {"SmershVest", 1, 2}, {"TTsKO_Jacket_Camo", 1, 3}, {"RidersJacket_Black", 1, 3}, {"Firefighter_Jacket_Black", 1, 3}, {"Firefighter_Jacket_Beige", 1, 3}, {"Jeans_Black", 5, 10}, {"Jeans_BlueDark", 5, 10}, {"Jeans_Blue", 5, 10}, {"Jeans_Brown", 5, 10}, {"Jeans_Grey", 5, 10}, {"Jeans_Green", 5, 10}, {"TrackSuit_Pants_Black", 5, 10}, {"TrackSuit_Pants_Blue", 5, 10}, {"TrackSuit_Pants_Green", 5, 10}, {"TrackSuit_Pants_LightBlue", 5, 10}, {"TrackSuit_Pants_Red", 5, 10}, {"Gorka_pants_summer", 5, 10}, {"Gorka_pants_autumn", 5, 10}, {"Gorka_pants_flat", 5, 10}, {"Gorka_pants_PautRev", 5, 10}, {"Police_pants", 5, 10}, {"Police_pants_orel", 5, 10}, {"ParamedicPantsBlue", 5, 10}, {"ParamedicPantsCrimson", 5, 10}, {"CanvasPants_Beige", 2, 5}, {"CanvasPants_Blue", 3, 7}, {"CanvasPants_Grey", 2, 5}, {"CanvasPants_Midi_Beige", 2, 5}, {"CanvasPants_Midi_blue", 5, 10}, {"CanvasPants_Midi_grey", 2, 5}, {"CanvasPants_Midi_red", 5, 10}, {"CanvasPants_Midi_violet", 5, 10}, {"CanvasPants_Red", 5, 10}, {"CanvasPants_Violet", 5, 10}, {"CargoPants_Beige", 1, 3}, {"CargoPants_Blue", 1, 5}, {"CargoPants_Black", 1, 5}, {"CargoPants_Green", 1, 3}, {"CargoPants_Grey", 1, 3}, {"ttsko_pants_Beige", 1, 1}, {"HunterPants_Autumn", 1, 3}, {"HunterPants_Brown", 1, 4}, {"HunterPants_Spring", 1, 4}, {"HunterPants_Summer", 1, 4}, {"HunterPants_Winter", 1, 5}, {"WorkingGloves_Beige", 1, 5}, {"WorkingGloves_Black", 1, 5}, {"WorkingGloves_Brown", 1, 5}, {"WorkingGloves_Yellow", 1, 5}, {"JungleBoots_Beige", 1, 3}, {"JungleBoots_Black", 1, 3}, {"JungleBoots_Brown", 1, 3}, {"JungleBoots_Green", 1, 3}, {"JungleBoots_Olive", 1, 3}, {"MilitaryBoots_Beige", 1, 3}, {"MilitaryBoots_Black", 1, 3}, {"MilitaryBoots_Bluerock", 1, 3}, {"MilitaryBoots_Brown", 1, 3}, {"MilitaryBoots_Redpunk", 1, 3}, {"CombatBoots_Beige", 1, 3}, {"CombatBoots_Black", 1, 3}, {"CombatBoots_Brown", 1, 3}, {"CombatBoots_Green", 1, 3}, {"CombatBoots_Grey", 1, 3}, {"Wellies_Black", 5, 10}, {"Wellies_Brown", 5, 10}, {"Wellies_Green", 5, 10}, {"Wellies_Grey", 5, 10}, {"HikingBoots_Black", 5, 10}, {"HikingBoots_Brown", 5, 10}, {"HikingBoots_Low_Beige", 5, 10}, {"HikingBoots_Low_Black", 5, 10}, {"HikingBoots_Low_Blue", 5, 10}, {"HikingBoots_Low_Grey", 5, 10}, {"AthleticShoes_Black", 5, 10}, {"AthleticShoes_Blue", 5, 10}, {"AthleticShoes_Brown", 5, 10}, {"AthleticShoes_Green", 5, 10}, {"AthleticShoes_Grey", 5, 10}, {"WorkingBoots_Brown", 5, 10}, {"WorkingBoots_Green", 5, 10}, {"WorkingBoots_Grey", 5, 10}, {"WorkingBoots_Yellow", 5, 10}, {"LeatherShoes_Beige", 5, 10}, {"LeatherShoes_Black", 5, 10}, {"LeatherShoes_Brown", 5, 10}, {"LeatherShoes_Sunburst", 5, 10}, {"LeatherShoes_White", 5, 10}, {"JoggingShoes_Black", 5, 10}, {"JoggingShoes_Blue", 5, 10}, {"JoggingShoes_Red", 5, 10}, {"JoggingShoes_Violet", 5, 10}, {"JoggingShoes_White", 5, 10}, {"BagChilds_Blue", 4, 8}, {"BagChilds_Red", 4, 8}, {"BagChilds_Green", 4, 8}, {"BagTaloon_Blue", 2, 4}, {"BagTaloon_Green", 2, 4}, {"BagTaloon_Violet", 2, 4}, {"BagTaloon_Orange", 2, 4}, {"BagHunting", 1, 5}, {"BagMountain_Blue", 1, 2}, {"BagMountain_Green", 1, 2}, {"BagMountain_Red", 1, 2}, {"BagMountain_Orange", 1, 2}, {"SmershBackpack", 1, 2}, {"FarmingHoe", 10, 15}, {"Pitchfork", 10, 15}, {"BaseballBat", 2, 10}, {"WoodAxe", 5, 10}, {"FirefighterAxe", 5, 15}, {"PipeWrench", 10, 15}, {"Tool_Hacksaw", 5, 15}, {"Machete", 5, 10}, {"Pickaxe", 5, 10}, {"Compass", 5, 15}, {"Tool_Sickle", 10, 20}, {"Tool_CanOpener", 10, 20}, {"Tool_Hammer", 10, 20}, {"Tool_Pliers", 10, 20}, {"Tool_FireExtinguisher", 20, 40}, {"Tool_Screwdriver", 20, 40}, {"Tool_Shovel", 10, 30}, {"Tool_Wrench", 10, 30}, {"Tool_Crowbar", 10, 30}, {"Tool_Handcuffs", 10, 30}, {"Tool_HandcuffKeys", 5, 10}, {"Spraycan_Black", 5, 10}, {"Spraycan_Green", 5, 10}, {"Tool_SewingKit", 10, 40}, {"Tool_WeaponCleaningKit", 5, 20}, {"Light_PortableLamp", 10, 20}, {"Cooker_PortableStove", 10, 20}, {"Tool_KitchenKnife", 10, 30}, {"ItemTransmitter", 5, 10}, {"Headtorch_Grey", 5, 20}, {"Headtorch_Black", 5, 20}, {"TelescopicBaton", 1, 5}, {"StunBaton", 5, 10}, {"CattleProd", 5, 20}, {"Container_FirstAidKit", 10, 20}, {"Medical_DisinfectantSpray", 10, 20}, {"Medical_Epinephrine", 10, 20}, {"Medical_Morphine", 10, 20}, {"Medical_PainkillerTablets", 10, 20}, {"Medical_SalineBag", 10, 20}, {"Medical_StartKit", 10, 20}, {"Medical_TransfusionKit", 10, 20}, {"Medical_VitaminBottle", 10, 20}, {"Medical_PurificationTablets", 10, 20}, {"Medical_BandageDressing", 10, 20}, {"Medical_Bandage", 10, 20}, {"Medical_Defibrillator", 10, 20}, {"Medical_TetracyclineAntibiotics", 10, 20}, {"Medical_Syringe", 10, 20}, {"Medical_BloodBag_Empty", 10, 20}, {"Medical_BloodTest_Kit", 10, 20}, {"Medical_InjectionVial", 10, 20}, {"Medical_CharcoalTablets", 10, 20}, {"Medical_VitaminBottle", 10, 20}, {"Medical_DisinfectantAlcohol", 10, 20}, {"Consumable_Battery9V", 30, 60}, {"Consumable_Matchbox", 30, 60}, {"Consumable_GasCanisterLarge", 30, 60}, {"Consumable_GasCanisterMedium", 30, 60}, {"Consumable_GasCanisterSmall", 30, 60}, {"Consumable_DuctTape", 30, 60}, {"Consumable_Paper", 30, 60}, {"Consumable_Stone", 30, 60}, {"Consumable_Firewood", 30, 60}, {"Consumable_Roadflare", 30, 60}, {"Consumable_Chemlight_White", 30, 60}, {"Consumable_Chemlight_Red", 30, 60}, {"Consumable_Chemlight_Green", 30, 60}, {"Consumable_Chemlight_Blue", 30, 60}, {"Consumable_Chemlight_Yellow", 30, 60}, {"Consumable_Hook", 30, 60}, {"Crafting_Rope", 10, 40}, {"Container_Protector_Small", 10, 20}, {"Crafting_BurlapSack", 10, 20}, {"Drink_SodaCanPipsi", 20, 80}, {"Drink_SodaCanCola", 20, 80}, {"Drink_SodaCanSpite", 20, 80}, {"Drink_SodaCanKvass", 20, 80}, {"Drink_Canteen", 5, 20}, {"Drink_WaterBottle", 10, 40}, {"Food_CanBakedBeans", 300, 700}, {"Food_CanSardines", 200, 500}, {"Food_CanSpaghetti", 300, 600}, {"Food_CanPeaches", 200, 400}, {"Food_CanTuna", 400, 800}, {"Food_CanTacticalBacon", 50, 200}, {"Food_BoxCerealCrunchin", 100, 500}, {"Food_PowderedMilk", 100, 500}, {"Food_Rice", 100, 400}, {"Fruit_Potato", 300, 600}, {"Fruit_GreenBellPepper", 300, 500}, {"Fruit_Apple", 300, 500}, {"Fruit_Tomato", 200, 400}, {"Fruit_Orange", 100, 300}, {"Fruit_Banana", 100, 300}, {"Fruit_Kiwi", 50, 200}, {"Fruit_Zucchini", 50, 200}, {"Cookware_Pot", 5, 20}, {"Cookware_FryingPan", 5, 20}, {"Pen_Black", 10, 20}, {"Pen_Red", 10, 20}, {"Pen_Green", 10, 20}, {"Pen_Blue", 10, 20}, {"TentMedium_Packed", 5, 10}, {"ItemBookTheWarOfTheWorlds", 2, 5}, {"ItemBookAroundTheWorldIn80Days", 2, 5}, {"ItemBookCrimeAndPunishment", 2, 5}, {"ItemBookHamlet", 2, 5}, {"ItemBookTheMetamorphosis", 2, 5}, {"ItemBookTheRaven", 2, 5}, {"ItemBookTheArtOfWar", 2, 5}, {"ItemBookRobinsonCrusoe", 2, 5}, {"ItemBookRussian", 2, 5}, {"ItemBookRussianCheatSheet", 2, 5}, {"ItemBookThePictureOfDorianGray", 2, 5}, {"ItemBookThePitAndThePendulum", 2, 5}, {"ItemBookTheCountryOfTheBlind", 2, 5}, {"ItemBookBilaNemoc", 2, 5}, {"ItemBookBible", 2, 5}, {"ItemBookYouth", 2, 5}, {"ItemBookTovarnaNaAbsolutno", 2, 5}, {"ItemBookTheJungleBook", 2, 5}, {"ItemBookTheBrothersKaramazov", 2, 5}, {"ItemBookTheCallOfCthulhu", 2, 5}, {"ItemBookTheShunnedHouse", 2, 5}, {"ItemBookTheHoundOfTheBaskervilles", 2, 5}, {"ItemBookAndersen", 2, 5}, {"ItemBookTonyAndTheBeetles", 2, 5}, {"ItemBookTheCosmicComputer", 2, 5}, {"ItemBookATravelerInTime", 2, 5}, {"ItemBookTheVariableMan", 2, 5}, {"ItemBookTheCallOfCthulhu", 2, 5}, {"ItemBookTheShunnedHouse", 2, 5}, {"ItemBookTheOutlet", 2, 5}, {"ItemBookTheBarrier", 2, 5}, {"ItemBookTheDesertOfWheat", 2, 5}, {"ItemBookFlyingURanch", 2, 5}, {"ItemBookHopalongCassidysRustlerRoundUp", 2, 5}, {"ItemBookLonesomeLand", 2, 5}, {"ItemBookTrailin", 2, 5}, {"ItemBookRonickyDoone", 2, 5}, {"ItemBookBettyZane", 2, 5}, {"ItemBookATexasMatchmaker", 2, 5}, {"ItemBookTheThunderBird", 2, 5}, {"ItemBookBlackJack", 2, 5}, {"ItemBookTheLastTrail", 2, 5}, {"ItemBookSelectedStories", 2, 5}, {"ItemBookTheHeritageOfTheSioux", 2, 5}, {"ItemBookTheOutlet", 2, 5}, {"ItemBookDesertGold", 2, 5}, {"ItemBookTheBarrier", 2, 5}, {"ItemBookTheHiddenChildren", 2, 5}, {"ItemBookTheLastOfThePlainsmen", 2, 5}, {"ItemBookGunmansReckoning", 2, 5}, {"ItemBookSkyrider", 2, 5}, {"ItemBookSpinifexAndSand", 2, 5}, {"ItemBookSunsetPass", 2, 5}, {"ItemBookTheCaveOfGold", 2, 5}, {"ItemBookTheDayOfTheBeast", 2, 5}, {"ItemBookTheQuirt", 2, 5}, {"ItemBookAVoyageToArcturus", 2, 5}, {"ItemBookAnInquiryIntoTheNatureAndCausesOfTheWealthOfNations", 2, 5}, {"ItemBookAndersensFairyTales", 2, 5}, {"ItemBookAroundTheWorldIn80Days", 2, 5}, {"ItemBookBlackBeauty", 2, 5}, {"ItemBookTheBibleKingJamesVersionBook18Job", 2, 5}, {"ItemBookBuddenbrooks", 2, 5}, {"ItemBookCrimeAndPunishment", 2, 5}, {"ItemBookDeadSouls", 2, 5}, {"ItemBookErewhon", 2, 5}, {"ItemBookFatherGoriot", 2, 5}, {"ItemBookGreatExpectations", 2, 5}, {"ItemBookGulliversTravels", 2, 5}, {"ItemBookHeartOfDarkness", 2, 5}, {"ItemBookHerland", 2, 5}, {"ItemBookIvanhoe", 2, 5}, {"ItemBookKidnapped", 2, 5}, {"ItemBookLaChartreuseDeParme", 2, 5}, {"ItemBookLordJim", 2, 5}, {"ItemBookMadameBovary", 2, 5}, {"ItemBookNostromoATaleOfTheSeaboard", 2, 5}, {"ItemBookOnTheOriginOfSpeciesByMeansOfNaturalSelection", 2, 5}, {"ItemBookTheMetamorphosesOfOvid", 2, 5}, {"ItemBookMobyDick", 2, 5}, {"ItemBookHamlet", 2, 5}, {"ItemBookKingLear", 2, 5}, {"ItemBookLaDbcle", 2, 5}, {"ItemBookTheWhichWeeFinde", 2, 5}, {"ItemBookTheCanterburyTalesAndOtherPoems", 2, 5}, {"ItemBookAVindicationOfTheRightsOfWoman", 2, 5}, {"ItemBookAJourneyToTheInteriorOfTheEarth", 2, 5}, {"ItemBookNjalsSaga", 2, 5}, {"ItemBookTheTrial", 2, 5}, {"ItemBookDonQuixote", 2, 5}, {"ItemBookPhilosophiaeNaturalisPrincipiaMathematica", 2, 5}, {"ItemBookPrideAndPrejudice", 2, 5}, {"ItemBookRasselas", 2, 5}, {"ItemBookScaramouche", 2, 5}, {"ItemBookShe", 2, 5}, {"ItemBookSonsAndLovers", 2, 5}, {"ItemBookTheCallOfTheWild", 2, 5}, {"ItemBookTheComingRace", 2, 5}, {"ItemBookTheFurtherAdventuresOfRobinsonCrusoe", 2, 5}, {"ItemBookTheIslandOfDoctorMoreau", 2, 5}, {"ItemBookTheMahabharataOfKrishnaDwaipayanaVyasaBk4", 2, 5}, {"ItemBookTheManWhoWasThursday", 2, 5}, {"ItemBookThePossessed", 2, 5}, {"ItemBookThePrisonerOfZenda", 2, 5}, {"ItemBookAPrincessOfMars", 2, 5}, {"ItemBookKingSolomonsMines", 2, 5}, {"ItemBookMiddlemarch", 2, 5}, {"ItemBookTheHouseOfTheSevenGables", 2, 5}, {"ItemBookTheMonkARomance", 2, 5}, {"ItemBookThePrivateMemoirsAndConfessionsOfAJustifiedSinner", 2, 5}, {"ItemBookTheRedBadgeOfCourage", 2, 5}, {"ItemBookADollsHouse", 2, 5}, {"ItemBookAfterLondon", 2, 5}, {"ItemBookAnOldBabylonianVersionOfTheGilgameshEpic", 2, 5}, {"ItemBookAnnaKarenina", 2, 5}, {"ItemBookCandide", 2, 5}, {"ItemBookFaust", 2, 5}, {"ItemBookHinduLiterature", 2, 5}, {"ItemBookHunger", 2, 5}, {"ItemBookJapaneseLiterature", 2, 5}, {"ItemBookLeRougeEtLeNoir", 2, 5}, {"ItemBookTheBrothersKaramazov", 2, 5}, {"ItemBookTheDecameronOfGiovanniBoccaccio", 2, 5}, {"ItemBookThePoemsOfGiacomoLeopardi", 2, 5}, {"ItemBookAlicesAdventuresInWonderland", 2, 5}, {"ItemBookTheScarletPimpernel", 2, 5}, {"ItemBookTheThreeMusketeers", 2, 5}, {"ItemBookTheTurnOfTheScrew", 2, 5}, {"ItemBookTranslationsOfShakuntalaAndOtherWorks", 2, 5}, {"ItemBookTreasureIsland", 2, 5}, {"ItemBookUlysses", 2, 5}, {"ItemBookUncleSilas", 2, 5}, {"ItemBookTheAeneid", 2, 5}, {"ItemBookWarAndPeace", 2, 5}, {"ItemBookWielandOrTheTransformation", 2, 5}, {"ItemBookWutheringHeights", 2, 5}, {"ItemBookThreeMenInABoat", 2, 5}, {"ItemBookCinqSemainesEnBallon", 2, 5}, {"ItemBookDracula", 2, 5}, {"ItemBookLesTroisMousquetaires", 2, 5}, {"ItemBookDeLorigineDesEspces", 2, 5}, {"ItemBookDasNibelungenlied", 2, 5}, {"ItemBookTheLastMan", 2, 5}, {"ItemBookFaustDerTragdieErsterTeil", 2, 5}, {"ItemBookLenfer1Of2", 2, 5}, {"ItemBookVoyageAuCentreDeLaTerre", 2, 5}, {"ItemBookRomeoUndJulia", 2, 5}, {"ItemBookFrankenstein", 2, 5}, {"ItemBookDeLaTerreLaLune", 2, 5}, {"ItemBookLingnieuxChevalierDonQuichotteDeLaManche", 2, 5}, {"ItemBookLleMystrieuse", 2, 5}, {"ItemBookLaComdieHumaineVolumeIScnesDeLaViePriveTomeI", 2, 5}, {"ItemBookLesCorneilles", 2, 5}, {"ItemBook20000LieuesSousLesMersParts1amp2", 2, 5}};
};

class cfgSolutions {
	bloodTypes[] = {"BloodOPos", "BloodONeg", "BloodAPos", "BloodANeg", "BloodBPos", "BloodBNeg", "BloodABPos", "BloodABNeg"};
	
	class Default {
		displayName = "Liquid";
		script = "";
	};
	
	class BloodBase : Default {
		displayName = "Human Blood";
		script = "_this call event_bloodReaction;";
		compatible[] = {};
	};
	
	class BloodOPos : BloodBase {
		displayName = "O+";
		compatible[] = {"BloodOPos", "BloodONeg"};
		probabilityScale = 0.374;
	};
	
	class BloodONeg : BloodBase {
		displayName = "O-";
		compatible[] = {"BloodONeg"};
		probabilityScale = 0.374 + 0.066;
	};
	
	class BloodAPos : BloodBase {
		displayName = "A+";
		compatible[] = {"BloodAPos", "BloodANeg", "BloodOPos", "BloodONeg"};
		probabilityScale = 0.374 + 0.066 + 0.357;
	};
	
	class BloodANeg : BloodBase {
		displayName = "A-";
		compatible[] = {"BloodANeg", "BloodONeg"};
		probabilityScale = 0.374 + 0.066 + 0.357 + 0.063;
	};
	
	class BloodBPos : BloodBase {
		displayName = "B+";
		compatible[] = {"BloodBPos", "BloodBNeg", "BloodOPos", "BloodONeg"};
		probabilityScale = 0.374 + 0.066 + 0.357 + 0.063 + 0.085;
	};
	
	class BloodBNeg : BloodBase {
		displayName = "B-";
		compatible[] = {"BloodBNeg", "BloodONeg"};
		probabilityScale = 0.374 + 0.066 + 0.357 + 0.063 + 0.085 + 0.015;
	};
	
	class BloodABPos : BloodBase {
		displayName = "AB+";
		compatible[] = {"BloodABPos", "BloodONeg", "BloodOPos", "BloodANeg", "BloodAPos", "BloodBNeg", "BloodBPos", "BloodABNeg"};
		probabilityScale = 0.374 + 0.066 + 0.357 + 0.063 + 0.085 + 0.015 + 0.034;
	};
	
	class BloodABNeg : BloodBase {
		displayName = "AB-";
		compatible[] = {"BloodABNeg", "BloodONeg", "BloodANeg", "BloodBNeg"};
		probabilityScale = 0.374 + 0.066 + 0.357 + 0.063 + 0.085 + 0.015 + 0.034 + 0.06;
	};
};

class CfgObjectActions {
	class PondBase {
		model = "";
	};
	
	class FuelStation {
		model = "DZ\structures\House\A_FuelStation\A_FuelStation_Feed.p3d";
		
		class UseStand {
			displayName = "Use The Stand";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			condition = "((_owner getVariable ['isUsingSomething',0] == 0) && _canUseActions ) && _inHands isKindOf 'BottleBase';";
			statement = "_owner setVariable ['isUsingSomething',1]; [this, _inHands, _owner, 'gasoline'] call player_liquidSource;";
		};
	};
	
	class WellBlue {
		model = "dz\buildings\misc\pumpa.p3d";
		
		class UsePump {
			displayName = "Use The Pump";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			condition = "ProfileStart 'sqf_objAction_UsePumpBlue_condition'; _con = (((_owner getVariable ['isUsingSomething',0] == 0) && _canUseActions)); ProfileStop 'sqf_objAction_UsePumpBlue_condition'; _con;";
			statement = "_owner setVariable ['isUsingSomething',1]; [this, _inHands, _owner,'water'] call player_liquidSource;";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 1;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1 && isNull _inHands";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['WellBlue:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
	
	class WellYellow : WellBlue {
		model = "dz\structures\Misc\Misc_WellPump\Misc_WellPump.p3d";
		
		class UsePump {
			displayName = "Use The Pump";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			condition = "ProfileStart 'sqf_objAction_UsePumpYellow_condition'; _con = ((_owner getVariable ['isUsingSomething',0] == 0) && _canUseActions ); ProfileStop 'sqf_objAction_UsePumpYellow_condition'; _con;";
			statement = "_owner setVariable ['isUsingSomething',1]; 				[this, _inHands, _owner, 'water'] call player_liquidSource;";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 1;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1 && isNull _inHands";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['WellYellow:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
	
	class ChopTreeFraxinus1 {
		model = "dz\plants2\tree\t_fraxinus2W.p3d";
		
		class Chopwood {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'AxeBase')";
			statement = "if(damage _inHands < 1) then 			{ 				_inHands setDamage ((damage _inHands)+0.025); 				(this setDamage ((damage this) + 0.34)); 				if ((damage this) == 1) then 				{ 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWood:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeAxeSlash', 					{ 						for [{_x=0},{_x<2},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWood:::Lock::: %1', _this getSlotLock 'Hands']; 					}]; 				} 				else 				{ 					_owner playAction 'GestureMeleeAxeSlash'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class ChopwoodChain {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1) then 			{ 				_inHands setDamage ((damage _inHands)+0.0025); 				(this setDamage ((damage this) + 0.5)); 				if ((damage this) == 1) then 				{ 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWoodChain:::Lock::: %1', _owner getSlotLock 'Hands']; 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						for [{_x=0},{_x<2},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWoodChain:::Lock::: %1', _this getSlotLock 'Hands']; 					}]; 				} 				else 				{ 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction 'GestureMeleeChainsawNormal'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class SearchForBranch {
			displayName = "Cut branch off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Crafting_LongWoodenStick',0] call player_pickBerry;";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['ChopCancel:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
	
	class ChopTreeFraxinus2 : ChopTreeFraxinus1 {
		model = "dz\plants2\tree\t_fraxinus2s.p3d";
		
		class Chopwood : Chopwood {};
		
		class ChopwoodChain : ChopwoodChain {};
		
		class SearchForBranch : SearchForBranch {};
		
		class CancelAction : CancelAction {};
	};
	
	class ChopTreet_t_quercus3s {
		model = "dz\plants2\tree\t_quercus2f.p3d";
		
		class Chopwood {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_canUseActions && damage this < 1 && (_inHands isKindOf 'AxeBase')";
			statement = "if(damage _inHands < 1) then 			{ 				_inHands setDamage ((damage _inHands)+0.025); 				(this setDamage ((damage this) + 0.34)); 				if ((damage this) == 1) then 				{ 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWood:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeAxeSlash', 					{ 						for [{_x=0},{_x<3},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWood:::Lock::: %1', _this getSlotLock 'Hands']; 					}]; 				} 				else 				{ 					_owner playAction 'GestureMeleeAxeSlash'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class ChopwoodChain {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1) then 			{ 				_inHands setDamage ((damage _inHands)+0.0025); 				(this setDamage ((damage this) + 0.5)); 				if ((damage this) == 1) then 				{ 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWood:::Lock::: %1', _owner getSlotLock 'Hands']; 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						for [{_x=0},{_x<3},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWoodChain:::Lock::: %1', _this getSlotLock 'Hands']; 					}]; 				} 				else 				{ 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction 'GestureMeleeChainsawNormal'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class SearchForBranch {
			displayName = "Cut branch off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Crafting_LongWoodenStick',0] call player_pickBerry;";
		};
		
		class SearchForBark {
			displayName = "Cut bark off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1  && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Consumable_Bark_Oak',0] call player_pickBerry;";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['ChopTreet_t_quercus3s:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
	
	class ChopTreet_quercus2f : ChopTreet_t_quercus3s {
		model = "dz\plants2\tree\t_quercus2f.p3d";
		
		class Chopwood : Chopwood {};
		
		class ChopwoodChain : ChopwoodChain {};
		
		class SearchForBark : SearchForBark {};
		
		class CancelAction : CancelAction {};
	};
	
	class ChopTreet_betula1f : ChopTreet_t_quercus3s {
		model = "dz\plants2\tree\t_betula1f.p3d";
		
		class Chopwood : Chopwood {};
		
		class ChopwoodChain : ChopwoodChain {};
		
		class CancelAction : CancelAction {};
		
		class SearchForBark : SearchForBark {
			displayName = "Cut bark off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Consumable_Bark_Birch',0] call player_pickBerry;";
		};
	};
	
	class ChopTreet_t_betula2f : ChopTreet_betula1f {
		model = "dz\plants2\tree\t_betula2f.p3d";
		
		class Chopwood : Chopwood {};
		
		class ChopwoodChain : ChopwoodChain {};
		
		class SearchForBark : SearchForBark {};
		
		class CancelAction : CancelAction {};
	};
	
	class ChopTreet_t_betula2s : ChopTreet_betula1f {
		model = "dz\plants2\tree\t_betula2s.p3d";
		
		class Chopwood : Chopwood {};
		
		class ChopwoodChain : ChopwoodChain {};
		
		class SearchForBark : SearchForBark {};
		
		class CancelAction : CancelAction {};
	};
	
	class ChopTreet_t_betula2w : ChopTreet_betula1f {
		model = "dz\plants2\tree\t_betula2w.p3d";
		
		class Chopwood : Chopwood {};
		
		class ChopwoodChain : ChopwoodChain {};
		
		class SearchForBark : SearchForBark {};
		
		class CancelAction : CancelAction {};
	};
	
	class ChopTreet_acer2s {
		model = "dz\plants2\tree\t_acer2s.p3d";
		
		class Chopwood {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'AxeBase'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.015); 				(this setDamage ((damage this) + (1/(parseNumber(""2"")*2)))); 				if((damage this) == 1)then 				{ 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWood:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeAxeSlash', 					{ 						for [{_x=0},{_x<parseNumber(""2"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWood:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					_owner playAction 'GestureMeleeAxeSlash'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class SearchForBranch {
			displayName = "Cut branch off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Crafting_LongWoodenStick',0] call player_pickBerry;";
		};
		
		class SearchForBark {
			displayName = "Cut bark off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Consumable_Bark_Oak',0] call player_pickBerry;";
		};
		
		class ChopwoodChain {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 			{ 				_owner setVariable ['isUsingSomething',1]; 				_inHands setDamage ((damage _inHands)+0.005); 				(this setDamage 1); 				if((damage this) == 1)then 				{ 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWoodChain:::Lock::: %1', _owner getSlotLock 'Hands']; 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						for [{_x=0},{_x<parseNumber(""2"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWoodChain:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction 'GestureMeleeChainsawNormal'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class AddResin {
			displayName = "Add resin";
			priority = 0.2;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'Crafting_Torch' && !(isOn _inHands) && _inHands getVariable ['internalenergy',150] < 145";
			statement = "if(damage _inHands < 1)then 			{ 				_owner playAction 'ItemUseShort'; 				_inHands setVariable ['internalenergy',150]; 			}; 			";
		};
	};
	
	class ChopTreet_alnus2s {
		model = "dz\plants2\tree\t_alnus2s.p3d";
		
		class Chopwood {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'AxeBase'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.015); 				(this setDamage ((damage this) + (1/(parseNumber(""3"")*2)))); 				if((damage this) == 1)then 				{ 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWood:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeAxeSlash', 					{ 						for [{_x=0},{_x<parseNumber(""3"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWood:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					_owner playAction 'GestureMeleeAxeSlash'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class SearchForBranch {
			displayName = "Cut branch off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Crafting_LongWoodenStick',0] call player_pickBerry;";
		};
		
		class SearchForBark {
			displayName = "Cut bark off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Consumable_Bark_Oak',0] call player_pickBerry;";
		};
		
		class ChopwoodChain {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 			{ 				_owner setVariable ['isUsingSomething',1]; 				_inHands setDamage ((damage _inHands)+0.005); 				(this setDamage 1); 				if((damage this) == 1)then 				{ 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWoodChain:::Lock::: %1', _owner getSlotLock 'Hands']; 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						for [{_x=0},{_x<parseNumber(""3"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWoodChain:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction 'GestureMeleeChainsawNormal'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class AddResin {
			displayName = "Add resin";
			priority = 0.2;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'Crafting_Torch' && !(isOn _inHands) && _inHands getVariable ['internalenergy',150] < 145";
			statement = "if(damage _inHands < 1)then 			{ 				_owner playAction 'ItemUseShort'; 				_inHands setVariable ['internalenergy',150]; 			}; 			";
		};
	};
	
	class ChopTreet_carpinus2s {
		model = "dz\plants2\tree\t_carpinus2s.p3d";
		
		class Chopwood {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'AxeBase'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.015); 				(this setDamage ((damage this) + (1/(parseNumber(""2"")*2)))); 				if((damage this) == 1)then 				{ 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWood:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeAxeSlash', 					{ 						for [{_x=0},{_x<parseNumber(""2"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWood:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					_owner playAction 'GestureMeleeAxeSlash'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class SearchForBranch {
			displayName = "Cut branch off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Crafting_LongWoodenStick',0] call player_pickBerry;";
		};
		
		class SearchForBark {
			displayName = "Cut bark off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Consumable_Bark_Oak',0] call player_pickBerry;";
		};
		
		class ChopwoodChain {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 			{ 				_owner setVariable ['isUsingSomething',1]; 				_inHands setDamage ((damage _inHands)+0.005); 				(this setDamage 1); 				if((damage this) == 1)then 				{ 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWoodChain:::Lock::: %1', _owner getSlotLock 'Hands']; 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						for [{_x=0},{_x<parseNumber(""2"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWoodChain:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction 'GestureMeleeChainsawNormal'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class AddResin {
			displayName = "Add resin";
			priority = 0.2;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'Crafting_Torch' && !(isOn _inHands) && _inHands getVariable ['internalenergy',150] < 145";
			statement = "if(damage _inHands < 1)then 			{ 				_owner playAction 'ItemUseShort'; 				_inHands setVariable ['internalenergy',150]; 			}; 			";
		};
	};
	
	class ChopTreet_fagus2f {
		model = "dz\plants2\tree\t_fagus2f.p3d";
		
		class Chopwood {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'AxeBase'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.015); 				(this setDamage ((damage this) + (1/(parseNumber(""3"")*2)))); 				if((damage this) == 1)then 				{ 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWood:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeAxeSlash', 					{ 						for [{_x=0},{_x<parseNumber(""3"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWood:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					_owner playAction 'GestureMeleeAxeSlash'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class SearchForBranch {
			displayName = "Cut branch off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Crafting_LongWoodenStick',0] call player_pickBerry;";
		};
		
		class SearchForBark {
			displayName = "Cut bark off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Consumable_Bark_Oak',0] call player_pickBerry;";
		};
		
		class ChopwoodChain {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 			{ 				_owner setVariable ['isUsingSomething',1]; 				_inHands setDamage ((damage _inHands)+0.005); 				(this setDamage 1); 				if((damage this) == 1)then 				{ 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWoodChain:::Lock::: %1', _owner getSlotLock 'Hands']; 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						for [{_x=0},{_x<parseNumber(""3"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWoodChain:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction 'GestureMeleeChainsawNormal'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class AddResin {
			displayName = "Add resin";
			priority = 0.2;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'Crafting_Torch' && !(isOn _inHands) && _inHands getVariable ['internalenergy',150] < 145";
			statement = "if(damage _inHands < 1)then 			{ 				_owner playAction 'ItemUseShort'; 				_inHands setVariable ['internalenergy',150]; 			}; 			";
		};
	};
	
	class ChopTreet_fagus2s {
		model = "dz\plants2\tree\t_fagus2s.p3d";
		
		class Chopwood {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'AxeBase'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.015); 				(this setDamage ((damage this) + (1/(parseNumber(""3"")*2)))); 				if((damage this) == 1)then 				{ 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWood:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeAxeSlash', 					{ 						for [{_x=0},{_x<parseNumber(""3"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWood:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					_owner playAction 'GestureMeleeAxeSlash'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class SearchForBranch {
			displayName = "Cut branch off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Crafting_LongWoodenStick',0] call player_pickBerry;";
		};
		
		class SearchForBark {
			displayName = "Cut bark off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Consumable_Bark_Oak',0] call player_pickBerry;";
		};
		
		class ChopwoodChain {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 			{ 				_owner setVariable ['isUsingSomething',1]; 				_inHands setDamage ((damage _inHands)+0.005); 				(this setDamage 1); 				if((damage this) == 1)then 				{ 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWoodChain:::Lock::: %1', _owner getSlotLock 'Hands']; 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						for [{_x=0},{_x<parseNumber(""3"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWoodChain:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction 'GestureMeleeChainsawNormal'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class AddResin {
			displayName = "Add resin";
			priority = 0.2;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'Crafting_Torch' && !(isOn _inHands) && _inHands getVariable ['internalenergy',150] < 145";
			statement = "if(damage _inHands < 1)then 			{ 				_owner playAction 'ItemUseShort'; 				_inHands setVariable ['internalenergy',150]; 			}; 			";
		};
	};
	
	class ChopTreet_fagus2W {
		model = "dz\plants2\tree\t_fagus2W.p3d";
		
		class Chopwood {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'AxeBase'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.015); 				(this setDamage ((damage this) + (1/(parseNumber(""3"")*2)))); 				if((damage this) == 1)then 				{ 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWood:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeAxeSlash', 					{ 						for [{_x=0},{_x<parseNumber(""3"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWood:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					_owner playAction 'GestureMeleeAxeSlash'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class SearchForBranch {
			displayName = "Cut branch off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Crafting_LongWoodenStick',0] call player_pickBerry;";
		};
		
		class SearchForBark {
			displayName = "Cut bark off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Consumable_Bark_Oak',0] call player_pickBerry;";
		};
		
		class ChopwoodChain {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 			{ 				_owner setVariable ['isUsingSomething',1]; 				_inHands setDamage ((damage _inHands)+0.005); 				(this setDamage 1); 				if((damage this) == 1)then 				{ 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWoodChain:::Lock::: %1', _owner getSlotLock 'Hands']; 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						for [{_x=0},{_x<parseNumber(""3"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWoodChain:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction 'GestureMeleeChainsawNormal'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class AddResin {
			displayName = "Add resin";
			priority = 0.2;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'Crafting_Torch' && !(isOn _inHands) && _inHands getVariable ['internalenergy',150] < 145";
			statement = "if(damage _inHands < 1)then 			{ 				_owner playAction 'ItemUseShort'; 				_inHands setVariable ['internalenergy',150]; 			}; 			";
		};
	};
	
	class ChopTreet_larix3s {
		model = "dz\plants2\tree\t_larix3s.p3d";
		
		class Chopwood {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'AxeBase'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.015); 				(this setDamage ((damage this) + (1/(parseNumber(""5"")*2)))); 				if((damage this) == 1)then 				{ 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWood:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeAxeSlash', 					{ 						for [{_x=0},{_x<parseNumber(""5"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWood:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					_owner playAction 'GestureMeleeAxeSlash'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class SearchForBranch {
			displayName = "Cut branch off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Crafting_LongWoodenStick',0] call player_pickBerry;";
		};
		
		class SearchForBark {
			displayName = "Cut bark off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Consumable_Bark_Oak',0] call player_pickBerry;";
		};
		
		class ChopwoodChain {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 			{ 				_owner setVariable ['isUsingSomething',1]; 				_inHands setDamage ((damage _inHands)+0.005); 				(this setDamage 1); 				if((damage this) == 1)then 				{ 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWoodChain:::Lock::: %1', _owner getSlotLock 'Hands']; 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						for [{_x=0},{_x<parseNumber(""5"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWoodChain:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction 'GestureMeleeChainsawNormal'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class AddResin {
			displayName = "Add resin";
			priority = 0.2;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'Crafting_Torch' && !(isOn _inHands) && _inHands getVariable ['internalenergy',150] < 145";
			statement = "if(damage _inHands < 1)then 			{ 				_owner playAction 'ItemUseShort'; 				_inHands setVariable ['internalenergy',150]; 			}; 			";
		};
	};
	
	class ChopTreet_malus1s {
		model = "dz\plants2\tree\t_malus1s.p3d";
		
		class Chopwood {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'AxeBase'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.015); 				(this setDamage ((damage this) + (1/(parseNumber(""2"")*2)))); 				if((damage this) == 1)then 				{ 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWood:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeAxeSlash', 					{ 						for [{_x=0},{_x<parseNumber(""2"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWood:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					_owner playAction 'GestureMeleeAxeSlash'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class SearchForBranch {
			displayName = "Cut branch off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Crafting_LongWoodenStick',0] call player_pickBerry;";
		};
		
		class SearchForBark {
			displayName = "Cut bark off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Consumable_Bark_Oak',0] call player_pickBerry;";
		};
		
		class ChopwoodChain {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 			{ 				_owner setVariable ['isUsingSomething',1]; 				_inHands setDamage ((damage _inHands)+0.005); 				(this setDamage 1); 				if((damage this) == 1)then 				{ 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWoodChain:::Lock::: %1', _owner getSlotLock 'Hands']; 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						for [{_x=0},{_x<parseNumber(""2"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWoodChain:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction 'GestureMeleeChainsawNormal'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class AddResin {
			displayName = "Add resin";
			priority = 0.2;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'Crafting_Torch' && !(isOn _inHands) && _inHands getVariable ['internalenergy',150] < 145";
			statement = "if(damage _inHands < 1)then 			{ 				_owner playAction 'ItemUseShort'; 				_inHands setVariable ['internalenergy',150]; 			}; 			";
		};
	};
	
	class ChopTreet_naked_tree_big {
		model = "dz\plants2\tree\t_naked_tree_big.p3d";
		
		class Chopwood {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'AxeBase'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.015); 				(this setDamage ((damage this) + (1/(parseNumber(""4"")*2)))); 				if((damage this) == 1)then 				{ 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWood:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeAxeSlash', 					{ 						for [{_x=0},{_x<parseNumber(""4"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWood:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					_owner playAction 'GestureMeleeAxeSlash'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class SearchForBranch {
			displayName = "Cut branch off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Crafting_LongWoodenStick',0] call player_pickBerry;";
		};
		
		class SearchForBark {
			displayName = "Cut bark off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Consumable_Bark_Oak',0] call player_pickBerry;";
		};
		
		class ChopwoodChain {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 			{ 				_owner setVariable ['isUsingSomething',1]; 				_inHands setDamage ((damage _inHands)+0.005); 				(this setDamage 1); 				if((damage this) == 1)then 				{ 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWoodChain:::Lock::: %1', _owner getSlotLock 'Hands']; 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						for [{_x=0},{_x<parseNumber(""4"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWoodChain:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction 'GestureMeleeChainsawNormal'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class AddResin {
			displayName = "Add resin";
			priority = 0.2;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'Crafting_Torch' && !(isOn _inHands) && _inHands getVariable ['internalenergy',150] < 145";
			statement = "if(damage _inHands < 1)then 			{ 				_owner playAction 'ItemUseShort'; 				_inHands setVariable ['internalenergy',150]; 			}; 			";
		};
	};
	
	class ChopTreet_naked_tree_single {
		model = "dz\plants2\tree\t_naked_tree_single.p3d";
		
		class Chopwood {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'AxeBase'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.015); 				(this setDamage ((damage this) + (1/(parseNumber(""3"")*2)))); 				if((damage this) == 1)then 				{ 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWood:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeAxeSlash', 					{ 						for [{_x=0},{_x<parseNumber(""3"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWood:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					_owner playAction 'GestureMeleeAxeSlash'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class SearchForBranch {
			displayName = "Cut branch off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Crafting_LongWoodenStick',0] call player_pickBerry;";
		};
		
		class SearchForBark {
			displayName = "Cut bark off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Consumable_Bark_Oak',0] call player_pickBerry;";
		};
		
		class ChopwoodChain {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 			{ 				_owner setVariable ['isUsingSomething',1]; 				_inHands setDamage ((damage _inHands)+0.005); 				(this setDamage 1); 				if((damage this) == 1)then 				{ 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWoodChain:::Lock::: %1', _owner getSlotLock 'Hands']; 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						for [{_x=0},{_x<parseNumber(""3"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWoodChain:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction 'GestureMeleeChainsawNormal'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class AddResin {
			displayName = "Add resin";
			priority = 0.2;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'Crafting_Torch' && !(isOn _inHands) && _inHands getVariable ['internalenergy',150] < 145";
			statement = "if(damage _inHands < 1)then 			{ 				_owner playAction 'ItemUseShort'; 				_inHands setVariable ['internalenergy',150]; 			}; 			";
		};
	};
	
	class ChopTreet_picea1s {
		model = "dz\plants2\tree\t_picea1s.p3d";
		
		class Chopwood {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'AxeBase'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.015); 				(this setDamage ((damage this) + (1/(parseNumber(""3"")*2)))); 				if((damage this) == 1)then 				{ 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWood:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeAxeSlash', 					{ 						for [{_x=0},{_x<parseNumber(""3"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWood:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					_owner playAction 'GestureMeleeAxeSlash'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class SearchForBranch {
			displayName = "Cut branch off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Crafting_LongWoodenStick',0] call player_pickBerry;";
		};
		
		class SearchForBark {
			displayName = "Cut bark off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Consumable_Bark_Oak',0] call player_pickBerry;";
		};
		
		class ChopwoodChain {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 			{ 				_owner setVariable ['isUsingSomething',1]; 				_inHands setDamage ((damage _inHands)+0.005); 				(this setDamage 1); 				if((damage this) == 1)then 				{ 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWoodChain:::Lock::: %1', _owner getSlotLock 'Hands']; 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						for [{_x=0},{_x<parseNumber(""3"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWoodChain:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction 'GestureMeleeChainsawNormal'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class AddResin {
			displayName = "Add resin";
			priority = 0.2;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'Crafting_Torch' && !(isOn _inHands) && _inHands getVariable ['internalenergy',150] < 145";
			statement = "if(damage _inHands < 1)then 			{ 				_owner playAction 'ItemUseShort'; 				_inHands setVariable ['internalenergy',150]; 			}; 			";
		};
	};
	
	class ChopTreet_picea2s {
		model = "dz\plants2\tree\t_picea2s.p3d";
		
		class Chopwood {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'AxeBase'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.015); 				(this setDamage ((damage this) + (1/(parseNumber(""3"")*2)))); 				if((damage this) == 1)then 				{ 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWood:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeAxeSlash', 					{ 						for [{_x=0},{_x<parseNumber(""3"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWood:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					_owner playAction 'GestureMeleeAxeSlash'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class SearchForBranch {
			displayName = "Cut branch off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Crafting_LongWoodenStick',0] call player_pickBerry;";
		};
		
		class SearchForBark {
			displayName = "Cut bark off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Consumable_Bark_Oak',0] call player_pickBerry;";
		};
		
		class ChopwoodChain {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 			{ 				_owner setVariable ['isUsingSomething',1]; 				_inHands setDamage ((damage _inHands)+0.005); 				(this setDamage 1); 				if((damage this) == 1)then 				{ 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWoodChain:::Lock::: %1', _owner getSlotLock 'Hands']; 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						for [{_x=0},{_x<parseNumber(""3"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWoodChain:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction 'GestureMeleeChainsawNormal'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class AddResin {
			displayName = "Add resin";
			priority = 0.2;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'Crafting_Torch' && !(isOn _inHands) && _inHands getVariable ['internalenergy',150] < 145";
			statement = "if(damage _inHands < 1)then 			{ 				_owner playAction 'ItemUseShort'; 				_inHands setVariable ['internalenergy',150]; 			}; 			";
		};
	};
	
	class ChopTreet_picea3f {
		model = "dz\plants2\tree\t_picea3f.p3d";
		
		class Chopwood {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'AxeBase'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.015); 				(this setDamage ((damage this) + (1/(parseNumber(""3"")*2)))); 				if((damage this) == 1)then 				{ 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWood:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeAxeSlash', 					{ 						for [{_x=0},{_x<parseNumber(""3"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWood:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					_owner playAction 'GestureMeleeAxeSlash'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class SearchForBranch {
			displayName = "Cut branch off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Crafting_LongWoodenStick',0] call player_pickBerry;";
		};
		
		class SearchForBark {
			displayName = "Cut bark off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Consumable_Bark_Oak',0] call player_pickBerry;";
		};
		
		class ChopwoodChain {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 			{ 				_owner setVariable ['isUsingSomething',1]; 				_inHands setDamage ((damage _inHands)+0.005); 				(this setDamage 1); 				if((damage this) == 1)then 				{ 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWoodChain:::Lock::: %1', _owner getSlotLock 'Hands']; 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						for [{_x=0},{_x<parseNumber(""3"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWoodChain:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction 'GestureMeleeChainsawNormal'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class AddResin {
			displayName = "Add resin";
			priority = 0.2;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'Crafting_Torch' && !(isOn _inHands) && _inHands getVariable ['internalenergy',150] < 145";
			statement = "if(damage _inHands < 1)then 			{ 				_owner playAction 'ItemUseShort'; 				_inHands setVariable ['internalenergy',150]; 			}; 			";
		};
	};
	
	class ChopTreet_pinusN1s {
		model = "dz\plants2\tree\t_pinusN1s.p3d";
		
		class Chopwood {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'AxeBase'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.015); 				(this setDamage ((damage this) + (1/(parseNumber(""4"")*2)))); 				if((damage this) == 1)then 				{ 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWood:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeAxeSlash', 					{ 						for [{_x=0},{_x<parseNumber(""4"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWood:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					_owner playAction 'GestureMeleeAxeSlash'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class SearchForBranch {
			displayName = "Cut branch off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Crafting_LongWoodenStick',0] call player_pickBerry;";
		};
		
		class SearchForBark {
			displayName = "Cut bark off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Consumable_Bark_Oak',0] call player_pickBerry;";
		};
		
		class ChopwoodChain {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 			{ 				_owner setVariable ['isUsingSomething',1]; 				_inHands setDamage ((damage _inHands)+0.005); 				(this setDamage 1); 				if((damage this) == 1)then 				{ 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWoodChain:::Lock::: %1', _owner getSlotLock 'Hands']; 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						for [{_x=0},{_x<parseNumber(""4"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWoodChain:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction 'GestureMeleeChainsawNormal'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class AddResin {
			displayName = "Add resin";
			priority = 0.2;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'Crafting_Torch' && !(isOn _inHands) && _inHands getVariable ['internalenergy',150] < 145";
			statement = "if(damage _inHands < 1)then 			{ 				_owner playAction 'ItemUseShort'; 				_inHands setVariable ['internalenergy',150]; 			}; 			";
		};
	};
	
	class ChopTreet_pinusN2s {
		model = "dz\plants2\tree\t_pinusN2s.p3d";
		
		class Chopwood {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'AxeBase'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.015); 				(this setDamage ((damage this) + (1/(parseNumber(""4"")*2)))); 				if((damage this) == 1)then 				{ 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWood:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeAxeSlash', 					{ 						for [{_x=0},{_x<parseNumber(""4"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWood:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					_owner playAction 'GestureMeleeAxeSlash'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class SearchForBranch {
			displayName = "Cut branch off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Crafting_LongWoodenStick',0] call player_pickBerry;";
		};
		
		class SearchForBark {
			displayName = "Cut bark off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Consumable_Bark_Oak',0] call player_pickBerry;";
		};
		
		class ChopwoodChain {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 			{ 				_owner setVariable ['isUsingSomething',1]; 				_inHands setDamage ((damage _inHands)+0.005); 				(this setDamage 1); 				if((damage this) == 1)then 				{ 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWoodChain:::Lock::: %1', _owner getSlotLock 'Hands']; 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						for [{_x=0},{_x<parseNumber(""4"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWoodChain:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction 'GestureMeleeChainsawNormal'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class AddResin {
			displayName = "Add resin";
			priority = 0.2;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'Crafting_Torch' && !(isOn _inHands) && _inHands getVariable ['internalenergy',150] < 145";
			statement = "if(damage _inHands < 1)then 			{ 				_owner playAction 'ItemUseShort'; 				_inHands setVariable ['internalenergy',150]; 			}; 			";
		};
	};
	
	class ChopTreet_pinusS2f {
		model = "dz\plants2\tree\t_pinusS2f.p3d";
		
		class Chopwood {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'AxeBase'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.015); 				(this setDamage ((damage this) + (1/(parseNumber(""2"")*2)))); 				if((damage this) == 1)then 				{ 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWood:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeAxeSlash', 					{ 						for [{_x=0},{_x<parseNumber(""2"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWood:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					_owner playAction 'GestureMeleeAxeSlash'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class SearchForBranch {
			displayName = "Cut branch off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Crafting_LongWoodenStick',0] call player_pickBerry;";
		};
		
		class SearchForBark {
			displayName = "Cut bark off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Consumable_Bark_Oak',0] call player_pickBerry;";
		};
		
		class ChopwoodChain {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 			{ 				_owner setVariable ['isUsingSomething',1]; 				_inHands setDamage ((damage _inHands)+0.005); 				(this setDamage 1); 				if((damage this) == 1)then 				{ 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWoodChain:::Lock::: %1', _owner getSlotLock 'Hands']; 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						for [{_x=0},{_x<parseNumber(""2"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWoodChain:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction 'GestureMeleeChainsawNormal'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class AddResin {
			displayName = "Add resin";
			priority = 0.2;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'Crafting_Torch' && !(isOn _inHands) && _inHands getVariable ['internalenergy',150] < 145";
			statement = "if(damage _inHands < 1)then 			{ 				_owner playAction 'ItemUseShort'; 				_inHands setVariable ['internalenergy',150]; 			}; 			";
		};
	};
	
	class ChopTreet_populus3s {
		model = "dz\plants2\tree\t_populus3s.p3d";
		
		class Chopwood {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'AxeBase'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.015); 				(this setDamage ((damage this) + (1/(parseNumber(""3"")*2)))); 				if((damage this) == 1)then 				{ 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWood:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeAxeSlash', 					{ 						for [{_x=0},{_x<parseNumber(""3"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWood:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					_owner playAction 'GestureMeleeAxeSlash'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class SearchForBranch {
			displayName = "Cut branch off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Crafting_LongWoodenStick',0] call player_pickBerry;";
		};
		
		class SearchForBark {
			displayName = "Cut bark off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Consumable_Bark_Oak',0] call player_pickBerry;";
		};
		
		class ChopwoodChain {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 			{ 				_owner setVariable ['isUsingSomething',1]; 				_inHands setDamage ((damage _inHands)+0.005); 				(this setDamage 1); 				if((damage this) == 1)then 				{ 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWoodChain:::Lock::: %1', _owner getSlotLock 'Hands']; 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						for [{_x=0},{_x<parseNumber(""3"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWoodChain:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction 'GestureMeleeChainsawNormal'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class AddResin {
			displayName = "Add resin";
			priority = 0.2;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'Crafting_Torch' && !(isOn _inHands) && _inHands getVariable ['internalenergy',150] < 145";
			statement = "if(damage _inHands < 1)then 			{ 				_owner playAction 'ItemUseShort'; 				_inHands setVariable ['internalenergy',150]; 			}; 			";
		};
	};
	
	class ChopTreet_populus3s_A3 {
		model = "dz\plants2\tree\t_populus3s_A3.p3d";
		
		class Chopwood {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'AxeBase'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.015); 				(this setDamage ((damage this) + (1/(parseNumber(""3"")*2)))); 				if((damage this) == 1)then 				{ 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWood:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeAxeSlash', 					{ 						for [{_x=0},{_x<parseNumber(""3"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWood:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					_owner playAction 'GestureMeleeAxeSlash'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class SearchForBranch {
			displayName = "Cut branch off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Crafting_LongWoodenStick',0] call player_pickBerry;";
		};
		
		class SearchForBark {
			displayName = "Cut bark off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Consumable_Bark_Oak',0] call player_pickBerry;";
		};
		
		class ChopwoodChain {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 			{ 				_owner setVariable ['isUsingSomething',1]; 				_inHands setDamage ((damage _inHands)+0.005); 				(this setDamage 1); 				if((damage this) == 1)then 				{ 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWoodChain:::Lock::: %1', _owner getSlotLock 'Hands']; 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						for [{_x=0},{_x<parseNumber(""3"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWoodChain:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction 'GestureMeleeChainsawNormal'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class AddResin {
			displayName = "Add resin";
			priority = 0.2;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'Crafting_Torch' && !(isOn _inHands) && _inHands getVariable ['internalenergy',150] < 145";
			statement = "if(damage _inHands < 1)then 			{ 				_owner playAction 'ItemUseShort'; 				_inHands setVariable ['internalenergy',150]; 			}; 			";
		};
	};
	
	class ChopTreet_pyrus2s {
		model = "dz\plants2\tree\t_pyrus2s.p3d";
		
		class Chopwood {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'AxeBase'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.015); 				(this setDamage ((damage this) + (1/(parseNumber(""3"")*2)))); 				if((damage this) == 1)then 				{ 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWood:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeAxeSlash', 					{ 						for [{_x=0},{_x<parseNumber(""3"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWood:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					_owner playAction 'GestureMeleeAxeSlash'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class SearchForBranch {
			displayName = "Cut branch off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Crafting_LongWoodenStick',0] call player_pickBerry;";
		};
		
		class SearchForBark {
			displayName = "Cut bark off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Consumable_Bark_Oak',0] call player_pickBerry;";
		};
		
		class ChopwoodChain {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 			{ 				_owner setVariable ['isUsingSomething',1]; 				_inHands setDamage ((damage _inHands)+0.005); 				(this setDamage 1); 				if((damage this) == 1)then 				{ 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWoodChain:::Lock::: %1', _owner getSlotLock 'Hands']; 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						for [{_x=0},{_x<parseNumber(""3"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWoodChain:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction 'GestureMeleeChainsawNormal'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class AddResin {
			displayName = "Add resin";
			priority = 0.2;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'Crafting_Torch' && !(isOn _inHands) && _inHands getVariable ['internalenergy',150] < 145";
			statement = "if(damage _inHands < 1)then 			{ 				_owner playAction 'ItemUseShort'; 				_inHands setVariable ['internalenergy',150]; 			}; 			";
		};
	};
	
	class ChopTreet_salix2s {
		model = "dz\plants2\tree\t_salix2s.p3d";
		
		class Chopwood {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'AxeBase'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.015); 				(this setDamage ((damage this) + (1/(parseNumber(""2"")*2)))); 				if((damage this) == 1)then 				{ 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWood:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeAxeSlash', 					{ 						for [{_x=0},{_x<parseNumber(""2"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWood:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					_owner playAction 'GestureMeleeAxeSlash'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class SearchForBranch {
			displayName = "Cut branch off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Crafting_LongWoodenStick',0] call player_pickBerry;";
		};
		
		class SearchForBark {
			displayName = "Cut bark off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Consumable_Bark_Oak',0] call player_pickBerry;";
		};
		
		class ChopwoodChain {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 			{ 				_owner setVariable ['isUsingSomething',1]; 				_inHands setDamage ((damage _inHands)+0.005); 				(this setDamage 1); 				if((damage this) == 1)then 				{ 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWoodChain:::Lock::: %1', _owner getSlotLock 'Hands']; 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						for [{_x=0},{_x<parseNumber(""2"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWoodChain:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction 'GestureMeleeChainsawNormal'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class AddResin {
			displayName = "Add resin";
			priority = 0.2;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'Crafting_Torch' && !(isOn _inHands) && _inHands getVariable ['internalenergy',150] < 145";
			statement = "if(damage _inHands < 1)then 			{ 				_owner playAction 'ItemUseShort'; 				_inHands setVariable ['internalenergy',150]; 			}; 			";
		};
	};
	
	class ChopTreet_salix2s_swamp {
		model = "dz\plants2\tree\t_salix2s_swamp.p3d";
		
		class Chopwood {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'AxeBase'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.015); 				(this setDamage ((damage this) + (1/(parseNumber(""3"")*2)))); 				if((damage this) == 1)then 				{ 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWood:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeAxeSlash', 					{ 						for [{_x=0},{_x<parseNumber(""3"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWood:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					_owner playAction 'GestureMeleeAxeSlash'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class SearchForBranch {
			displayName = "Cut branch off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Crafting_LongWoodenStick',0] call player_pickBerry;";
		};
		
		class SearchForBark {
			displayName = "Cut bark off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Consumable_Bark_Oak',0] call player_pickBerry;";
		};
		
		class ChopwoodChain {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 			{ 				_owner setVariable ['isUsingSomething',1]; 				_inHands setDamage ((damage _inHands)+0.005); 				(this setDamage 1); 				if((damage this) == 1)then 				{ 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWoodChain:::Lock::: %1', _owner getSlotLock 'Hands']; 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						for [{_x=0},{_x<parseNumber(""3"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWoodChain:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction 'GestureMeleeChainsawNormal'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class AddResin {
			displayName = "Add resin";
			priority = 0.2;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'Crafting_Torch' && !(isOn _inHands) && _inHands getVariable ['internalenergy',150] < 145";
			statement = "if(damage _inHands < 1)then 			{ 				_owner playAction 'ItemUseShort'; 				_inHands setVariable ['internalenergy',150]; 			}; 			";
		};
	};
	
	class ChopTreet_sorbus2s {
		model = "dz\plants2\tree\t_sorbus2s.p3d";
		
		class Chopwood {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'AxeBase'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.015); 				(this setDamage ((damage this) + (1/(parseNumber(""2"")*2)))); 				if((damage this) == 1)then 				{ 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWood:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeAxeSlash', 					{ 						for [{_x=0},{_x<parseNumber(""2"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWood:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					_owner playAction 'GestureMeleeAxeSlash'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class SearchForBranch {
			displayName = "Cut branch off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Crafting_LongWoodenStick',0] call player_pickBerry;";
		};
		
		class SearchForBark {
			displayName = "Cut bark off";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && damage this < 1 && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase' or _inHands isKindOf 'AxeBase')";
			statement = "[0,_owner,'Consumable_Bark_Oak',0] call player_pickBerry;";
		};
		
		class ChopwoodChain {
			displayName = "Chop firewood";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 			{ 				_owner setVariable ['isUsingSomething',1]; 				_inHands setDamage ((damage _inHands)+0.005); 				(this setDamage 1); 				if((damage this) == 1)then 				{ 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopWoodChain:::Lock::: %1', _owner getSlotLock 'Hands']; 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						for [{_x=0},{_x<parseNumber(""2"")},{_x=_x+1}] do 						{ 							_wood = ['Consumable_Firewood',_this] call player_addInventory; 							_wood setQuantity 1; 							_wood2=['Crafting_LongWoodenStick',_this] call player_addInventory; 							_wood2 setQuantity 1; 						}; 						[_this,'I have chopped some firewood.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopWoodChain:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner playAction 'GestureMeleeChainsawNormal'; 				}; 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class AddResin {
			displayName = "Add resin";
			priority = 0.2;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			memoryPoints[] = {"action"};
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && _inHands isKindOf 'Crafting_Torch' && !(isOn _inHands) && _inHands getVariable ['internalenergy',150] < 145";
			statement = "if(damage _inHands < 1)then 			{ 				_owner playAction 'ItemUseShort'; 				_inHands setVariable ['internalenergy',150]; 			}; 			";
		};
	};
	
	class ChopBushb_pmugo {
		model = "dz\plants2\bush\b_pmugo.p3d";
		
		class ChopwoodAxe {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'AxeBase')";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.02); 				(this setDamage ((damage this) + (1/parseNumber(""1"")))); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				_owner playAction ['GestureMeleeAxeSlash', 				{ 					_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 					_wood setQuantity 3; 					[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class ChopwoodChain {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 				{ 					_inHands setDamage ((damage _inHands)+0.002); 					(this setDamage ((damage this) + (2/parseNumber(""1"")))); 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopBush:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 						_wood setQuantity 3; 						[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage;};";
		};
		
		class ChopwoodKnife {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1  && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase')";
			statement = "if(damage _inHands < 1) then 			{ 				_inHands setDamage ((damage _inHands)+0.035); 				(this setDamage ((damage this) + (1/parseNumber(""1"")))); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['ChopBush:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['MeleeKnifeSlash', 				{ 					_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 					_wood setQuantity 3; 					[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The blade is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
	};
	
	class ChopBushb_betulaHumilis {
		model = "dz\plants2\bush\b_betulaHumilis.p3d";
		
		class ChopwoodAxe {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'AxeBase')";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.02); 				(this setDamage ((damage this) + (1/parseNumber(""1"")))); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				_owner playAction ['GestureMeleeAxeSlash', 				{ 					_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 					_wood setQuantity 3; 					[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class ChopwoodChain {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 				{ 					_inHands setDamage ((damage _inHands)+0.002); 					(this setDamage ((damage this) + (2/parseNumber(""1"")))); 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopBush:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 						_wood setQuantity 3; 						[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage;};";
		};
		
		class ChopwoodKnife {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1  && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase')";
			statement = "if(damage _inHands < 1) then 			{ 				_inHands setDamage ((damage _inHands)+0.035); 				(this setDamage ((damage this) + (1/parseNumber(""1"")))); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['ChopBush:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['MeleeKnifeSlash', 				{ 					_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 					_wood setQuantity 3; 					[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The blade is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
	};
	
	class ChopBushb_naked {
		model = "dz\plants2\bush\b_naked.p3d";
		
		class ChopwoodAxe {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'AxeBase')";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.02); 				(this setDamage ((damage this) + (1/parseNumber(""1"")))); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				_owner playAction ['GestureMeleeAxeSlash', 				{ 					_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 					_wood setQuantity 3; 					[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class ChopwoodChain {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 				{ 					_inHands setDamage ((damage _inHands)+0.002); 					(this setDamage ((damage this) + (2/parseNumber(""1"")))); 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopBush:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 						_wood setQuantity 3; 						[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage;};";
		};
		
		class ChopwoodKnife {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1  && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase')";
			statement = "if(damage _inHands < 1) then 			{ 				_inHands setDamage ((damage _inHands)+0.035); 				(this setDamage ((damage this) + (1/parseNumber(""1"")))); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['ChopBush:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['MeleeKnifeSlash', 				{ 					_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 					_wood setQuantity 3; 					[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The blade is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
	};
	
	class ChopBushb_salix2s {
		model = "dz\plants2\bush\b_salix2s.p3d";
		
		class ChopwoodAxe {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'AxeBase')";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.02); 				(this setDamage ((damage this) + (1/parseNumber(""1"")))); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				_owner playAction ['GestureMeleeAxeSlash', 				{ 					_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 					_wood setQuantity 3; 					[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class ChopwoodChain {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 				{ 					_inHands setDamage ((damage _inHands)+0.002); 					(this setDamage ((damage this) + (2/parseNumber(""1"")))); 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopBush:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 						_wood setQuantity 3; 						[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage;};";
		};
		
		class ChopwoodKnife {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1  && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase')";
			statement = "if(damage _inHands < 1) then 			{ 				_inHands setDamage ((damage _inHands)+0.035); 				(this setDamage ((damage this) + (1/parseNumber(""1"")))); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['ChopBush:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['MeleeKnifeSlash', 				{ 					_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 					_wood setQuantity 3; 					[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The blade is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
	};
	
	class ChopBushb_prunus {
		model = "dz\plants2\bush\b_prunus.p3d";
		
		class ChopwoodAxe {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'AxeBase')";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.02); 				(this setDamage ((damage this) + (1/parseNumber(""1"")))); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				_owner playAction ['GestureMeleeAxeSlash', 				{ 					_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 					_wood setQuantity 3; 					[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class ChopwoodChain {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 				{ 					_inHands setDamage ((damage _inHands)+0.002); 					(this setDamage ((damage this) + (2/parseNumber(""1"")))); 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopBush:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 						_wood setQuantity 3; 						[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage;};";
		};
		
		class ChopwoodKnife {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1  && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase')";
			statement = "if(damage _inHands < 1) then 			{ 				_inHands setDamage ((damage _inHands)+0.035); 				(this setDamage ((damage this) + (1/parseNumber(""1"")))); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['ChopBush:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['MeleeKnifeSlash', 				{ 					_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 					_wood setQuantity 3; 					[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The blade is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
	};
	
	class ChopBushb_craet1 {
		model = "dz\plants2\bush\b_craet1.p3d";
		
		class ChopwoodAxe {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'AxeBase')";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.02); 				(this setDamage ((damage this) + (1/parseNumber(""1"")))); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				_owner playAction ['GestureMeleeAxeSlash', 				{ 					_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 					_wood setQuantity 3; 					[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class ChopwoodChain {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 				{ 					_inHands setDamage ((damage _inHands)+0.002); 					(this setDamage ((damage this) + (2/parseNumber(""1"")))); 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopBush:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 						_wood setQuantity 3; 						[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage;};";
		};
		
		class ChopwoodKnife {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1  && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase')";
			statement = "if(damage _inHands < 1) then 			{ 				_inHands setDamage ((damage _inHands)+0.035); 				(this setDamage ((damage this) + (1/parseNumber(""1"")))); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['ChopBush:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['MeleeKnifeSlash', 				{ 					_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 					_wood setQuantity 3; 					[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The blade is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
	};
	
	class ChopBushb_craet2 {
		model = "dz\plants2\bush\b_craet2.p3d";
		
		class ChopwoodAxe {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'AxeBase')";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.02); 				(this setDamage ((damage this) + (1/parseNumber(""1"")))); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				_owner playAction ['GestureMeleeAxeSlash', 				{ 					_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 					_wood setQuantity 3; 					[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class ChopwoodChain {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 				{ 					_inHands setDamage ((damage _inHands)+0.002); 					(this setDamage ((damage this) + (2/parseNumber(""1"")))); 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopBush:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 						_wood setQuantity 3; 						[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage;};";
		};
		
		class ChopwoodKnife {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1  && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase')";
			statement = "if(damage _inHands < 1) then 			{ 				_inHands setDamage ((damage _inHands)+0.035); 				(this setDamage ((damage this) + (1/parseNumber(""1"")))); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['ChopBush:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['MeleeKnifeSlash', 				{ 					_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 					_wood setQuantity 3; 					[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The blade is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
	};
	
	class ChopBushb_corylus2s {
		model = "dz\plants2\bush\b_corylus2s.p3d";
		
		class ChopwoodAxe {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'AxeBase')";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.02); 				(this setDamage ((damage this) + (1/parseNumber(""1"")))); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				_owner playAction ['GestureMeleeAxeSlash', 				{ 					_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 					_wood setQuantity 3; 					[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class ChopwoodChain {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 				{ 					_inHands setDamage ((damage _inHands)+0.002); 					(this setDamage ((damage this) + (2/parseNumber(""1"")))); 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopBush:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 						_wood setQuantity 3; 						[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage;};";
		};
		
		class ChopwoodKnife {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1  && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase')";
			statement = "if(damage _inHands < 1) then 			{ 				_inHands setDamage ((damage _inHands)+0.035); 				(this setDamage ((damage this) + (1/parseNumber(""1"")))); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['ChopBush:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['MeleeKnifeSlash', 				{ 					_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 					_wood setQuantity 3; 					[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The blade is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
	};
	
	class ChopBushb_corylus {
		model = "dz\plants2\bush\b_corylus.p3d";
		
		class ChopwoodAxe {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'AxeBase')";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.02); 				(this setDamage ((damage this) + (1/parseNumber(""1"")))); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				_owner playAction ['GestureMeleeAxeSlash', 				{ 					_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 					_wood setQuantity 3; 					[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class ChopwoodChain {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 				{ 					_inHands setDamage ((damage _inHands)+0.002); 					(this setDamage ((damage this) + (2/parseNumber(""1"")))); 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopBush:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 						_wood setQuantity 3; 						[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage;};";
		};
		
		class ChopwoodKnife {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1  && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase')";
			statement = "if(damage _inHands < 1) then 			{ 				_inHands setDamage ((damage _inHands)+0.035); 				(this setDamage ((damage this) + (1/parseNumber(""1"")))); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['ChopBush:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['MeleeKnifeSlash', 				{ 					_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 					_wood setQuantity 3; 					[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The blade is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
	};
	
	class ChopBushb_sambucus {
		model = "dz\plants2\bush\b_sambucus.p3d";
		
		class ChopwoodAxe {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'AxeBase')";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.02); 				(this setDamage ((damage this) + (1/parseNumber(""1"")))); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				_owner playAction ['GestureMeleeAxeSlash', 				{ 					_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 					_wood setQuantity 3; 					[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class ChopwoodChain {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 				{ 					_inHands setDamage ((damage _inHands)+0.002); 					(this setDamage ((damage this) + (2/parseNumber(""1"")))); 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopBush:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 						_wood setQuantity 3; 						[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage;};";
		};
		
		class ChopwoodKnife {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1  && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase')";
			statement = "if(damage _inHands < 1) then 			{ 				_inHands setDamage ((damage _inHands)+0.035); 				(this setDamage ((damage this) + (1/parseNumber(""1"")))); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['ChopBush:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['MeleeKnifeSlash', 				{ 					_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 					_wood setQuantity 3; 					[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The blade is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
	};
	
	class ChopBushb_canina2s {
		model = "dz\plants2\bush\b_canina2s.p3d";
		
		class ChopwoodAxe {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'AxeBase')";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.02); 				(this setDamage ((damage this) + (1/parseNumber(""1"")))); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				_owner playAction ['GestureMeleeAxeSlash', 				{ 					_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 					_wood setQuantity 3; 					[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class ChopwoodChain {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1 && (_inHands isKindOf 'Chainsaw' and (isOn _inHands))";
			statement = "if(damage _inHands < 1)then 				{ 					_inHands setDamage ((damage _inHands)+0.002); 					(this setDamage ((damage this) + (2/parseNumber(""1"")))); 					[_owner,'chainsaw_cut'] call event_saySound; 					_owner setVariable ['isUsingSomething',1]; 					_owner setSlotLock ['Hands', true]; 					diag_log format ['ChopBush:::Lock::: %1', _owner getSlotLock 'Hands']; 					_owner playAction ['GestureMeleeChainsawNormal', 					{ 						_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 						_wood setQuantity 3; 						[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 					}] 				} 				else 				{ 					[_owner,'The axe is ruined.','colorImportant'] call fnc_playerMessage;};";
		};
		
		class ChopwoodKnife {
			displayName = "Chop sticks";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && damage this < 1  && (_inHands isKindOf 'KnifeBase' or _inHands isKindOf 'BayonetBase')";
			statement = "if(damage _inHands < 1) then 			{ 				_inHands setDamage ((damage _inHands)+0.035); 				(this setDamage ((damage this) + (1/parseNumber(""1"")))); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['ChopBush:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['MeleeKnifeSlash', 				{ 					_wood = ['Crafting_WoodenStick',_this] call player_addInventory; 					_wood setQuantity 3; 					[_this,'I have chopped some sticks.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['ChopBush:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The blade is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
	};
	
	class MineR2_Boulder2 {
		model = "dz\rocks2\R2_Boulder2.p3d";
		
		class MineStone {
			displayName = "Mine stone";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 10;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _inHands isKindOf 'Pickaxe'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.025); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['MineStone:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['digHoe', 				{ 					_stone = ['Consumable_Stone',_this] call player_addInventory; 					_stone setQuantity 1; 					[_this,'I have mined some stone.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['MineStone2:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The pickaxe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['MineStone:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
	
	class MineR2_Boulder1 {
		model = "dz\rocks2\R2_Boulder1.p3d";
		
		class MineStone {
			displayName = "Mine stone";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 10;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _inHands isKindOf 'Pickaxe'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.025); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['MineStone:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['digHoe', 				{ 					_stone = ['Consumable_Stone',_this] call player_addInventory; 					_stone setQuantity 1; 					[_this,'I have mined some stone.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['MineStone2:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The pickaxe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['MineStone:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
	
	class MineR2_Stone {
		model = "dz\rocks2\R2_Stone.p3d";
		
		class MineStone {
			displayName = "Mine stone";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 10;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _inHands isKindOf 'Pickaxe'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.025); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['MineStone:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['digHoe', 				{ 					_stone = ['Consumable_Stone',_this] call player_addInventory; 					_stone setQuantity 1; 					[_this,'I have mined some stone.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['MineStone2:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The pickaxe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['MineStone:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
	
	class MineSmall_Stone_01_F {
		model = "dz\rocks2\Small_Stone_01_F.p3d";
		
		class MineStone {
			displayName = "Mine stone";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 10;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _inHands isKindOf 'Pickaxe'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.025); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['MineStone:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['digHoe', 				{ 					_stone = ['Consumable_Stone',_this] call player_addInventory; 					_stone setQuantity 1; 					[_this,'I have mined some stone.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['MineStone2:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The pickaxe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['MineStone:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
	
	class MineSmall_Stone_02_F {
		model = "dz\rocks2\Small_Stone_02_F.p3d";
		
		class MineStone {
			displayName = "Mine stone";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 10;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _inHands isKindOf 'Pickaxe'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.025); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['MineStone:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['digHoe', 				{ 					_stone = ['Consumable_Stone',_this] call player_addInventory; 					_stone setQuantity 1; 					[_this,'I have mined some stone.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['MineStone2:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The pickaxe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['MineStone:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
	
	class MineStone_Small_F {
		model = "dz\rocks2\Stone_Small_F.p3d";
		
		class MineStone {
			displayName = "Mine stone";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 10;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _inHands isKindOf 'Pickaxe'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.025); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['MineStone:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['digHoe', 				{ 					_stone = ['Consumable_Stone',_this] call player_addInventory; 					_stone setQuantity 1; 					[_this,'I have mined some stone.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['MineStone2:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The pickaxe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['MineStone:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
	
	class MineStone_Small_W {
		model = "dz\rocks2\Stone_Small_W.p3d";
		
		class MineStone {
			displayName = "Mine stone";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 10;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _inHands isKindOf 'Pickaxe'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.025); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['MineStone:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['digHoe', 				{ 					_stone = ['Consumable_Stone',_this] call player_addInventory; 					_stone setQuantity 1; 					[_this,'I have mined some stone.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['MineStone2:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The pickaxe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['MineStone:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
	
	class MineBluntStone_01 {
		model = "dz\rocks3\Blunt\BluntStone_01.p3d";
		
		class MineStone {
			displayName = "Mine stone";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 10;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _inHands isKindOf 'Pickaxe'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.025); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				_owner setVariable ['isUsingSomething',1]; 				diag_log format ['MineStone2:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['digHoe', 				{ 					_stone = ['Consumable_Stone',_this] call player_addInventory; 					_stone setQuantity 1; 					[_this,'I have mined some stone.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['MineStone2:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The pickaxe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['MineStone2:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
	
	class MineBluntStone_01_LC {
		model = "dz\rocks3\Blunt\BluntStone_01_LC.p3d";
		
		class MineStone {
			displayName = "Mine stone";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 10;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _inHands isKindOf 'Pickaxe'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.025); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				_owner setVariable ['isUsingSomething',1]; 				diag_log format ['MineStone2:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['digHoe', 				{ 					_stone = ['Consumable_Stone',_this] call player_addInventory; 					_stone setQuantity 1; 					[_this,'I have mined some stone.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['MineStone2:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The pickaxe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['MineStone2:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
	
	class MineBluntStone_02 {
		model = "dz\rocks3\Blunt\BluntStone_02.p3d";
		
		class MineStone {
			displayName = "Mine stone";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 10;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _inHands isKindOf 'Pickaxe'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.025); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				_owner setVariable ['isUsingSomething',1]; 				diag_log format ['MineStone2:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['digHoe', 				{ 					_stone = ['Consumable_Stone',_this] call player_addInventory; 					_stone setQuantity 1; 					[_this,'I have mined some stone.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['MineStone2:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The pickaxe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['MineStone2:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
	
	class MineBluntStone_02_LC {
		model = "dz\rocks3\Blunt\BluntStone_02_LC.p3d";
		
		class MineStone {
			displayName = "Mine stone";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 10;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _inHands isKindOf 'Pickaxe'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.025); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				_owner setVariable ['isUsingSomething',1]; 				diag_log format ['MineStone2:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['digHoe', 				{ 					_stone = ['Consumable_Stone',_this] call player_addInventory; 					_stone setQuantity 1; 					[_this,'I have mined some stone.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['MineStone2:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The pickaxe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['MineStone2:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
	
	class MineBluntStone_03 {
		model = "dz\rocks3\Blunt\BluntStone_03.p3d";
		
		class MineStone {
			displayName = "Mine stone";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 10;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _inHands isKindOf 'Pickaxe'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.025); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				_owner setVariable ['isUsingSomething',1]; 				diag_log format ['MineStone2:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['digHoe', 				{ 					_stone = ['Consumable_Stone',_this] call player_addInventory; 					_stone setQuantity 1; 					[_this,'I have mined some stone.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['MineStone2:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The pickaxe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['MineStone2:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
	
	class MineBluntStone_03_LC {
		model = "dz\rocks3\Blunt\BluntStone_03_LC.p3d";
		
		class MineStone {
			displayName = "Mine stone";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 10;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _inHands isKindOf 'Pickaxe'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.025); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				_owner setVariable ['isUsingSomething',1]; 				diag_log format ['MineStone2:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['digHoe', 				{ 					_stone = ['Consumable_Stone',_this] call player_addInventory; 					_stone setQuantity 1; 					[_this,'I have mined some stone.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['MineStone2:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The pickaxe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['MineStone2:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
	
	class MineSharpStone_01 {
		model = "dz\rocks3\Sharp\SharpStone_01.p3d";
		
		class MineStone {
			displayName = "Mine stone";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 10;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _inHands isKindOf 'Pickaxe'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.025); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				_owner setVariable ['isUsingSomething',1]; 				diag_log format ['MineStone2:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['digHoe', 				{ 					_stone = ['Consumable_Stone',_this] call player_addInventory; 					_stone setQuantity 1; 					[_this,'I have mined some stone.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['MineStone2:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The pickaxe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['MineStone2:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
	
	class MineSharpStone_01_LC {
		model = "dz\rocks3\Sharp\SharpStone_01_LC.p3d";
		
		class MineStone {
			displayName = "Mine stone";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 10;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _inHands isKindOf 'Pickaxe'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.025); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				_owner setVariable ['isUsingSomething',1]; 				diag_log format ['MineStone2:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['digHoe', 				{ 					_stone = ['Consumable_Stone',_this] call player_addInventory; 					_stone setQuantity 1; 					[_this,'I have mined some stone.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['MineStone2:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The pickaxe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['MineStone2:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
	
	class MineSharpStone_02 {
		model = "dz\rocks3\Sharp\SharpStone_02.p3d";
		
		class MineStone {
			displayName = "Mine stone";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 10;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _inHands isKindOf 'Pickaxe'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.025); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				_owner setVariable ['isUsingSomething',1]; 				diag_log format ['MineStone2:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['digHoe', 				{ 					_stone = ['Consumable_Stone',_this] call player_addInventory; 					_stone setQuantity 1; 					[_this,'I have mined some stone.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['MineStone2:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The pickaxe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['MineStone2:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
	
	class MineSharpStone_02_LC {
		model = "dz\rocks3\Sharp\SharpStone_02_LC.p3d";
		
		class MineStone {
			displayName = "Mine stone";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 10;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _inHands isKindOf 'Pickaxe'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.025); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				_owner setVariable ['isUsingSomething',1]; 				diag_log format ['MineStone2:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['digHoe', 				{ 					_stone = ['Consumable_Stone',_this] call player_addInventory; 					_stone setQuantity 1; 					[_this,'I have mined some stone.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['MineStone2:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The pickaxe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['MineStone2:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
	
	class MineSharpStone_03 {
		model = "dz\rocks3\Sharp\SharpStone_03.p3d";
		
		class MineStone {
			displayName = "Mine stone";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 10;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _inHands isKindOf 'Pickaxe'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.025); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				_owner setVariable ['isUsingSomething',1]; 				diag_log format ['MineStone2:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['digHoe', 				{ 					_stone = ['Consumable_Stone',_this] call player_addInventory; 					_stone setQuantity 1; 					[_this,'I have mined some stone.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['MineStone2:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The pickaxe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['MineStone2:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
	
	class MineSharpStone_03_LC {
		model = "dz\rocks3\Sharp\SharpStone_03_LC.p3d";
		
		class MineStone {
			displayName = "Mine stone";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 10;
			condition = "_owner getVariable ['isUsingSomething',0] == 0 && _canUseActions && _inHands isKindOf 'Pickaxe'";
			statement = "if(damage _inHands < 1)then 			{ 				_inHands setDamage ((damage _inHands)+0.025); 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				_owner setVariable ['isUsingSomething',1]; 				diag_log format ['MineStone2:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['digHoe', 				{ 					_stone = ['Consumable_Stone',_this] call player_addInventory; 					_stone setQuantity 1; 					[_this,'I have mined some stone.',''] call fnc_playerMessage; 					_this setSlotLock ['Hands', false]; 					diag_log format ['MineStone2:::Lock::: %1', _this getSlotLock 'Hands']; 				}] 			} 			else 			{ 				[_owner,'The pickaxe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['MineStone2:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
	
	class BerryBush1 {
		model = "dz\plants2\bush\b_canina2s.p3d";
		
		class SearchBerries {
			displayName = "Search for berries";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			condition = "_canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && isNull _inHands";
			statement = "[0,_owner,'Fruit_CaninaBerry',2] call player_pickBerry;";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1 && isNull _inHands";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['BerryBush1Cancel:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
	
	class BerryBush2 {
		model = "dz\plants2\bush\b_sambucus.p3d";
		
		class SearchBerries {
			displayName = "Search for berries";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			condition = "_canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && isNull _inHands";
			statement = "[0,_owner,'Fruit_SambucusBerry',4] call player_pickBerry;";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['BerryBush2Cancel:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
	
	class AppleTree {
		model = "dz\plants2\tree\t_malus1s.p3d";
		
		class SearchApples {
			displayName = "Search for apples";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			memoryPoints[] = {"action"};
			radius = 20;
			condition = "_canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && isNull _inHands";
			statement = "[0,_owner,'Fruit_Apple',2] call player_pickBerry;";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			memoryPoints[] = {"action"};
			radius = 20;
			condition = "_owner getVariable ['isUsingSomething',0] == 1 && isNull _inHands";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['AppleCancel:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
	
	class ChickenCoop {
		model = "dz\structures\Misc\ChickenCoop\Misc_ChickenCoop.p3d";
		
		class SearchFeathers {
			displayName = "Search for feathers";
			showWindow = 1;
			priority = 0.1;
			hideOnUse = 1;
			memoryPoints[] = {"action"};
			radius = 3;
			condition = "_canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && isNull _inHands";
			statement = "[0,_owner,'Crafting_ChickenFeather',2] call player_pickBerry;";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1 && isNull _inHands";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['ChickenCancel:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
	
	class Greenhouse {
		model = "dz\structures\Misc\Misc_Greenhouse\Misc_Greenhouse.p3d";
		
		class DigGreenhouse {
			displayName = "Prepare slot for planting";
			priority = 1;
			showWindow = 1;
			hideOnUse = 0;
			condition = "_canUseActions && _inHands call fnc_isFarmingTool && _owner getVariable ['isUsingSomething',0] == 0";
			statement = "[this,_inHands,_owner] spawn player_digGreenhouse;";
		};
		
		class PlantGreenhouse {
			displayName = "Plant a seed";
			priority = 1;
			showWindow = 1;
			hideOnUse = 1;
			condition = "_canUseActions && _inHands isKindOf 'SeedItemBase'";
			statement = "[this,_inHands,_owner] spawn player_digGreenhouse;";
		};
		
		class PlantPotatoGreenhouse {
			displayName = "Plant a potato";
			priority = 1;
			showWindow = 1;
			hideOnUse = 1;
			condition = "(_inHands isKindOf 'Fruit_Potato')  and  ((_inHands getVariable 'food_stage') select 0 == 'Raw')";
			statement = "[this,_inHands,_owner] spawn player_digGreenhouse;";
		};
		
		class FertilizeSoil {
			displayName = "Fertilize the soil";
			priority = 1;
			showWindow = 1;
			hideOnUse = 1;
			condition = "_canUseActions && (typeOf _inHands) call fnc_isFertilizer";
			statement = "[this,_inHands,_owner] spawn player_digGreenhouse;";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['GreenhouseCancel:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
	
	class TileDigging {
		model = "dz\plants2\farming\garden_plot.p3d";
		
		class DigTile {
			displayName = "Prepare slot for planting";
			priority = 1;
			showWindow = 1;
			hideOnUse = 0;
			condition = "_canUseActions && _inHands call fnc_isFarmingTool && _owner getVariable ['isUsingSomething',0] == 0";
			statement = "[this,_inHands,_owner] spawn player_digGreenhouse;";
		};
		
		class PlantTile {
			displayName = "Plant a seed";
			priority = 1;
			showWindow = 1;
			hideOnUse = 1;
			condition = "_canUseActions && _inHands isKindOf 'SeedItemBase'";
			statement = "[this,_inHands,_owner] spawn player_digGreenhouse;";
		};
		
		class PlantTilePotato {
			displayName = "Plant a potato";
			priority = 1;
			showWindow = 1;
			hideOnUse = 1;
			condition = "(_inHands isKindOf 'Fruit_Potato')  and  (_inHands getVariable 'food_stage' select 0 == 'Raw')";
			statement = "[this,_inHands,_owner] spawn player_digGreenhouse;";
		};
		
		class FertilizeSoilInTile {
			displayName = "Fertilize soil";
			priority = 1;
			showWindow = 1;
			hideOnUse = 1;
			condition = "_canUseActions && (typeOf _inHands) call fnc_isFertilizer";
			statement = "[this,_inHands,_owner] spawn player_digGreenhouse;";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; 				_owner playAction 'CancelAction'; 				_owner setSlotLock ['Hands', false]; 				diag_log format ['TileDiggingCancel:::Lock::: %1', _owner getSlotLock 'Hands']; 			";
		};
	};
};

class CfgSurfaceActions {
	class CRForest1 {
		model = "#CRForest1";
		
		class CollectFireWood {
			displayName = "Search for wooden sticks";
			priority = 0.1;
			showWindow = 0;
			hideOnUse = 1;
			condition = "ProfileStart 'sqf_surfAction_CRForest1CollectFireWood_condition'; _con = (_canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && isNull _inHands); ProfileStop 'sqf_surfAction_CRForest1CollectFireWood_condition'; _con;";
			statement = "[0,_owner,'Crafting_WoodenStick',2] call player_pickBerry;";
		};
		
		class DigTile {
			displayName = "Make a garden plot";
			condition = "_canUseActions && _inHands call fnc_isFarmingTool && _owner getVariable ['isUsingSomething',0] == 0";
			priority = 1;
			showWindow = 1;
			hideOnUse = 1;
			statement = "[0, _owner, _inHands, ""CRForest1""] spawn player_DigGardenPlot";
		};
		
		class SetUpRabbitSnare {
			displayName = "Deploy snare trap";
			condition = "_canUseActions && _inHands isKindOf 'Crafting_RabbitSnare' && _owner getVariable ['isUsingSomething',0] == 0";
			priority = 1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 10;
			statement = "[0, _owner, _inHands, ""CRForest1""] spawn player_RabbitSnareTrap;";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; _owner playAction 'CancelAction';_owner setSlotLock ['Hands', false];diag_log format ['CancelAction:::Lock::: %1', _owner getSlotLock 'Hands'];";
		};
	};
	
	class CRForest2 {
		model = "#CRForest2";
		
		class CollectFireWood {
			displayName = "Search for wooden sticks";
			priority = 0.1;
			showWindow = 0;
			hideOnUse = 1;
			condition = "ProfileStart 'sqf_surfAction_CRForest2CollectFireWood_condition'; _con = (_canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && isNull _inHands); ProfileStop 'sqf_surfAction_CRForest2CollectFireWood_condition'; _con;";
			statement = "[0,_owner,'Crafting_WoodenStick',3] call player_pickBerry;";
		};
		
		class DigTile {
			displayName = "Make a garden plot";
			condition = "_canUseActions && _inHands call fnc_isFarmingTool && _owner getVariable ['isUsingSomething',0] == 0";
			priority = 1;
			showWindow = 1;
			hideOnUse = 1;
			statement = "[0, _owner, _inHands, ""CRForest2""] spawn player_DigGardenPlot";
		};
		
		class SetUpRabbitSnare {
			displayName = "Deploy snare trap";
			condition = "_canUseActions && _inHands isKindOf 'Crafting_RabbitSnare' && _owner getVariable ['isUsingSomething',0] == 0";
			priority = 1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 10;
			statement = "[0, _owner, _inHands, ""CRForest2""] spawn player_RabbitSnareTrap;";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; _owner playAction 'CancelAction';_owner setSlotLock ['Hands', false];diag_log format ['CancelAction:::Lock::: %1', _owner getSlotLock 'Hands'];";
		};
	};
	
	class CRGrass1 {
		model = "#CRGrass1";
		
		class DigUpWormsKnife {
			displayName = "Dig up worms";
			priority = 0.2;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_canUseActions && _inHands isKindOf 'KnifeBase' && _owner getVariable ['isUsingSomething',0] == 0";
			statement = "if(damage _inHands < 1) then 			{ 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['WormsKnife:::Lock::: %1', _owner getSlotLock 'Hands']; 				_inHands setDamage ((damage _inHands)+0.01); 				_rand = random 5; 				if(_rand <= 2)then 				{ 					_owner playAction ['ItemUseShort', 					{ 						_this setVariable ['isUsingSomething',0]; 						_this setSlotLock ['Hands', false]; 						diag_log format ['WormsKnife:::Lock::: %1', _this getSlotLock 'Hands']; 						_worm = ['Food_Worm',_this] call player_addInventory; 						_worm setQuantity 4; 						[_this,'I have dug up a bunch of worms.',''] call fnc_playerMessage; 					}]; 				} 				else 				{ 					_owner playAction ['ItemUseShort', 					{ 						[_this,'I dig up nothing.',''] call fnc_playerMessage; 						_this setVariable ['isUsingSomething',0]; 						_this setSlotLock ['Hands', false]; 						diag_log format ['Wormsknife:::Lock::: %1', _this getSlotLock 'Hands']; 					}]; 				}; 			} 			else 			{ 				[_owner,'The knife is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class DigUpWormsHoe {
			displayName = "Dig up worms";
			priority = 0.2;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_canUseActions && _inHands isKindOf 'FarmingHoe' && _owner getVariable ['isUsingSomething',0] == 0";
			statement = "if (damage _inHands < 1) then 			{ 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['WormsHoe:::Lock::: %1', _owner getSlotLock 'Hands']; 				_inHands setDamage ((damage _inHands)+0.01); 				_rand = random 5; 				if (_rand <= 2) then 				{ 					_owner playAction ['digHoe', 					{ 						_this setVariable ['isUsingSomething',0]; 						_this setSlotLock ['Hands', false]; 						diag_log format ['WormsHoe:::Lock::: %1', _this getSlotLock 'Hands']; 						_worm = ['Food_Worm',_this] call player_addInventory; 						_worm setQuantity 4; 						[_this,'I have dug up a bunch of worms.',''] call fnc_playerMessage; 					}]; 				} 				else 				{ 					_owner playAction ['digHoe', 					{ 						[_this,'I dig up nothing.',''] call fnc_playerMessage; 						_this setVariable ['isUsingSomething',0]; 						_this setSlotLock ['Hands', false]; 						diag_log format ['WormsHoe:::Lock::: %1', _this getSlotLock 'Hands']; 					}]; 				}; 			} 			else 			{ 				[_owner,'The farming hoe is ruined.','colorImportant'] call fnc_playerMessage; 			};";
		};
		
		class DigUpWormsShovel {
			displayName = "Dig up worms";
			priority = 0.2;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_canUseActions && _inHands isKindOf 'Tool_Shovel' && _owner getVariable ['isUsingSomething',0] == 0";
			statement = "if( damage _inHands < 1 ) then 			{ 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['WormsShovel:::Lock::: %1', _owner getSlotLock 'Hands']; 				_inHands setDamage ((damage _inHands)+0.01); 				_rand = random 5; 				if ( _rand < 2 ) then 				{ 					_owner playAction ['digShovel', 					{ 						_this setVariable ['isUsingSomething',0]; 						_this setSlotLock ['Hands', false]; 						diag_log format ['WormsShovel:::Lock::: %1', _this getSlotLock 'Hands']; 						_worm = ['Food_Worm',_this] call player_addInventory; 						_worm setQuantity 3; 						[_this,'I have dug up a bunch of worms.',''] call fnc_playerMessage; 					}]; 				} 				else 				{ 					_owner playAction ['digShovel', 					{ 						[_this,'I dig up nothing.',''] call fnc_playerMessage; 						_this setVariable ['isUsingSomething',0]; 						_this setSlotLock ['Hands', false]; 						diag_log format ['WormsShovel:::Lock::: %1', _this getSlotLock 'Hands']; 					}]; 				}; 			} 			else 			{ 				[_owner,'The shovel is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class AddGrass {
			displayName = "Add grass to the wrap";
			priority = 0.2;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_canUseActions && _inHands isKindOf 'Att_Weaponwrap_Burlap'";
			statement = "_owner playAction ['ItemUseShort',{deleteVehicle itemInHands _this;_gr = ['Att_Weaponwrap_Grass',_this] call player_addInventory;}];";
		};
		
		class DigTile {
			displayName = "Make a garden plot";
			condition = "_canUseActions && _inHands call fnc_isFarmingTool && _owner getVariable ['isUsingSomething',0] == 0";
			priority = 1;
			showWindow = 1;
			hideOnUse = 1;
			statement = "[0, _owner, _inHands, ""CRGrass1""] spawn player_DigGardenPlot";
		};
		
		class SetUpRabbitSnare {
			displayName = "Deploy snare trap";
			condition = "_canUseActions && _inHands isKindOf 'Crafting_RabbitSnare' && _owner getVariable ['isUsingSomething',0] == 0";
			priority = 1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 10;
			statement = "[0, _owner, _inHands, ""CRGrass1""] spawn player_RabbitSnareTrap;";
		};
		
		class  {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1 && (_inHands isKindOf 'Tool_Shovel' || _inHands isKindOf 'FarmingHoe')";
			statement = "_owner setVariable ['isUsingSomething',0]; _owner playAction 'CancelAction';_owner setSlotLock ['Hands', false];diag_log format ['CancelAction:::Lock::: %1', _owner getSlotLock 'Hands'];";
		};
	};
	
	class CRGrass2 {
		model = "#CRGrass2";
		
		class DigUpWormsHoe {
			displayName = "Dig up worms";
			priority = 0.2;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_canUseActions && _inHands isKindOf 'FarmingHoe' && _owner getVariable ['isUsingSomething',0] == 0";
			statement = "if (damage _inHands < 1) then 			{ 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['WormsHoe:::Lock::: %1', _owner getSlotLock 'Hands']; 				_inHands setDamage ((damage _inHands)+0.01); 				_rand = random 7; 				if (_rand <= 2) then 				{ 					_owner playAction ['digHoe', 					{ 						_this setVariable ['isUsingSomething',0]; 						_this setSlotLock ['Hands', false]; 						diag_log format ['WormsHoe:::Lock::: %1', _this getSlotLock 'Hands']; 						_worm = ['Food_Worm',_this] call player_addInventory; 						_worm setQuantity 4; 						[_owner,'I have dug up a bunch of worms.',''] call fnc_playerMessage; 					}]; 				} 				else 				{ 					_owner playAction ['digHoe', 					{ 						_this setVariable ['isUsingSomething',0]; 						[_this,'I dig up nothing.',''] call fnc_playerMessage; 						_this setSlotLock ['Hands', false]; 						diag_log format ['WormsHoe:::Lock::: %1', _this getSlotLock 'Hands']; 					}]; 				}; 			} 			else 			{ 				[_owner,'The farming hoe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class DigUpWormsShovel {
			displayName = "Dig up worms";
			priority = 0.2;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_canUseActions && _inHands isKindOf 'Tool_Shovel' && _owner getVariable ['isUsingSomething',0] == 0";
			statement = "if(damage _inHands < 1) then 			{ 				_owner setVariable ['isUsingSomething',1]; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['WormsShovel:::Lock::: %1', _owner getSlotLock 'Hands']; 				_inHands setDamage ((damage _inHands)+0.01); 				_rand = random 100; 				if (_rand < 30) then 				{ 					_owner playAction ['digShovel', 					{ 						_this setVariable ['isUsingSomething',0]; 						_this setSlotLock ['Hands', false]; 						diag_log format ['WormsShovel:::Lock::: %1', _this getSlotLock 'Hands']; 						_worm = ['Food_Worm',_this] call player_addInventory; 						_worm setQuantity 3; 						[_this,'I have dug up a bunch of worms.',''] call fnc_playerMessage; 					}]; 				} 				else 				{ 					if (_rand<99) then 					{ 						_owner playAction ['digShovel', 						{ 							_this setVariable ['isUsingSomething',0]; 							_this setSlotLock ['Hands', false]; 							diag_log format ['WormsShovel:::Lock::: %1', _this getSlotLock 'Hands']; 							[_this,'I dig up nothing.',''] call fnc_playerMessage; 						}]; 					} 					else 					{ 						_owner playAction ['digShovel', 						{ 							_this setVariable ['isUsingSomething',0]; 							_this setSlotLock ['Hands', false]; 							diag_log format ['WormsShovel:::Lock::: %1', _this getSlotLock 'Hands']; 							_worm = ['Cookware_Pot',_this] call player_addInventory; 							_worm setDamage 0.8; 							[_this,'I dig up rusty cooking pot?!',''] call fnc_playerMessage; 						}]; 					}; 				}; 			} 			else 			{ 				[_owner,'The shovel is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class AddGrass {
			displayName = "Add grass to the wrap";
			priority = 0.2;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_canUseActions &&  _inHands isKindOf 'Att_Weaponwrap_Burlap'";
			statement = "_owner playAction ['ItemUseShort',{deleteVehicle itemInHands _this;_gr = ['Att_Weaponwrap_Grass',_this] call player_addInventory;}];";
		};
		
		class DigTile {
			displayName = "Make a garden plot";
			condition = "_canUseActions && _inHands call fnc_isFarmingTool && _owner getVariable ['isUsingSomething',0] == 0";
			priority = 1;
			showWindow = 1;
			hideOnUse = 1;
			statement = "[0, _owner, _inHands, ""CRGrass2""] spawn player_DigGardenPlot";
		};
		
		class SetUpRabbitSnare {
			displayName = "Deploy snare trap";
			condition = "_canUseActions && _inHands isKindOf 'Crafting_RabbitSnare' && _owner getVariable ['isUsingSomething',0] == 0";
			priority = 1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 10;
			statement = "[0, _owner, _inHands, ""CRGrass2""] spawn player_RabbitSnareTrap;";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; _owner playAction 'CancelAction';_owner setSlotLock ['Hands', false];diag_log format ['CancelAction:::Lock::: %1', _owner getSlotLock 'Hands'];";
		};
	};
	
	class CRGrit1 {
		model = "#CRGrit1";
		
		class CollectStones {
			displayName = "Search for stones";
			priority = 0.1;
			showWindow = 0;
			hideOnUse = 1;
			condition = "ProfileStart 'sqf_surfAction_CRGrit1CollectStones_condition'; _con = (_canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && isNull _inHands);ProfileStop 'sqf_surfAction_CRGrit1CollectStones_condition'; _con;";
			statement = "[0,_owner,'Consumable_SmallStone',3] call player_pickBerry;";
		};
		
		class CraftStoneKnife {
			displayName = "Craft stone knife";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			condition = "_canUseActions && _inHands isKindOf 'Consumable_SmallStone'";
			statement = "if((quantity _inHands) > 1)then{_inHands addQuantity -1;}else{deleteVehicle _inHands;};_owner playAction ['PlayerCraft',{_stone = ['Tool_StoneKnife',_this] call player_addInventory;_this moveToHands _stone;[_this,'I have crafted Stone Knife.',''] call fnc_playerMessage;}];";
		};
		
		class DigTile {
			displayName = "Make a garden plot";
			condition = "_canUseActions && _inHands call fnc_isFarmingTool && _owner getVariable ['isUsingSomething',0] == 0";
			priority = 1;
			showWindow = 1;
			hideOnUse = 1;
			statement = "[0, _owner, _inHands, ""CRGrit1""] spawn player_DigGardenPlot";
		};
		
		class SetUpRabbitSnare {
			displayName = "Deploy snare trap";
			condition = "_canUseActions && _inHands isKindOf 'Crafting_RabbitSnare' && _owner getVariable ['isUsingSomething',0] == 0";
			priority = 1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 10;
			statement = "[0, _owner, _inHands, ""CRGrit1""] spawn player_RabbitSnareTrap;";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; _owner playAction 'CancelAction';_owner setSlotLock ['Hands', false];diag_log format ['CancelAction:::Lock::: %1', _owner getSlotLock 'Hands'];";
		};
	};
	
	class CRBoulders {
		model = "#CRBoulders";
		
		class CollectStones {
			displayName = "Search for stones";
			priority = 0.1;
			showWindow = 0;
			hideOnUse = 1;
			condition = "ProfileStart 'sqf_surfAction_CRBouldersCollectStones_condition'; _con = (_canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && isNull _inHands); ProfileStop 'sqf_surfAction_CRBouldersCollectStones_condition'; _con;";
			statement = "[0,_owner,'Consumable_SmallStone',3] call player_pickBerry;";
		};
		
		class MineStones {
			displayName = "Mine stones";
			priority = 0.2;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_canUseActions && _inHands isKindOf 'Pickaxe'";
			statement = "if(damage _inHands < 0.95)then 			{ 				_owner setSlotLock ['Hands', true]; 				diag_log format ['MineStone:::Lock::: %1', _owner getSlotLock 'Hands']; 				_inHands setDamage ((damage _inHands)+0.025); 				_owner playAction ['digHoe', 				{ 					_this setSlotLock ['Hands', false]; 					diag_log format ['MineStone:::Lock::: %1', _this getSlotLock 'Hands']; 					_stone = ['Consumable_Stone',_this] call player_addInventory; 					_stone setQuantity 1; 				}] 			} 			else 			{ 				[_owner,'The pickaxe is ruined.','colorImportant'] call fnc_playerMessage; 			}; 			";
		};
		
		class CraftStoneKnife {
			displayName = "Craft stone knife";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			condition = "_canUseActions && _inHands isKindOf 'Consumable_SmallStone'";
			statement = "_owner setVariable ['isUsingSomething',1]; 				deleteVehicle _inHands; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['CraftStoneKnife:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['PlayerCraft', 				{ 					_this setSlotLock ['Hands', false]; 					diag_log format ['CraftStoneKnifeBoulders:::Lock::: %1', _this getSlotLock 'Hands']; 					_stone = ['Tool_StoneKnife',_this] call player_addInventory; 					_this moveToHands _stone; 					[_this,'I have crafted Stone Knife.',''] call fnc_playerMessage; 				}]; 			";
		};
		
		class SetUpRabbitSnare {
			displayName = "Deploy snare trap";
			condition = "_canUseActions && _inHands isKindOf 'Crafting_RabbitSnare' && _owner getVariable ['isUsingSomething',0] == 0";
			priority = 1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 10;
			statement = "[0, _owner, _inHands, ""CRBoulders""] spawn player_RabbitSnareTrap;";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; _owner playAction 'CancelAction';_owner setSlotLock ['Hands', false];diag_log format ['CancelAction:::Lock::: %1', _owner getSlotLock 'Hands'];";
		};
	};
	
	class Freshwater {
		model = "#Freshwater";
		
		class Water {
			displayName = "Drink";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			condition = "_canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && isNull _inHands";
			statement = "_owner setVariable ['isUsingSomething',1]; 				[this, _inHands, _owner,'water'] call player_liquidSource; 				[_owner,'RiverWater','Direct',1] call event_transferModifiers; 			";
		};
		
		class FillBottle {
			displayName = "Fill Bottle";
			priority = 0.2;
			showWindow = 1;
			hideOnUse = 1;
			condition = "_canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && _inHands isKindOf 'BottleBase'";
			statement = "_owner setVariable ['isUsingSomething',1]; 				[this, _inHands, _owner,'water'] call player_liquidSource; 				[2,_inHands,'Cholera',1] call event_modifier; 			";
		};
		
		class  {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0.2;
			showWindow = 1;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1 && isNull _inHands";
			statement = "_owner setVariable ['isUsingSomething',0]; _owner playAction 'CancelAction';_owner setSlotLock ['Hands', false];diag_log format ['CancelAction:::Lock::: %1', _owner getSlotLock 'Hands'];";
		};
		
		class Startfishing {
			displayName = "Start fishing";
			priority = 0.3;
			showWindow = 1;
			hideOnUse = 0;
			condition = "_canUseActions && _inHands isKindOf 'Tool_FishingRodBase' && !isOn _inHands && !(isNull (_inHands itemInSlot 'bait'))";
			statement = "[_owner,'CastingRod'] call event_saySound; 				[_this,'I have thrown the bait into the water',''] call fnc_playerMessage; 				fishingpos = (getPosATL _owner) select 0; 				[_owner,fishingpos] call fishing_event_add; 				_owner playAction 'fishingStart'; 				(_inHands itemInSlot 'bait') setVariable['power',(10004+random 10)]; 				_inHands powerOn true; 			";
		};
		
		class Check {
			displayName = "Check the bait";
			condition = "_inHands isKindOf 'Tool_FishingRodBase' && isOn _inHands";
			priority = 0.5;
			showWindow = 1;
			hideOnUse = 0;
			statement = "_owner playAction 'fishingCheck'; 			_num=(_inHands itemInSlot 'bait') getVariable['power',10020]; 			if(_num > 10003)then 			{ 				(_inHands itemInSlot 'bait') setVariable['power',_num+0.15]; 			}; 			switch (true) do 			{ 				case (_num > 10002.5): 				{ 					[_owner,'I sense no movement near the bait',''] call fnc_playerMessage; 					[_owner,'SplashSmall_0'] call event_saySound; 				}; 				case (_num <= 10002.5 && _num > 10000.75): 				{ 					[_owner,'There is some movement near the bait',''] call fnc_playerMessage; 					[_owner,'SplashSmall_1'] call event_saySound; 				}; 				case (_num <= 10000.75 && _num > 10000.25): 				{ 					[_owner,'Something is cautiously examining the bait',''] call fnc_playerMessage; 					[_owner,'SplashSmall_2'] call event_saySound; 				}; 				case (_num <= 10000.25 && _num > 9999.5): 				{ 					[_owner,'Something has just bit the bait!','colorImportant'] call fnc_playerMessage; 					[_owner,'SplashSmall_2'] call event_saySound; 				}; 				case (_num <= 9999.5 && _num > 9999): 				{ 					[_owner,'The movement near the bait is fading',''] call fnc_playerMessage; 					[_owner,'SplashSmall_1'] call event_saySound; 				}; 				case (_num <= 9999): 				{ 					(_inHands itemInSlot 'bait') setVariable['power',(10000+random 15)]; 				}; 			}; 			";
		};
		
		class Pull {
			displayName = "Pull out";
			condition = "_inHands isKindOf 'Tool_FishingRodBase' && isOn _inHands";
			priority = 0.4;
			showWindow = 1;
			hideOnUse = 0;
			statement = "_owner playAction 'fishingCatch'; 			_bait = typeOf(_inHands itemInSlot 'bait'); 			_num = (_inHands itemInSlot 'bait') getVariable['power',10020]; 			if (_num <= 10000.25 && _num > 9999.5)then 			{ 				if ((random 10) < 7)then 				{ 					[_owner,'FishStruggling_0'] call event_saySound; 					[_owner,'I have caught the fish!',''] call fnc_playerMessage; 					_tuna=['Food_Carp',_owner] call player_addInventory; 					_tuna setQuantity 2; 				} 				else 				{ 					if ((random 20) > 2)then 					{ 						[_owner,'FishStruggling_2'] call event_saySound; 						[_owner,'The fish broke away taking the bait with it',''] call fnc_playerMessage; 					} 					else 					{ 						[_owner,'FishStruggling_1'] call event_saySound; 						[_owner,'I have caught ... something',''] call fnc_playerMessage; 						_wellies=['Wellies_Brown',_owner] call player_addInventory; 					}; 				}; 				deleteVehicle (_inHands itemInSlot 'bait'); 				if(_bait == 'Consumable_Bait')then 				{ 					_hook=['Consumable_Hook',_owner] call player_addInventory; 				} 				else 				{ 					_hook2=['Consumable_BoneHook',_owner] call player_addInventory; 				}; 			} 			else 			{ 				if(_num <=9999.5 && _num > 9999)then 				{ 					[_owner,'SplashMultiple'] call event_saySound; 					[_owner,'Too late...',''] call fnc_playerMessage; 				} 				else 				{ 					[_owner,'I have pulled the bait out of water',''] call fnc_playerMessage; 					[_owner,'SplashMultiple'] call event_saySound; 				}; 			}; 			_inHands powerOn false; 			";
		};
	};
	
	class CRHlina {
		model = "#CRHlina";
		
		class CollectStones {
			displayName = "Search for stones";
			priority = 0.1;
			showWindow = 0;
			hideOnUse = 1;
			condition = "ProfileStart 'sqf_surfAction_CRHlinaCollectStones_condition'; _con = (_canUseActions && _owner getVariable ['isUsingSomething',0] == 0 && isNull _inHands); ProfileStop 'sqf_surfAction_CRHlinaCollectStones_condition'; _con;";
			statement = "[0,_owner,'Consumable_SmallStone',3] call player_pickBerry;";
		};
		
		class CraftStoneKnife {
			displayName = "Craft stone knife";
			priority = 0.1;
			showWindow = 1;
			hideOnUse = 1;
			condition = "_canUseActions && _inHands isKindOf 'Consumable_SmallStone'";
			statement = "_owner setVariable ['isUsingSomething',1]; 				deleteVehicle _inHands; 				_owner setSlotLock ['Hands', true]; 				diag_log format ['CraftStoneKnifeHlina:::Lock::: %1', _owner getSlotLock 'Hands']; 				_owner playAction ['PlayerCraft', 				{ 					_this setSlotLock ['Hands', false]; 					diag_log format ['CraftStoneKnifeHlina:::Lock::: %1', _this getSlotLock 'Hands']; 					_stone = ['Tool_StoneKnife',_this] call player_addInventory; 					_this moveToHands _stone;[_this,'I have crafted Stone Knife.',''] call fnc_playerMessage; 				}]; 			";
		};
		
		class DigTile {
			displayName = "Make a garden plot";
			condition = "_canUseActions && _inHands call fnc_isFarmingTool && _owner getVariable ['isUsingSomething',0] == 0";
			priority = 1;
			showWindow = 1;
			hideOnUse = 1;
			statement = "[0, _owner, _inHands, ""CRHlina""] spawn player_DigGardenPlot";
		};
		
		class SetUpRabbitSnare {
			displayName = "Deploy snare trap";
			condition = "_canUseActions && _inHands isKindOf 'Crafting_RabbitSnare' && _owner getVariable ['isUsingSomething',0] == 0";
			priority = 1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 10;
			statement = "[0, _owner, _inHands, ""CRHlina""] spawn player_RabbitSnareTrap;";
		};
		
		class CancelAction {
			displayNameDefault = "Cancel current action";
			displayName = "Cancel current action";
			priority = 0;
			showWindow = 0;
			hideOnUse = 1;
			condition = "_owner getVariable ['isUsingSomething',0] == 1";
			statement = "_owner setVariable ['isUsingSomething',0]; _owner playAction 'CancelAction';_owner setSlotLock ['Hands', false];diag_log format ['CancelAction:::Lock::: %1', _owner getSlotLock 'Hands'];";
		};
	};
	
	class cesta {
		model = "#cesta";
		
		class SetUpRabbitSnare {
			displayName = "Deploy snare trap";
			condition = "_canUseActions && _inHands isKindOf 'Crafting_RabbitSnare' && _owner getVariable ['isUsingSomething',0] == 0";
			priority = 1;
			showWindow = 1;
			hideOnUse = 1;
			radius = 10;
			statement = "[0, _owner, _inHands, ""cesta""] spawn player_RabbitSnareTrap;";
		};
	};
};

class DefaultStage {
	duration[] = {};
	conscious = 1;
	canGoBack = 0;
	messages[] = {};
	messageStyle = "colorStatusChannel";
	cooldown[] = {};
	sounds[] = {};
	actions[] = {};
	track = "";
	modifiers[] = {};
	condition = "true";
	statementEnter = "";
	statementExit = "";
};

class DefaultDirect {
	transferability = 0;
	distance = 0;
};

class DefaultIndirect {
	transferability = 0;
	distance = 0;
};

class DefaultTerrain {
	transferability = 0;
	distance = 0;
};

class CfgModifiers {
	class Default {
		messagesExit[] = {};
		
		class Stages {};
	};
	
	class ServerTest : Default {
		messagesExit[] = {"Server Message Stress Test Stopped"};
		messageExitStyle = "colorImportant";
		
		class Stages {
			class 1 : DefaultStage {
				duration[] = {1, 1};
				messages[] = {"drop & pick"};
				messageStyle = "colorFriendly";
				cooldown[] = {1, 1};
				condition = "true";
				statementEnter = "_cargoContainer = _person itemInSlot 'Back'; _itemsInContainer = itemsInCargo _cargoContainer; _randomNum = floor(random (count _itemsInContainer)); _chosenItem = _itemsInContainer select _randomNum; _itemType = typeOf _chosenItem; _person moveToHands _chosenItem; [_itemType,_person] call player_addInventory; _item = _itemType createVehicle (getPosATL _person); _item setPosATL (getPosATL _person); deleteVehicle _item;";
				statementExit = "_itemHands = itemInHands player; deleteVehicle _itemHands;";
			};
			
			class 2 : DefaultStage {
				duration[] = {1, 1};
				condition = "true";
				statementEnter = "[2,_person,'ServerTest',0] call event_modifier;";
				statementExit = "";
			};
		};
	};
	
	class Bleeding : Default {
		messagesExit[] = {"I am no longer bleeding"};
		messageExitStyle = "colorFriendly";
		
		class Stages {
			class 1 : DefaultStage {
				cooldown[] = {10, 30};
				messages[] = {"I can feel blood dripping", "My clothes are damp with blood", "I can feel blood dripping off my body", "I feel warm blood on my clothes"};
				messageStyle = "colorImportant";
				condition = "(_this getVariable['bleedingLevel',0]) > 0";
				modifiers[] = {{"blood", -5, " * (_this getVariable['bleedingLevel',0])"}};
				notifier[] = {1, "bleeding", {0.541, 0.031, 0.031, 1}};
				statementEnter = "admin_log format ['%1(uid=%2) STARTS BLEEDING.', name _person, getPlayerUID _person];";
				statementExit = "admin_log format ['%1(uid=%2) STOPS BLEEDING.', name _person, getPlayerUID _person];";
			};
		};
	};
	
	class Temperature : Default {
		messagesExit[] = {};
		messageExitStyle = "colorFriendly";
		
		class Stages {
			class Init : DefaultStage {
				messages[] = {};
				messageStyle = "";
				cooldown[] = {30, 60};
				notifier[] = {};
				modifiers[] = {};
				condition = "_this getVariable['bodytemperature',36.5] < 36.7 && _this getVariable['bodytemperature',36.5] > 35.8 && _this getVariable ['heatcomfort',-15] < -10";
			};
			
			class Warming : Init {
				messages[] = {"I am slowly warming up"};
				messageStyle = "";
				cooldown[] = {30, 60};
				notifier[] = {};
				modifiers[] = {{"bodytemperature", 1,  * 0.001}};
				condition = "_this getVariable['bodytemperature',36.5] < 36.7 && _this getVariable['bodytemperature',36.5] > 35.8 && _this getVariable ['heatcomfort',-15] >= -10";
			};
			
			class HypothermiaLight : Warming {
				messages[] = {"I am cold", "I am shaking"};
				messageStyle = "colorImportant";
				cooldown[] = {20, 20};
				notifier[] = {8, "cold", {0.525, 0.541, 0.031, 1}};
				modifiers[] = {{"energy", -1.1,  * 0.5}, {"bodytemperature", 1,  * 0.001}};
				condition = "_this getVariable['bodytemperature',36.5] <= 35.8 && _this getVariable['bodytemperature',36.5] >= 35";
			};
			
			class HypothermiaMedium : HypothermiaLight {
				messages[] = {"I am freezing"};
				messageStyle = "colorImportant";
				cooldown[] = {10, 10};
				notifier[] = {8, "freezing", {0.541, 0.294, 0.031, 1}};
				modifiers[] = {{"energy", -1.6,  * 0.5}, {"bodytemperature", 1,  * 0.001}};
				condition = "_this getVariable['bodytemperature',36.5] < 35 && _this getVariable['bodytemperature',36.5] >= 34.5";
			};
			
			class HypothermiaHeavy : HypothermiaMedium {
				messages[] = {"I am hypothermic"};
				messageStyle = "colorImportant";
				cooldown[] = {5, 5};
				notifier[] = {8, "hypothermia", {0.541, 0.031, 0.031, 1}};
				modifiers[] = {{"bodytemperature", 1,  * 0.001}, {"energy", -1.05}, {"health", -10}, {"blood", -5}};
				condition = "_this getVariable['bodytemperature',36.5] < 34.5";
			};
			
			class HyperthermiaLight : HypothermiaHeavy {
				messages[] = {};
				messageStyle = "colorImportant";
				cooldown[] = {10, 10};
				notifier[] = {8, "hot", {0.525, 0.541, 0.031, 1}};
				modifiers[] = {{"water", -1.0, " * 0.1* DZ_THIRST_SEC"}, {"bodytemperature", -1,  * 0.0001}};
				condition = "_this getVariable['bodytemperature',36.5] >= 37.1 && _this getVariable['bodytemperature',36.5] < 38";
			};
			
			class HyperthermiaMedium : HyperthermiaLight {
				messages[] = {"I am overheating"};
				messageStyle = "colorImportant";
				cooldown[] = {10, 10};
				notifier[] = {8, "overheating", {0.541, 0.294, 0.031, 1}};
				modifiers[] = {{"water", -1.0, " * DZ_THIRST_SEC"}};
				condition = "_this getVariable['bodytemperature',36.5] >= 38 && _this getVariable['bodytemperature',36.5] < 40";
			};
			
			class HyperthermiaHeavy : HyperthermiaMedium {
				messages[] = {"I am hyperthermic"};
				messageStyle = "colorImportant";
				cooldown[] = {10, 10};
				notifier[] = {8, "hyperthermia", {0.541, 0.031, 0.031, 1}};
				modifiers[] = {{"water", -2.0, " * DZ_THIRST_SEC"}};
				condition = "_this getVariable['bodytemperature',36.5] >= 40";
			};
			
			class TemperatureStable : HyperthermiaHeavy {
				messages[] = {};
				messageStyle = "colorImportant";
				cooldown[] = {30, 60};
				notifier[] = {};
				modifiers[] = {};
				condition = "_this getVariable['bodytemperature',36.5] >= 36.7 && _this getVariable['bodytemperature',36.5] < 37.1";
			};
		};
	};
	
	class Hunger : Default {
		messagesExit[] = {};
		messageExitStyle = "colorFriendly";
		
		class Stages {
			class Hungry : DefaultStage {
				messages[] = {"My stomach grumbles", "I'm feeling hungry", "I want to eat something", "I feel hungry"};
				messageStyle = "";
				cooldown[] = {60, 180};
				condition = "_this getVariable['energy',0] < 1000";
				notifier[] = {2, "hungry", {0.525, 0.541, 0.031, 1}};
			};
			
			class VeryHungry : Hungry {
				messages[] = {"I'm extremely hungry", "My stomach grumbled violently", "I'm starving"};
				messageStyle = "";
				cooldown[] = {20, 30};
				condition = "_this getVariable['energy',0] < 500";
				notifier[] = {2, "hungry", {0.541, 0.294, 0.031, 1}};
			};
			
			class Starving : VeryHungry {
				messages[] = {"I'm dying of starvation"};
				messageStyle = "colorImportant";
				cooldown[] = {30, 60};
				modifiers[] = {{"health", -1}, {"blood", -0.005}};
				notifier[] = {2, "starving", {0.541, 0.031, 0.031, 1}};
				condition = "_this getVariable['energy',0] < 0";
			};
		};
	};
	
	class HighEnergy : Default {
		messagesExit[] = {};
		messageExitStyle = "";
		
		class Stages {
			class ReasonableEnergy : DefaultStage {
				messages[] = {};
				messageStyle = "";
				cooldown[] = {};
				condition = "_this getVariable['energy',0] > 2000";
				notifier[] = {2, "energized", {0.294, 0.541, 0.031, 1}};
			};
			
			class HighEnergy : ReasonableEnergy {
				messages[] = {};
				messageStyle = "";
				cooldown[] = {};
				condition = "_this getVariable['energy',0] > 4000";
				notifier[] = {2, "energized", {0.439, 0.804, 0.0431, 1}};
			};
		};
	};
	
	class Healing : Default {
		messagesExit[] = {};
		messageExitStyle = "";
		
		class Stages {
			class LowRegeneration : DefaultStage {
				messages[] = {};
				messageStyle = "";
				cooldown[] = {};
				modifiers[] = {{"blood", 1, *0.5}};
				condition = "(_this getVariable['energy',0] > 2000) and (_this getVariable['water',0] > 1500)";
			};
			
			class FullRegeneration : LowRegeneration {
				modifiers[] = {{"blood", 1.5}};
				condition = "(_this getVariable['energy',0] > 4000) and (_this getVariable['water',0] > 2500)";
			};
			
			class Healing : FullRegeneration {
				messages[] = {};
				messageStyle = "colorFriendly";
				cooldown[] = {};
				modifiers[] = {{"health", 1, *0.5}};
				notifier[] = {0, "healing", {0.294, 0.541, 0.031, 1}};
				statementEnter = "";
				condition = "(_this getVariable['energy',0] > 4000) and (_this getVariable['water',0] > 2500) and (_this getVariable['blood',0] >= 5000) and (_this getVariable['health',0] < 5000)";
			};
			
			class Healthy : FullRegeneration {
				messages[] = {};
				messageStyle = "colorFriendly";
				cooldown[] = {};
				modifiers[] = {};
				notifier[] = {5, "healthy", {0.439, 0.804, 0.0431, 1}};
				statementEnter = "_this setDamage 0;";
				condition = "(_this getVariable['blood',0] >= 5000) and (_this getVariable['health',0] >= 5000)";
			};
		};
	};
	
	class Healthy : Default {
		messagesExit[] = {};
		messageExitStyle = "";
		
		class Stages {};
	};
	
	class Thirst : Default {
		messagesExit[] = {};
		messageExitStyle = "colorFriendly";
		
		class Stages {
			class LightDehydration : DefaultStage {
				messages[] = {"I feel thirsty", "I'm thirsty", "I need a drink", "I feel like having a drink", "I want to drink something"};
				messageStyle = "";
				cooldown[] = {60, 180};
				condition = "_this getVariable['water',0] < 1500";
				notifier[] = {3, "thirsty", {0.525, 0.541, 0.031, 1}};
			};
			
			class MediumDehydration : LightDehydration {
				messages[] = {"I really need to drink"};
				messageStyle = "";
				cooldown[] = {20, 30};
				condition = "_this getVariable['water',0] < 500";
				notifier[] = {3, "thirsty", {0.541, 0.294, 0.031, 1}};
			};
			
			class HighDehydration : MediumDehydration {
				messages[] = {"I'm dying of dehydration"};
				messageStyle = "colorImportant";
				cooldown[] = {30, 60};
				modifiers[] = {{"health", -2}, {"blood", -0.005}};
				notifier[] = {3, "thirsty", {0.541, 0.031, 0.031, 1}};
				condition = "_this getVariable['water',0] < 0";
			};
			
			class SevereDehydration : HighDehydration {
				messages[] = {"I'm dying of dehydration"};
				messageStyle = "colorImportant";
				cooldown[] = {20, 30};
				modifiers[] = {{"health", -8}, {"blood", -0.01}};
				notifier[] = {3, "thirsty", {0.541, 0.031, 0.031, 1}};
				condition = "_this getVariable['water',0] < -1000";
			};
		};
	};
	
	class HighWater : Default {
		messagesExit[] = {};
		messageExitStyle = "";
		
		class Stages {
			class ReasonablyHydrated : DefaultStage {
				messages[] = {};
				messageStyle = "";
				cooldown[] = {};
				condition = "_this getVariable['water',0] > 2500";
				notifier[] = {3, "hydrated", {0.294, 0.541, 0.031, 1}};
			};
			
			class WellHydrated : ReasonablyHydrated {
				messages[] = {};
				messageStyle = "";
				cooldown[] = {};
				condition = "_this getVariable['water',0] > 3500";
				notifier[] = {3, "hydrated", {0.439, 0.804, 0.0431, 1}};
			};
		};
	};
	
	class Packed : Default {
		messagesExit[] = {};
		messageExitStyle = "";
		
		class Stages {
			class MediumStuffed : DefaultStage {
				messages[] = {"My stomach feels stuffed", "I feel really full", "My stomach feels completely full"};
				messageStyle = "";
				cooldown[] = {30, 60};
				condition = "_this getVariable['stomach',0] > 1800";
				notifier[] = {4, "stuffed", {0.525, 0.541, 0.031, 1}};
			};
			
			class FullyStuffed : DefaultStage {
				messages[] = {"My stomach feels absolutely stuffed", "I feel over-fed", "My stomach feels much more full than it's normal"};
				messageStyle = "";
				cooldown[] = {30, 60};
				condition = "_this getVariable['stomach',0] > 2800";
				notifier[] = {4, "stuffed", {0.541, 0.294, 0.031, 1}};
			};
			
			class Vomit : DefaultStage {
				messages[] = {"I am close to vomiting", "I think I'm going to vomit...", "I'm going to vomit..."};
				messageStyle = "colorImportant";
				cooldown[] = {5, 10};
				duration[] = {10, 15};
				condition = "_this getVariable['stomach',0] >= 3300";
				notifier[] = {4, "stuffed", {0.541, 0.031, 0.031, 1}};
			};
			
			class DoVomit : DefaultStage {
				messages[] = {};
				messageStyle = "colorImportant";
				condition = "_this getVariable['stomach',0] >= 3300";
				statementEnter = "null = _this spawn player_vomit;";
				notifier[] = {5, "sick", {0.541, 0.031, 0.031, 1}};
			};
		};
	};
	
	class Wet : Default {
		messagesExit[] = {};
		messageExitStyle = "";
		
		class Stages {
			class Damp : DefaultStage {
				cooldown[] = {60, 120};
				messages[] = {"I feel damp"};
				messageStyle = "";
				condition = "_this getVariable ['wet',0] > 0.05";
				notifier[] = {7, "damp", {0, 0.953, 1, 1}};
			};
			
			class Wet : DefaultStage {
				cooldown[] = {60, 120};
				messages[] = {"My body feels wet"};
				messageStyle = "";
				condition = "_this getVariable ['wet',0] > 0.2";
				notifier[] = {7, "wet", {0, 0.716, 1, 1}};
			};
			
			class Soaked : DefaultStage {
				cooldown[] = {60, 120};
				messages[] = {"I am soaked through"};
				messageStyle = "colorImportant";
				condition = "_this getVariable ['wet',0] > 0.5";
				notifier[] = {7, "soaked", {0, 0.417, 1, 1}};
			};
			
			class Drenched : DefaultStage {
				cooldown[] = {60, 120};
				messages[] = {"I am completely drenched"};
				messageStyle = "colorImportant";
				condition = "_this getVariable ['wet',0] > 0.8";
				notifier[] = {7, "drenched", {0, 0.117, 1, 1}};
			};
		};
	};
	
	class FootInjury : Default {
		messagesExit[] = {};
		messageExitStyle = "";
		
		class Stages {
			class Injury : DefaultStage {
				cooldown[] = {60, 120};
				messages[] = {"My feet hurt", "My feet are sore"};
				messageStyle = "colorImportant";
				condition = "(_this getVariable['health',0] > 1000) && (speed _person > 0) && ((isNull (_person itemInSlot 'Feet')) || ( damage (_person itemInSlot 'Feet') >=1 ))";
				modifiers[] = {{"health", -10, "* getNumber (configFile >> 'CfgSurfaces' >> surfaceType getPosASL _person >> 'rough');"}};
			};
		};
	};
	
	class HitLegs : Default {
		messagesExit[] = {};
		messageExitStyle = "";
		
		class Stages {
			class Start : DefaultStage {
				cooldown[] = {};
				duration[] = {1, 2};
				messages[] = {};
				condition = "(_person getHitPointDamage 'HitLegs' < 0.15)";
				notifier[] = {};
			};
			
			class Injury : DefaultStage {
				cooldown[] = {60, 240};
				duration[] = {1, 2};
				messages[] = {"My leg is painful"};
				condition = "(_person getHitPointDamage 'HitLegs' >= 0.15) && (_person getHitPointDamage 'HitLegs' < 0.4)";
				notifier[] = {6, "sprained ankle", {0.525, 0.541, 0.031, 1}};
			};
			
			class Chipped : DefaultStage {
				cooldown[] = {60, 120};
				duration[] = {1, 2};
				messages[] = {"My leg hurts"};
				messageStyle = "colorImportant";
				condition = "(_person getHitPointDamage 'HitLegs' >= 0.4) && (_person getHitPointDamage 'HitLegs' <= 0.9)";
				notifier[] = {6, "chipped leg", {0.541, 0.294, 0.031, 1}};
			};
			
			class Fracture : DefaultStage {
				cooldown[] = {30, 60};
				duration[] = {};
				messages[] = {"My leg is extremely painful", "I think my leg is broken"};
				messageStyle = "colorImportant";
				condition = "_person getHitPointDamage 'HitLegs' > 0.9";
				notifier[] = {6, "fractured leg", {0.541, 0.031, 0.031, 1}};
			};
		};
	};
	
	class HitHands : Default {
		messagesExit[] = {};
		messageExitStyle = "";
		
		class Stages {
			class Injury : DefaultStage {
				cooldown[] = {60, 120};
				messages[] = {"My arm is in pain", "My arm is painful"};
				messageStyle = "colorImportant";
				condition = "_person getHitPointDamage 'HitHands' > 0.5";
			};
			
			class Fracture : DefaultStage {
				cooldown[] = {30, 60};
				duration[] = {86400, 604800};
				messages[] = {"My arm is in extreme pain", "My arm is extremely painful", "I think my arm is broken"};
				messageStyle = "colorImportant";
				condition = "_person getHitPointDamage 'HitHands' == 1";
				notifier[] = {9, "fracture", {0.541, 0.031, 0.031, 1}};
			};
			
			class Setting : DefaultStage {
				cooldown[] = {30, 60};
				duration[] = {86400, 604800};
				messages[] = {"My arm is in pain", "My arm is painful"};
				condition = "_person getHitPointDamage 'HitHands' == 1";
				notifier[] = {9, "fracture", {0.541, 0.031, 0.031, 1}};
			};
			
			class Healed : DefaultStage {
				condition = "_this getHitPointDamage 'HitHands' == 1";
				statementEnter = "_person setHitPointDamage ['HitHands',0.3];";
			};
		};
	};
	
	class Unconscious : Default {
		class Stages {
			class LossOfConsciousness : DefaultStage {
				cooldown[] = {};
				duration[] = {};
				condition = "((_this getVariable['shock',0]) + DZ_BLOOD_UNCONSCIOUS) > _this getVariable['blood',5000]";
				statementEnter = "_person setUnconscious true; admin_log format ['Player %1(id=%2) has fallen into unconsciousness.', name _person, getPlayerUID _person];";
				statementExit = "_person setUnconscious false;";
			};
			
			class Revived : LossOfConsciousness {
				cooldown[] = {};
				duration[] = {60, 240};
				condition = "!(_this getVariable['fibrillation',false]) and (lifeState _this != 'UNCONSCIOUS')";
				statementEnter = "";
				statementExit = "";
			};
		};
	};
	
	class HeartAttack : Default {
		class Stages {
			class Warning : DefaultStage {
				cooldown[] = {5, 10};
				duration[] = {20, 40};
				messages[] = {"I feel severe pain in my chest"};
				condition = "true";
				messageStyle = "colorImportant";
				modifiers[] = {{"shock", 100, ""}};
			};
			
			class Fibrillation : DefaultStage {
				cooldown[] = {};
				duration[] = {};
				condition = "true";
				modifiers[] = {{"health", -20, ""}, {"shock", 5000, ""}};
				statementEnter = "_person setVariable['fibrillation',true]";
				statementExit = "_person setVariable['fibrillation',false]";
			};
		};
	};
	
	class FoodPoisoning_LightImpact : Default {
		messagesExit[] = {};
		messageExitStyle = "";
		
		class Transmission {
			invasivity = 1;
			toxicity = 0.2;
			physicalResistance = 1;
			chemicalResistance = 1;
			
			class Direct : DefaultDirect {
				transferability = 1;
				fromPlayer = 0;
			};
		};
		
		class Stages {
			class 0 : DefaultStage {
				cooldown[] = {};
				duration[] = {180, 600};
				messages[] = {};
				messageStyle = "";
				condition = "true";
			};
			
			class 1 : 0 {
				cooldown[] = {30, 60};
				duration[] = {180, 420};
				messages[] = {"I have a funny taste in my mouth", "My mouth tastes funny", "I notice a weird taste", "My mouth tastes weird"};
				messageStyle = "";
				condition = "true";
			};
			
			class 2 : 1 {
				cooldown[] = {300, 600};
				duration[] = {600, 1200};
				messages[] = {"I feel nauseous"};
				messageStyle = "";
				modifiers[] = {{"water", -1.02, " * DZ_THIRST_SEC"}};
				notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
				statementEnter = "efFPL = ppEffectCreate ['RadialBlur', 300];efFPL ppEffectEnable true;efFPL ppEffectAdjust [0.005,0.005,0.2,0.2];efFPL ppEffectCommit 0;";
			};
			
			class 3 : 2 {
				cooldown[] = {120, 300};
				duration[] = {1200, 2400};
				messages[] = {"I feel dizzy", "I feel light-headed", "I feel faint", "I feel unsteady"};
				messageStyle = "colorImportant";
				modifiers[] = {{"water", -1.05, " * DZ_THIRST_SEC"}, {"blood", -0.001}};
				notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
				statementEnter = "efFPL = ppEffectCreate ['RadialBlur', 300];efFPL ppEffectEnable true;efFPL ppEffectAdjust [0.01,0.01,0.2,0.2];efFPL ppEffectCommit 0;";
			};
			
			class 4 : 3 {
				statementEnter = "ppEffectDestroy efFPL;";
				cooldown[] = {180, 420};
				duration[] = {900, 1800};
				messages[] = {};
				messageStyle = "";
				modifiers[] = {};
			};
		};
	};
	
	class FoodPoisoning_MediumImpact : Default {
		messagesExit[] = {};
		messageExitStyle = "";
		
		class Transmission {
			invasivity = 1;
			toxicity = 0.17;
			physicalResistance = 1;
			chemicalResistance = 1;
			
			class Direct : DefaultDirect {
				transferability = 1;
				fromPlayer = 0;
			};
		};
		
		class Stages {
			class 0 : DefaultStage {
				cooldown[] = {};
				duration[] = {180, 600};
				messages[] = {};
				messageStyle = "";
				condition = "true";
			};
			
			class 1 : 0 {
				cooldown[] = {30, 60};
				duration[] = {180, 420};
				messages[] = {"I have a funny taste in my mouth", "My mouth tastes funny", "I notice a weird taste", "My mouth tastes weird"};
				messageStyle = "";
				condition = "true";
			};
			
			class 2 : 1 {
				cooldown[] = {180, 420};
				duration[] = {600, 1800};
				messages[] = {"I feel nauseous"};
				messageStyle = "colorImportant";
				modifiers[] = {{"water", -1.05, " * DZ_THIRST_SEC"}, {"blood", -0.002}};
				notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
				statementEnter = "efFPL = ppEffectCreate ['RadialBlur', 300];efFPL ppEffectEnable true;efFPL ppEffectAdjust [0.01,0.01,0.2,0.2];efFPL ppEffectCommit 0;";
			};
			
			class 3 : 2 {
				cooldown[] = {5, 10};
				duration[] = {10, 15};
				messages[] = {"I am close to vomiting", "I think I'm going to vomit...", "I'm going to vomit..."};
				messageStyle = "";
				modifiers[] = {};
				statementEnter = "null = _this spawn player_vomit;";
				notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
			};
			
			class 4 : 3 {
				cooldown[] = {120, 300};
				duration[] = {1200, 2400};
				messages[] = {"I feel dizzy", "I feel light-headed", "I feel faint", "I feel unsteady"};
				messageStyle = "colorImportant";
				modifiers[] = {{"water", -1.1, " * DZ_THIRST_SEC"}, {"blood", -0.001}};
				notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
				statementEnter = "efFPM = ppEffectCreate ['RadialBlur', 300];efFPM ppEffectEnable true;efFPM ppEffectAdjust [0.02,0.02,0.25,0.25];efFPM ppEffectCommit 0;";
			};
			
			class 5 : 4 {
				statementEnter = "ppEffectDestroy efFPM;";
				cooldown[] = {180, 420};
				duration[] = {900, 1800};
				messages[] = {"I feel tired", "I feel run-down", "I feel worn-out"};
				messageStyle = "";
				modifiers[] = {};
			};
		};
	};
	
	class FoodPoisoning_HeavyImpact : Default {
		messagesExit[] = {};
		messageExitStyle = "";
		
		class Transmission {
			invasivity = 1;
			toxicity = 0.15;
			physicalResistance = 1;
			chemicalResistance = 1;
			
			class Direct : DefaultDirect {
				transferability = 1;
				fromPlayer = 0;
			};
		};
		
		class Stages {
			class 0 : DefaultStage {
				cooldown[] = {};
				duration[] = {180, 600};
				messages[] = {};
				messageStyle = "";
				condition = "true";
			};
			
			class 1 : 0 {
				cooldown[] = {30, 60};
				duration[] = {180, 420};
				messages[] = {"I have a funny taste in my mouth", "My mouth tastes funny", "I notice a weird taste", "My mouth tastes weird"};
				messageStyle = "";
				condition = "true";
			};
			
			class 2 : 1 {
				cooldown[] = {180, 420};
				duration[] = {600, 1800};
				messages[] = {"I feel nauseous"};
				messageStyle = "colorImportant";
				modifiers[] = {{"water", -1.5, " * DZ_THIRST_SEC"}, {"blood", -0.003}};
				notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
				statementEnter = "efFPH = ppEffectCreate ['RadialBlur', 300];efFPH ppEffectEnable true;efFPH ppEffectAdjust [0.015,0.015,0.3,0.3];efFPH ppEffectCommit 0;";
			};
			
			class 3 : 2 {
				cooldown[] = {5, 10};
				duration[] = {10, 15};
				messages[] = {"I am close to vomiting", "I think I'm going to vomit...", "I'm going to vomit..."};
				messageStyle = "";
				modifiers[] = {};
				statementEnter = "null = _this spawn player_vomit;";
				notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
			};
			
			class 4 : 3 {
				cooldown[] = {120, 300};
				duration[] = {1200, 2400};
				messages[] = {"I feel cramps in my stomach"};
				messageStyle = "colorImportant";
				modifiers[] = {{"water", -2, " * DZ_THIRST_SEC"}, {"blood", -0.002}};
				notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
				statementEnter = "efFPH = ppEffectCreate ['RadialBlur', 300];efFPH ppEffectEnable true;efFPH ppEffectAdjust [0.025,0.025,0.2,0.2];efFPH ppEffectCommit 0;";
			};
			
			class 5 : 4 {
				cooldown[] = {5, 10};
				duration[] = {10, 15};
				messages[] = {"I am close to vomiting", "I think I'm going to vomit...", "I'm going to vomit..."};
				messageStyle = "";
				modifiers[] = {};
				statementEnter = "null = _this spawn player_vomit;";
			};
			
			class 6 : 5 {
				cooldown[] = {180, 420};
				duration[] = {900, 1800};
				messages[] = {"I feel exhausted", "I feel extremely tired"};
				messageStyle = "";
				modifiers[] = {{"water", -1.5, " * DZ_THIRST_SEC"}};
				notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
				statementEnter = "ppEffectDestroy efFPH;";
			};
		};
	};
	
	class ChemicalPoisoning : Default {
		messagesExit[] = {};
		messageExitStyle = "";
		
		class Stages {
			class 0 : DefaultStage {
				cooldown[] = {10, 15};
				duration[] = {40, 120};
				messages[] = {"I have a funny taste in my mouth", "My mouth tastes funny", "I notice a weird taste", "My mouth tastes weird"};
				messageStyle = "";
				condition = "true";
			};
			
			class 1 : 0 {
				cooldown[] = {20, 40};
				duration[] = {120, 300};
				messages[] = {"I feel nauseous"};
				messageStyle = "colorImportant";
				modifiers[] = {{"water", -2, " * DZ_THIRST_SEC"}, {"blood", -0.005}, {"health", -0.005}};
				notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
				statementEnter = "efCHM = ppEffectCreate ['ChromAberration', 250];efCHM ppEffectEnable true;efCHM ppEffectAdjust [0.015,0.015,true];efCHM ppEffectCommit 0;";
			};
			
			class 2 : 1 {
				cooldown[] = {5, 10};
				duration[] = {10, 15};
				messages[] = {"I am close to vomiting", "I think I'm going to vomit...", "I'm going to vomit..."};
				messageStyle = "";
				modifiers[] = {};
				statementEnter = "null = _this spawn player_vomit;";
				notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
			};
			
			class 3 : 2 {
				cooldown[] = {120, 300};
				duration[] = {1200, 2400};
				messages[] = {"I feel cramps in my stomach"};
				messageStyle = "colorImportant";
				modifiers[] = {{"water", -3, " * DZ_THIRST_SEC"}, {"blood", -0.003}, {"health", -0.003}};
				notifier[] = {5, "sick", {0.541, 0.031, 0.031, 1}};
				statementEnter = "efCHM = ppEffectCreate ['ChromAberration', 250];efCHM ppEffectEnable true;efCHM ppEffectAdjust [0.1,0.1,true];efCHM ppEffectCommit 0;";
			};
			
			class 4 : 3 {
				cooldown[] = {5, 10};
				duration[] = {10, 15};
				messages[] = {"I am close to vomiting", "I think I'm going to vomit...", "I'm going to vomit..."};
				messageStyle = "";
				modifiers[] = {};
				statementEnter = "null = _this spawn player_vomit;";
				notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
			};
			
			class 5 : 4 {
				cooldown[] = {180, 420};
				duration[] = {900, 1800};
				messages[] = {"I feel exhausted", "I feel extremely tired"};
				messageStyle = "";
				modifiers[] = {{"water", -2, " * DZ_THIRST_SEC"}, {"blood", -0.001}};
				notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
				statementEnter = "ppEffectDestroy efCHM";
			};
		};
	};
	
	class HemolyticReactionHeavyImpact : Default {
		messagesExit[] = {};
		messageExitStyle = "";
		
		class Stages {
			class 1 : DefaultStage {
				cooldown[] = {};
				duration[] = {5, 15};
				messages[] = {};
				messageStyle = "";
				condition = "true";
			};
			
			class 2 : 1 {
				cooldown[] = {3, 4};
				duration[] = {5, 20};
				messages[] = {};
				messageStyle = "colorImportant";
				sounds[] = {};
				modifiers[] = {{"blood", -0.1}};
				notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
			};
			
			class 3 : 2 {
				cooldown[] = {10, 25};
				duration[] = {30, 120};
				messages[] = {};
				messageStyle = "colorImportant";
				sounds[] = {};
				modifiers[] = {{"blood", -0.2}};
				notifier[] = {5, "sick", {0.541, 0.031, 0.031, 1}};
			};
			
			class 4 : 3 {
				cooldown[] = {10, 25};
				duration[] = {60, 180};
				messages[] = {};
				messageStyle = "colorImportant";
				sounds[] = {};
				modifiers[] = {{"blood", -0.25}};
				notifier[] = {5, "sick", {0.541, 0.031, 0.031, 1}};
			};
			
			class 5 : 4 {
				cooldown[] = {};
				duration[] = {3, 7};
				messages[] = {};
				messageStyle = "";
				sounds[] = {};
				modifiers[] = {{"blood", -5000}};
				notifier[] = {5, "sick", {0.541, 0.031, 0.031, 1}};
			};
		};
	};
	
	class WoundInfection : Default {
		messagesExit[] = {"My wounds are clean now"};
		messageExitStyle = "colorFriendly";
		
		class Transmission {
			invasivity = 0.4;
			toxicity = 0.8;
			physicalResistance = 0.5;
			chemicalResistance = 0.6;
			
			class Direct : DefaultDirect {
				transferability = 1;
				fromPlayer = 0;
			};
		};
		
		class Stages {
			class 0 : DefaultStage {
				cooldown[] = {30, 60};
				duration[] = {180, 420};
				messages[] = {"My wounds are itchy", "I have itchy wounds"};
				messageStyle = "";
				modifiers[] = {{"water", -1.05, " * DZ_THIRST_SEC"}};
				notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
				condition = "true";
			};
			
			class 1 : 0 {
				cooldown[] = {300, 600};
				duration[] = {600, 1200};
				messages[] = {"My wounds are infected", "I have infected wounds"};
				messageStyle = "colorImportant";
				modifiers[] = {{"water", -1.3, " * DZ_THIRST_SEC"}, {"blood", -0.003}, {"health", -0.001}};
				notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
			};
			
			class 2 : 1 {
				cooldown[] = {120, 300};
				duration[] = {1200, 2400};
				messages[] = {"My wounds are seriously infected", "I have seriously infected wounds", "I'm feeling hot", "It's really warm"};
				messageStyle = "colorImportant";
				modifiers[] = {{"water", -1.5, " * DZ_THIRST_SEC"}, {"blood", -0.001}, {"health", -0.003}};
				notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
			};
			
			class 3 : 2 {
				cooldown[] = {180, 420};
				duration[] = {900, 1800};
				messages[] = {"My wounds hurt less", "My wounds look cleaner"};
				messageStyle = "";
				modifiers[] = {{"water", -1.3, " * DZ_THIRST_SEC"}};
				notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
			};
		};
	};
	
	class BrainFlu : Default {
		class Stages {
			class Latent : DefaultStage {
				messages[] = {};
				messageStyle = "";
				cooldown[] = {30, 45};
				duration[] = {120, 300};
				condition = "true";
			};
			
			class LightSickness : Latent {
				messages[] = {"I cough", "I sneeze"};
				messageStyle = "";
				cooldown[] = {20, 30};
				duration[] = {120, 300};
				modifiers[] = {{"water", -1, " * DZ_THIRST_SEC"}};
				notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
				condition = "true";
			};
			
			class Sickness : LightSickness {
				messages[] = {"I cough", "I sneeze", "I feel my nose dripping", "My nose feels congested", "I have a runny nose", "My throat is sore", "I feel sore throat", "My throat hurts"};
				messageStyle = "";
				cooldown[] = {20, 30};
				duration[] = {600, 1200};
				modifiers[] = {{"water", -2, " * DZ_THIRST_SEC"}};
				notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
				condition = "true";
			};
			
			class Fever : Sickness {
				messages[] = {"I'm feeling hot", "I'm burning up", "I'm slick with sweat", "My clothes are soaking with sweat", "I feel cold", "I start to shiver", "I feel shivery", "I'm shivering"};
				messageStyle = "colorImportant";
				cooldown[] = {20, 30};
				duration[] = {600, 1200};
				modifiers[] = {{"shock", -1}, {"water", -2, " * DZ_THIRST_SEC"}, {"health", -1}, {"blood", -0.005}};
				notifier[] = {10, "fever", {0.541, 0.031, 0.031, 1}};
				condition = "true";
			};
			
			class Terminal : Sickness {
				messages[] = {"I'm feeling hot", "I'm burning up", "I'm slick with sweat", "My clothes are soaking with sweat", "I feel cold", "I start to shiver", "I feel shivery", "I'm shivering"};
				messageStyle = "colorImportant";
				cooldown[] = {10, 15};
				duration[] = {};
				modifiers[] = {{"shock", -5}, {"water", -4, " * DZ_THIRST_SEC"}, {"health", -5}, {"blood", -0.01}};
				notifier[] = {10, "fever", {0.541, 0.031, 0.031, 1}};
				condition = "true";
			};
		};
	};
	
	class Infection : Default {
		class Stages {
			class Latent : DefaultStage {
				messages[] = {};
				messageStyle = "";
				cooldown[] = {};
				duration[] = {120, 300};
				condition = "true";
			};
			
			class LightSickness : Latent {
				messages[] = {"I cough", "I sneeze"};
				messageStyle = "";
				cooldown[] = {30, 45};
				duration[] = {3600, 10800};
				modifiers[] = {{"water", -1, " * DZ_THIRST_SEC"}};
				notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
				condition = "true";
			};
			
			class Sickness : LightSickness {
				messages[] = {"I cough", "I sneeze", "I feel my nose dripping", "My nose feels congested", "I have a runny nose", "My throat is sore", "I feel sore throat", "My throat hurts"};
				messageStyle = "";
				cooldown[] = {20, 30};
				duration[] = {14400, 28800};
				modifiers[] = {{"water", -2, " * DZ_THIRST_SEC"}};
				notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
				condition = "true";
			};
			
			class Fever : Sickness {
				messages[] = {"I'm feeling hot", "I'm burning up", "I'm slick with sweat", "My clothes are soaking with sweat", "I feel cold", "I start to shiver", "I feel shivery", "I'm shivering"};
				messageStyle = "colorImportant";
				cooldown[] = {20, 30};
				duration[] = {3600, 10800};
				modifiers[] = {{"shock", -5}, {"water", -2, " * DZ_THIRST_SEC"}, {"health", -1}};
				notifier[] = {10, "fever", {0.541, 0.031, 0.031, 1}};
				condition = "true";
			};
			
			class Recovery : Sickness {
				messages[] = {"I cough", "I sneeze", "I feel my nose dripping", "My nose feels congested", "I have a runny nose", "My throat is sore", "I feel sore throat", "My throat hurts"};
				messageStyle = "";
				cooldown[] = {20, 30};
				duration[] = {3600, 10800};
				condition = "true";
				notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
			};
		};
	};
	
	class Cholera : Default {
		messagesExit[] = {};
		messageExitStyle = "";
		
		class Transmission {
			invasivity = 0.6;
			toxicity = 0.4;
			physicalResistance = 0.5;
			chemicalResistance = 0.6;
			
			class Direct : DefaultDirect {
				transferability = 0.7;
				fromPlayer = 1;
			};
		};
		
		class Stages {
			class Immunity : DefaultStage {
				cooldown[] = {};
				duration[] = {86400, 259200};
				messages[] = {};
				messageStyle = "";
				condition = "true";
			};
			
			class Carrier : DefaultStage {
				cooldown[] = {};
				duration[] = {86400, 172800};
				messages[] = {};
				messageStyle = "";
				condition = "true";
			};
			
			class LightImpact : DefaultStage {
				cooldown[] = {};
				duration[] = {60, 240};
				messages[] = {};
				messageStyle = "";
				condition = "true";
				
				class Stages {
					class 0 : DefaultStage {
						cooldown[] = {180, 420};
						duration[] = {3600, 7200};
						messages[] = {"I feel tired", "I feel run-down", "I feel worn-out"};
						messageStyle = "";
						sounds[] = {};
						modifiers[] = {{"water", -1}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
					
					class 1 : 0 {
						cooldown[] = {120, 300};
						duration[] = {7200, 10800};
						messages[] = {"I feel a rumble in my bowels"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -2}};
						notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
					};
					
					class 2 : 1 {
						cooldown[] = {60, 180};
						duration[] = {7200, 10800};
						messages[] = {"I feel a rumble in my bowels"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -3}, {"blood", -1}};
						notifier[] = {5, "sick", {0.541, 0.031, 0.031, 1}};
					};
					
					class 3 : 2 {
						cooldown[] = {180, 420};
						duration[] = {3600, 7200};
						messages[] = {"I feel tired", "I feel run-down", "I feel worn-out"};
						messageStyle = "";
						sounds[] = {};
						modifiers[] = {{"water", -1}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
				};
			};
			
			class MediumImpact : DefaultStage {
				cooldown[] = {};
				duration[] = {60, 240};
				messages[] = {};
				messageStyle = "";
				condition = "true";
				
				class Stages {
					class 0 : DefaultStage {
						cooldown[] = {180, 420};
						duration[] = {3600, 7200};
						messages[] = {"I feel tired", "I feel run-down", "I feel worn-out"};
						messageStyle = "";
						sounds[] = {};
						modifiers[] = {{"water", -2}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
					
					class 1 : 0 {
						cooldown[] = {120, 300};
						duration[] = {7200, 10800};
						messages[] = {"I feel a rumble in my bowels"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -3}, {"blood", -1}};
						notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
					};
					
					class 2 : 1 {
						cooldown[] = {60, 180};
						duration[] = {7200, 10800};
						messages[] = {"I feel a rumble in my bowels"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -4}, {"blood", -2}};
						notifier[] = {5, "sick", {0.541, 0.031, 0.031, 1}};
					};
					
					class 3 : 2 {
						cooldown[] = {180, 420};
						duration[] = {3600, 7200};
						messages[] = {"I feel tired", "I feel run-down", "I feel worn-out"};
						messageStyle = "";
						sounds[] = {};
						modifiers[] = {{"water", -2}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
				};
			};
			
			class HeavyImpact : DefaultStage {
				cooldown[] = {};
				duration[] = {60, 240};
				messages[] = {};
				messageStyle = "";
				condition = "true";
				
				class Stages {
					class 0 : DefaultStage {
						cooldown[] = {180, 420};
						duration[] = {3600, 7200};
						messages[] = {"I feel exhausted", "I feel extremely tired"};
						messageStyle = "";
						sounds[] = {};
						modifiers[] = {{"water", -3}};
						notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
					};
					
					class 1 : 0 {
						cooldown[] = {120, 300};
						duration[] = {7200, 10800};
						messages[] = {"I feel a rumble in my bowels"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -4}, {"blood", -2}};
						notifier[] = {5, "sick", {0.541, 0.031, 0.031, 1}};
					};
					
					class 2 : 1 {
						cooldown[] = {60, 180};
						duration[] = {7200, 10800};
						messages[] = {"I feel a rumble in my bowels"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -6}, {"blood", -3}};
						notifier[] = {5, "sick", {0.541, 0.031, 0.031, 1}};
					};
					
					class 3 : 2 {
						cooldown[] = {180, 420};
						duration[] = {3600, 7200};
						messages[] = {"I feel exhausted", "I feel extremely tired"};
						messageStyle = "";
						sounds[] = {};
						modifiers[] = {{"water", -2}};
						notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
					};
				};
			};
		};
	};
	
	class CommonCold : Default {
		messagesExit[] = {};
		messageExitStyle = "";
		
		class Transmission {
			invasivity = 0.8;
			toxicity = 0.2;
			physicalResistance = 0.2;
			chemicalResistance = 0.3;
			
			class Direct : DefaultDirect {
				transferability = 0.4;
				fromPlayer = 1;
			};
		};
		
		class Stages {
			class Immunity : DefaultStage {
				cooldown[] = {};
				duration[] = {86400, 259200};
				messages[] = {};
				messageStyle = "colorFriendly";
				condition = "true";
			};
			
			class Carrier : DefaultStage {
				cooldown[] = {};
				duration[] = {86400, 172800};
				messages[] = {};
				messageStyle = "colorImportant";
				condition = "true";
			};
			
			class LightImpact : DefaultStage {
				cooldown[] = {};
				duration[] = {60, 240};
				messages[] = {};
				messageStyle = "";
				condition = "true";
				
				class Stages {
					class 0 : DefaultStage {
						cooldown[] = {180, 420};
						duration[] = {3600, 7200};
						messages[] = {"I feel cold", "I start to shiver", "I feel shivery", "I'm shivering"};
						messageStyle = "";
						modifiers[] = {{"water", -1.02, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
					
					class 1 : 0 {
						cooldown[] = {120, 300};
						duration[] = {3600, 7200};
						messages[] = {"I sneeze"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -1.05, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
					
					class 2 : 1 {
						cooldown[] = {60, 180};
						duration[] = {3600, 7200};
						messages[] = {"runnynose"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -1.08, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
					
					class 3 : 2 {
						cooldown[] = {180, 420};
						duration[] = {3600, 7200};
						messages[] = {"I feel tired", "I feel run-down", "I feel worn-out"};
						messageStyle = "";
						sounds[] = {};
						modifiers[] = {};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
				};
			};
			
			class MediumImpact : DefaultStage {
				cooldown[] = {};
				duration[] = {60, 240};
				messages[] = {};
				messageStyle = "";
				condition = "true";
				
				class Stages {
					class 0 : DefaultStage {
						cooldown[] = {180, 420};
						duration[] = {3600, 7200};
						messages[] = {"I feel cold", "I start to shiver", "I feel shivery", "I'm shivering"};
						messageStyle = "";
						modifiers[] = {{"water", -1.05, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
					
					class 1 : 0 {
						cooldown[] = {120, 300};
						duration[] = {3600, 7200};
						messages[] = {"I sneeze"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -1.08, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
					
					class 2 : 1 {
						cooldown[] = {60, 180};
						duration[] = {3600, 7200};
						messages[] = {"runnynose"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -1.12, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
					
					class 3 : 2 {
						cooldown[] = {180, 420};
						duration[] = {3600, 7200};
						messages[] = {"I feel tired", "I feel run-down", "I feel worn-out"};
						messageStyle = "";
						sounds[] = {};
						modifiers[] = {{"water", -1.02, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
				};
			};
			
			class HeavyImpact : DefaultStage {
				cooldown[] = {};
				duration[] = {60, 240};
				messages[] = {};
				messageStyle = "";
				condition = "true";
				
				class Stages {
					class 0 : DefaultStage {
						cooldown[] = {180, 420};
						duration[] = {3600, 7200};
						messages[] = {"I feel cold", "I start to shiver", "I feel shivery", "I'm shivering"};
						messageStyle = "";
						modifiers[] = {{"water", -1.08, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
					
					class 1 : 0 {
						cooldown[] = {120, 300};
						duration[] = {3600, 7200};
						messages[] = {"I sneeze"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -1.1, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
					};
					
					class 2 : 1 {
						cooldown[] = {60, 180};
						duration[] = {3600, 7200};
						messages[] = {"runnynose"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -1.15, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
					};
					
					class 3 : 2 {
						cooldown[] = {180, 420};
						duration[] = {3600, 7200};
						messages[] = {"I feel tired", "I feel run-down", "I feel worn-out"};
						messageStyle = "";
						sounds[] = {};
						modifiers[] = {{"water", -1.05, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
				};
			};
		};
	};
	
	class Influenza : Default {
		messagesExit[] = {};
		messageExitStyle = "";
		
		class Transmission {
			invasivity = 0.8;
			toxicity = 0.5;
			physicalResistance = 0.3;
			chemicalResistance = 0.4;
			
			class Direct : DefaultDirect {
				transferability = 0.5;
				fromPlayer = 1;
			};
		};
		
		class Stages {
			class Immunity : DefaultStage {
				cooldown[] = {};
				duration[] = {86400, 259200};
				messages[] = {};
				messageStyle = "colorFriendly";
				condition = "true";
			};
			
			class Carrier : DefaultStage {
				cooldown[] = {};
				duration[] = {86400, 172800};
				messages[] = {};
				messageStyle = "colorImportant";
				condition = "true";
			};
			
			class LightImpact : DefaultStage {
				cooldown[] = {};
				duration[] = {60, 240};
				messages[] = {};
				messageStyle = "";
				condition = "true";
				
				class Stages {
					class 0 : DefaultStage {
						cooldown[] = {180, 420};
						duration[] = {3600, 7200};
						messages[] = {"My head pounds", "My head throbs", "My head hurts"};
						messageStyle = "";
						modifiers[] = {{"water", -1.05, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
					
					class 1 : 0 {
						cooldown[] = {120, 300};
						duration[] = {7200, 10800};
						messages[] = {"I cough"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -1.1, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
					
					class 2 : 1 {
						cooldown[] = {60, 180};
						duration[] = {7200, 10800};
						messages[] = {"I cough"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -1.08, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
					
					class 3 : 2 {
						cooldown[] = {180, 420};
						duration[] = {3600, 7200};
						messages[] = {"I feel tired", "I feel run-down", "I feel worn-out"};
						messageStyle = "";
						sounds[] = {};
						modifiers[] = {{"water", -1.05, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
				};
			};
			
			class MediumImpact : DefaultStage {
				cooldown[] = {};
				duration[] = {60, 240};
				messages[] = {};
				messageStyle = "";
				condition = "true";
				
				class Stages {
					class 0 : DefaultStage {
						cooldown[] = {180, 420};
						duration[] = {3600, 7200};
						messages[] = {"My head pounds", "My head throbs", "My head hurts"};
						messageStyle = "";
						modifiers[] = {{"water", -1.08, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
					
					class 1 : 0 {
						cooldown[] = {120, 300};
						duration[] = {7200, 10800};
						messages[] = {"I cough"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -1.15, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
					};
					
					class 2 : 1 {
						cooldown[] = {60, 180};
						duration[] = {7200, 10800};
						messages[] = {"I cough"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -1.12, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
					};
					
					class 3 : 2 {
						cooldown[] = {180, 420};
						duration[] = {3600, 7200};
						messages[] = {"I feel tired", "I feel run-down", "I feel worn-out"};
						messageStyle = "";
						sounds[] = {};
						modifiers[] = {{"water", -1.08, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
				};
			};
			
			class HeavyImpact : DefaultStage {
				cooldown[] = {};
				duration[] = {60, 240};
				messages[] = {};
				messageStyle = "";
				condition = "true";
				
				class Stages {
					class 0 : DefaultStage {
						cooldown[] = {180, 420};
						duration[] = {3600, 7200};
						messages[] = {"My head pounds", "My head throbs", "My head hurts"};
						messageStyle = "";
						modifiers[] = {{"water", -1.12, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
					};
					
					class 1 : 0 {
						cooldown[] = {120, 300};
						duration[] = {7200, 10800};
						messages[] = {"I cough"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -1.2, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.541, 0.031, 0.031, 1}};
					};
					
					class 2 : 1 {
						cooldown[] = {60, 180};
						duration[] = {7200, 10800};
						messages[] = {"I cough"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -1.15, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.541, 0.031, 0.031, 1}};
					};
					
					class 3 : 2 {
						cooldown[] = {180, 420};
						duration[] = {3600, 7200};
						messages[] = {"I feel exhausted", "I feel extremely tired"};
						messageStyle = "";
						sounds[] = {};
						modifiers[] = {{"water", -1.1, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
					};
				};
			};
		};
	};
	
	class Angina : Default {
		messagesExit[] = {};
		messageExitStyle = "";
		
		class Transmission {
			invasivity = 0.4;
			toxicity = 0.6;
			physicalResistance = 0.3;
			chemicalResistance = 0.4;
			
			class Direct : DefaultDirect {
				transferability = 0.5;
				fromPlayer = 1;
			};
		};
		
		class Stages {
			class Immunity : DefaultStage {
				cooldown[] = {};
				duration[] = {86400, 259200};
				messages[] = {};
				messageStyle = "";
				condition = "true";
			};
			
			class Carrier : DefaultStage {
				cooldown[] = {};
				duration[] = {86400, 172800};
				messages[] = {};
				messageStyle = "";
				condition = "true";
			};
			
			class LightImpact : DefaultStage {
				cooldown[] = {};
				duration[] = {60, 240};
				messages[] = {};
				messageStyle = "";
				condition = "true";
				
				class Stages {
					class 0 : DefaultStage {
						cooldown[] = {180, 420};
						duration[] = {3600, 7200};
						messages[] = {"My throat is sore", "I feel sore throat", "My throat hurts"};
						messageStyle = "";
						modifiers[] = {{"water", -1.05, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
					
					class 1 : 0 {
						cooldown[] = {120, 300};
						duration[] = {7200, 10800};
						messages[] = {"I swallow painfully"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -1.08, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
					
					class 2 : 1 {
						cooldown[] = {60, 180};
						duration[] = {7200, 10800};
						messages[] = {"I swallow painfully"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -1.1, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
					
					class 3 : 2 {
						cooldown[] = {180, 420};
						duration[] = {3600, 7200};
						messages[] = {"I feel tired", "I feel run-down", "I feel worn-out"};
						messageStyle = "";
						sounds[] = {};
						modifiers[] = {{"water", -1.05, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
				};
			};
			
			class MediumImpact : DefaultStage {
				cooldown[] = {};
				duration[] = {60, 240};
				messages[] = {};
				messageStyle = "";
				condition = "true";
				
				class Stages {
					class 0 : DefaultStage {
						cooldown[] = {180, 420};
						duration[] = {3600, 7200};
						messages[] = {"My throat is sore", "I feel sore throat", "My throat hurts"};
						messageStyle = "";
						modifiers[] = {{"water", -1.08, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
					
					class 1 : 0 {
						cooldown[] = {120, 300};
						duration[] = {7200, 10800};
						messages[] = {"I swallow painfully"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -1.15, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
					};
					
					class 2 : 1 {
						cooldown[] = {60, 180};
						duration[] = {7200, 10800};
						messages[] = {"I swallow painfully"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -1.1, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
					};
					
					class 3 : 2 {
						cooldown[] = {180, 420};
						duration[] = {3600, 7200};
						messages[] = {"I feel tired", "I feel run-down", "I feel worn-out"};
						messageStyle = "";
						sounds[] = {};
						modifiers[] = {{"water", -1.08, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
				};
			};
			
			class HeavyImpact : DefaultStage {
				cooldown[] = {};
				duration[] = {60, 240};
				messages[] = {};
				messageStyle = "";
				condition = "true";
				
				class Stages {
					class 0 : DefaultStage {
						cooldown[] = {180, 420};
						duration[] = {3600, 7200};
						messages[] = {"My throat is sore", "I feel sore throat", "My throat hurts"};
						messageStyle = "";
						modifiers[] = {{"water", -1.12, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
					};
					
					class 1 : 0 {
						cooldown[] = {120, 300};
						duration[] = {7200, 10800};
						messages[] = {"I swallow painfully"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -1.2, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.541, 0.031, 0.031, 1}};
					};
					
					class 2 : 1 {
						cooldown[] = {60, 180};
						duration[] = {7200, 10800};
						messages[] = {"I swallow painfully"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -1.18, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.541, 0.031, 0.031, 1}};
					};
					
					class 3 : 2 {
						cooldown[] = {180, 420};
						duration[] = {3600, 7200};
						messages[] = {"I feel exhausted", "I feel extremely tired"};
						messageStyle = "";
						sounds[] = {};
						modifiers[] = {{"water", -1.1, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
					};
				};
			};
		};
	};
	
	class Salmonellosis : Default {
		messagesExit[] = {};
		messageExitStyle = "";
		
		class Transmission {
			invasivity = 0.5;
			toxicity = 0.5;
			physicalResistance = 0.4;
			chemicalResistance = 0.5;
			
			class Direct : DefaultDirect {
				transferability = 0.6;
				fromPlayer = 1;
			};
		};
		
		class Stages {
			class Immunity : DefaultStage {
				cooldown[] = {};
				duration[] = {1.2096e+006.0, 1.8144e+006.0};
				messages[] = {};
				messageStyle = "colorFriendly";
				condition = "true";
			};
			
			class Carrier : DefaultStage {
				cooldown[] = {};
				duration[] = {86400, 604800};
				messages[] = {};
				messageStyle = "";
				condition = "true";
			};
			
			class LightImpact : DefaultStage {
				cooldown[] = {};
				duration[] = {7200, 28800};
				messages[] = {"DBG>> light impact - incubation"};
				messageStyle = "";
				condition = "true";
				
				class Stages {
					class 0 : DefaultStage {
						cooldown[] = {180, 420};
						duration[] = {10800, 28800};
						messages[] = {"I feel cramps in my stomach"};
						messageStyle = "";
						sounds[] = {};
						modifiers[] = {{"water", -1.1, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
					
					class 1 : 0 {
						cooldown[] = {120, 300};
						duration[] = {10800, 28800};
						messages[] = {"I feel a rumble in my bowels"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -1.15, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
					
					class 2 : 1 {
						cooldown[] = {60, 180};
						duration[] = {7200, 21600};
						messages[] = {"I just soiled myself"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -1.12, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
					};
					
					class 3 : 2 {
						cooldown[] = {180, 420};
						duration[] = {7200, 21600};
						messages[] = {"I feel tired", "I feel run-down", "I feel worn-out"};
						messageStyle = "";
						sounds[] = {};
						modifiers[] = {{"water", -1.1, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
				};
			};
			
			class MediumImpact : DefaultStage {
				cooldown[] = {};
				duration[] = {3600, 25200};
				messages[] = {};
				messageStyle = "";
				condition = "true";
				
				class Stages {
					class 0 : DefaultStage {
						cooldown[] = {180, 420};
						duration[] = {10800, 28800};
						messages[] = {"I feel cramps in my stomach"};
						messageStyle = "";
						modifiers[] = {{"water", -1.15, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.525, 0.541, 0.031, 1}};
					};
					
					class 1 : 0 {
						cooldown[] = {120, 300};
						duration[] = {14400, 32400};
						messages[] = {"I feel a rumble in my bowels"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -1.2, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
					};
					
					class 2 : 1 {
						cooldown[] = {60, 180};
						duration[] = {10800, 32400};
						messages[] = {"I just soiled myself"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -1.2, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
					};
					
					class 3 : 2 {
						cooldown[] = {180, 420};
						duration[] = {10800, 32400};
						messages[] = {"I feel exhausted", "I feel extremely tired"};
						messageStyle = "";
						sounds[] = {};
						modifiers[] = {{"water", -1.15, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
					};
				};
			};
			
			class HeavyImpact : DefaultStage {
				cooldown[] = {};
				duration[] = {3600, 18000};
				messages[] = {};
				messageStyle = "";
				condition = "true";
				
				class Stages {
					class 0 : DefaultStage {
						cooldown[] = {180, 420};
						duration[] = {10800, 32400};
						messages[] = {"I feel cramps in my stomach"};
						messageStyle = "";
						modifiers[] = {{"water", -1.3, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
					};
					
					class 1 : 0 {
						cooldown[] = {120, 300};
						duration[] = {14400, 36000};
						messages[] = {"I just soiled myself"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -1.4, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.541, 0.031, 0.031, 1}};
					};
					
					class 2 : 1 {
						cooldown[] = {60, 180};
						duration[] = {14400, 32400};
						messages[] = {"I just soiled myself"};
						messageStyle = "colorImportant";
						sounds[] = {};
						modifiers[] = {{"water", -1.3, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.541, 0.031, 0.031, 1}};
					};
					
					class 3 : 2 {
						cooldown[] = {180, 420};
						duration[] = {10800, 36000};
						messages[] = {"I feel exhausted", "I feel extremely tired"};
						messageStyle = "";
						sounds[] = {};
						modifiers[] = {{"water", -1.2, " * DZ_THIRST_SEC"}};
						notifier[] = {5, "sick", {0.541, 0.294, 0.031, 1}};
					};
				};
			};
		};
	};
	
	class TestDisease : Default {
		messagesExit[] = {};
		messageExitStyle = "";
		
		class Transmission {
			invasivity = 0.7;
			physicalResistance = 0.2;
			chemicalResistance = 0.3;
			
			class Direct : DefaultDirect {
				transferability = 0.5;
			};
		};
		
		class Stages {
			class 0 : DefaultStage {
				cooldown[] = {5, 10};
				duration[] = {10, 15};
				messages[] = {"I am close to vomiting", "I think I'm going to vomit...", "I'm going to vomit..."};
				messageStyle = "ColorImportant";
				modifiers[] = {};
				statementEnter = "null = _this spawn player_vomit;";
				notifier[] = {0, "sick", {0.525, 0.541, 0.031, 1}};
			};
			
			class 1 : 0 {
				cooldown[] = {5, 10};
				duration[] = {10, 15};
				messages[] = {"I am close to vomiting", "I think I'm going to vomit...", "I'm going to vomit..."};
				messageStyle = "ColorImportant";
				modifiers[] = {};
				statementEnter = "null = _this spawn player_vomit;";
				notifier[] = {0, "sick", {0.525, 0.541, 0.031, 1}};
			};
			
			class 2 : 1 {
				cooldown[] = {5, 10};
				duration[] = {10, 15};
				messages[] = {"I am close to vomiting", "I think I'm going to vomit...", "I'm going to vomit..."};
				messageStyle = "ColorImportant";
				modifiers[] = {};
				statementEnter = "null = _this spawn player_vomit;";
				notifier[] = {0, "sick", {0.525, 0.541, 0.031, 1}};
			};
			
			class 3 : 2 {
				cooldown[] = {5, 10};
				duration[] = {10, 15};
				messages[] = {"I am close to vomiting", "I think I'm going to vomit...", "I'm going to vomit..."};
				messageStyle = "ColorImportant";
				modifiers[] = {};
				statementEnter = "null = _this spawn player_vomit;";
				notifier[] = {0, "sick", {0.525, 0.541, 0.031, 1}};
			};
			
			class 4 : 3 {
				cooldown[] = {5, 10};
				duration[] = {10, 15};
				messages[] = {"I am close to vomiting", "I think I'm going to vomit...", "I'm going to vomit..."};
				messageStyle = "ColorImportant";
				modifiers[] = {};
				statementEnter = "null = _this spawn player_vomit;";
				notifier[] = {0, "sick", {0.525, 0.541, 0.031, 1}};
			};
		};
	};
	
	class Blinded : Default {
		messagesExit[] = {};
		messageExitStyle = "";
		
		class Stages {
			class 0 : DefaultStage {
				cooldown[] = {30, 60};
				duration[] = {0.1, 0.2};
				messages[] = {};
				messageStyle = "";
				statementEnter = "_person spawnForPlayer compile '10 fadeSound 0.4;setEVImpuls 10;';";
				condition = "true";
			};
		};
	};
	
	class BrainDisease : Default {
		messagesExit[] = {};
		messageExitStyle = "";
		
		class Transmission {
			invasivity = 1;
			toxicity = 0.2;
			physicalResistance = 1;
			chemicalResistance = 1;
			
			class Direct : DefaultDirect {
				transferability = 1;
				fromPlayer = 0;
			};
		};
		
		class Stages {
			class 0 : DefaultStage {
				cooldown[] = {};
				duration[] = {100, 150};
				sounds[] = {"Character_Mad"};
				statementEnter = "_person setVariable ['musclecramp',0.05];_person SetMuscleCramp 0.05;";
				statementExit = "";
			};
			
			class 1 : 0 {
				cooldown[] = {};
				duration[] = {100, 150};
				sounds[] = {"Character_Mad"};
				statementEnter = "_person setVariable ['musclecramp',0.1];_person SetMuscleCramp 0.1;";
				statementExit = "";
			};
			
			class 2 : 1 {
				cooldown[] = {};
				duration[] = {60, 120};
				sounds[] = {"Character_Mad"};
				statementEnter = "_person setVariable ['musclecramp',0.3];_person SetMuscleCramp 0.3";
				statementExit = "";
			};
			
			class 3 : 2 {
				cooldown[] = {};
				duration[] = {30, 60};
				sounds[] = {"Character_Mad"};
				statementEnter = "_person setVariable ['musclecramp',0.5];_person SetMuscleCramp 0.5;";
				statementExit = "";
			};
			
			class 4 : 3 {
				cooldown[] = {};
				duration[] = {15, 30};
				sounds[] = {"Character_Mad"};
				statementEnter = "_person setVariable ['musclecramp',0.7];_person SetMuscleCramp 0.7;";
				statementExit = "";
			};
			
			class Shake : 4 {
				cooldown[] = {180, 360};
				duration[] = {};
				sounds[] = {"Character_Mad"};
				condition = "true";
				statementEnter = "_person setVariable ['musclecramp',1];_person SetMuscleCramp 1;";
				statementExit = "";
			};
		};
	};
	
	class FeelingCold : Default {
		messagesExit[] = {};
		messageExitStyle = "";
		
		class Stages {
			class 0 : DefaultStage {
				modifiers[] = {};
				messages[] = {};
				messageStyle = "";
				statementEnter = "";
				condition = "_this getVariable ['heatcomfort',-15] > -10 && _this getVariable ['heatcomfort',-15] < 18";
			};
			
			class 1 : 0 {
				cooldown[] = {90, 90};
				modifiers[] = {{"bodytemperature", -1,  * 0.00000925}};
				messages[] = {"I am slowly cooling off"};
				messageStyle = "";
				statementEnter = "";
				postponeMessageUntilCooldown = 1;
				condition = "_this getVariable ['heatcomfort',-15] <= -10 && _this getVariable ['heatcomfort',-15] > -15";
			};
			
			class 2 : 1 {
				cooldown[] = {60, 60};
				modifiers[] = {{"bodytemperature", -1,  * 0.0040125}};
				messages[] = {"I am cooling off"};
				messageStyle = "";
				statementEnter = "";
				postponeMessageUntilCooldown = 1;
				condition = "_this getVariable ['heatcomfort',-15] <= -15 && _this getVariable ['heatcomfort',-15] > -20";
			};
			
			class 3 : 2 {
				cooldown[] = {40, 40};
				modifiers[] = {{"bodytemperature", -1,  * 0.004125}};
				messages[] = {"I am promptly cooling off"};
				messageStyle = "";
				statementEnter = "";
				postponeMessageUntilCooldown = 1;
				condition = "_this getVariable ['heatcomfort',-15] <= -20 && _this getVariable ['heatcomfort',-15] > -30";
			};
			
			class 4 : 3 {
				cooldown[] = {30, 30};
				modifiers[] = {{"bodytemperature", -1,  * 0.005}};
				messages[] = {"I am rapidly cooling off"};
				messageStyle = "";
				statementEnter = "";
				postponeMessageUntilCooldown = 1;
				condition = "_this getVariable ['heatcomfort',-15] <= -30";
			};
			
			class 5 : 4 {
				cooldown[] = {90, 90};
				modifiers[] = {{"bodytemperature", 1,  * 0.00001}};
				messages[] = {"I am warming up"};
				messageStyle = "";
				statementEnter = "";
				postponeMessageUntilCooldown = 1;
				condition = "_this getVariable ['heatcomfort',-15] >= 18 && _this getVariable ['heatcomfort',-15] < 28";
			};
			
			class 6 : 5 {
				cooldown[] = {30, 30};
				modifiers[] = {{"bodytemperature", 1,  * 0.0001}};
				messages[] = {"I am rapidly warming up"};
				messageStyle = "";
				statementEnter = "";
				postponeMessageUntilCooldown = 1;
				condition = "_this getVariable ['heatcomfort',-15] >= 28 && _this getVariable ['heatcomfort',-15] < 200";
			};
			
			class 7 : 6 {
				cooldown[] = {2, 2};
				modifiers[] = {{"health", -100}, {"blood", -100}, {"water", -15}};
				messages[] = {"I am burning!", "My face is melting!"};
				messageStyle = "ColorImportant";
				statementEnter = "";
				postponeMessageUntilCooldown = 1;
				condition = "_this getVariable ['heatcomfort',-15] >= 200";
			};
		};
	};
	
	class StaminaRegain : Default {
		messagesExit[] = {};
		messageExitStyle = "";
		
		class Stages {
			class 0 : DefaultStage {
				cooldown[] = {};
				modifiers[] = {{"stamina", 10, "* DZ_THIRST_SEC"}};
				messages[] = {};
				messageStyle = "";
				statementEnter = "";
				condition = "_this getVariable ['stamina',0] < 10";
			};
			
			class 1 : 0 {
				cooldown[] = {};
				modifiers[] = {{"stamina", 14, "* DZ_THIRST_SEC"}};
				messages[] = {};
				messageStyle = "";
				statementEnter = "";
				condition = "_this getVariable ['stamina',0] < 30 && _this getVariable ['stamina',0] >= 10";
			};
			
			class 2 : 1 {
				cooldown[] = {};
				modifiers[] = {{"stamina", 16, "* DZ_THIRST_SEC"}};
				messages[] = {};
				messageStyle = "";
				statementEnter = "";
				condition = "_this getVariable ['stamina',0] < 80 && _this getVariable ['stamina',0] >= 30";
			};
			
			class 3 : 2 {
				cooldown[] = {};
				modifiers[] = {{"stamina", 20, "* DZ_THIRST_SEC"}};
				messages[] = {};
				messageStyle = "";
				statementEnter = "";
				condition = "_this getVariable ['stamina',0] < 100 && _this getVariable ['stamina',0] >= 80";
			};
			
			class 4 : 3 {
				cooldown[] = {};
				modifiers[] = {};
				messages[] = {};
				messageStyle = "";
				statementEnter = "";
				condition = "_this getVariable ['stamina',0] >= 100";
			};
		};
	};
};

class cfgLiquidTypes {
	liquidTypes[] = {"Water", "RiverWater", "Vodka", "Beer", "Gasoline", "Diesel"};
	
	class Water {
		displayName = "Water";
		script = "";
		compatible[] = {};
		flammability = -10;
		intoxication = -10;
		
		class Nutrition {
			totalVolume = 150;
			energy = 0;
			water = 100;
			nutritionalIndex = 75;
		};
	};
	
	class RiverWater : Water {
		displayName = "Water";
		compatible[] = {};
		flammability = -10;
		intoxication = -10;
		
		class Nutrition {
			totalVolume = 150;
			energy = 0;
			water = 100;
			nutritionalIndex = 75;
		};
	};
	
	class Disinfectant : Water {
		displayName = "Disinfectant";
		compatible[] = {};
		flammability = 10;
		intoxication = 50;
		
		class Nutrition {
			totalVolume = 160;
			energy = 350;
			water = 30;
			nutritionalIndex = 55;
		};
	};
	
	class Vodka : Water {
		displayName = "Vodka";
		compatible[] = {};
		flammability = 10;
		intoxication = 50;
		
		class Nutrition {
			totalVolume = 375;
			energy = 1650;
			water = 100;
			nutritionalIndex = 75;
		};
	};
	
	class Beer {
		displayName = "Beer";
		compatible[] = {};
		flammability = 0;
		intoxication = 10;
		
		class Nutrition {
			totalVolume = 250;
			energy = 156;
			water = 100;
			nutritionalIndex = 75;
		};
	};
	
	class Gasoline {
		displayName = "Gasoline";
		compatible[] = {};
		flammability = 50;
		intoxication = 5;
		
		class Nutrition {
			totalVolume = 50;
			energy = -10;
			water = 100;
			nutritionalIndex = 75;
		};
	};
	
	class Diesel {
		displayName = "Diesel";
		compatible[] = {};
		flammability = 50;
		intoxication = 5;
		
		class Nutrition {
			totalVolume = 50;
			energy = -10;
			water = 100;
			nutritionalIndex = 75;
		};
	};
};
